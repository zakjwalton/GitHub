
EGR 326 - Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00001a12  00001ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a12  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800198  00800198  00001b5e  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00001b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e50  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00004c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc7  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006a8  00000000  00000000  00005f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000855  00000000  00000000  00006644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d52  00000000  00000000  00006e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__ctors_end>
       4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
       8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
       c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      10:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      14:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      18:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__vector_6>
      1c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      20:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      24:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      28:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      2c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      30:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      34:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      38:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_14>
      3c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      40:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      44:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      48:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      4c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      50:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      54:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      58:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      5c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      60:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      64:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 c0       	rjmp	.+0      	; 0x6a <__trampolines_end+0x2>
      6a:	c0 c0       	rjmp	.+384    	; 0x1ec <smallFont+0x6c>
      6c:	00 00       	nop
      6e:	39 39       	cpi	r19, 0x99	; 153
      70:	39 00       	.word	0x0039	; ????

00000072 <large_font>:
      72:	f0 fc fe 06 02 06 fe fc f0 00 07 1f 3f 30 20 30     ............?0 0
      82:	3f 1f 07 00 10 08 0c fc fe fe 00 00 00 00 20 20     ?.............  
      92:	20 3f 3f 3f 20 20 20 00 0c 0e 06 02 02 86 fe 7c      ???   ........|
      a2:	38 00 30 38 3c 36 33 31 30 30 38 00 0c 0e 86 82     8.08<631008.....
      b2:	82 c6 fe 7c 38 00 18 38 30 20 20 31 3f 1f 0e 00     ...|8..80  1?...
      c2:	00 c0 20 18 04 fe fe fe 00 00 03 02 02 02 22 3f     .. ..........."?
      d2:	3f 3f 22 03 00 fe 7e 46 46 c6 c6 87 00 00 18 38     ??"...~FF......8
      e2:	30 20 20 30 3f 1f 0f 00 c0 f0 f8 bc 4c c6 c2 82     0  0?.......L...
      f2:	00 00 0f 1f 3f 30 20 30 3f 1f 0f 00 0e 06 06 06     ....?0 0?.......
     102:	06 c6 f6 3e 0e 00 00 00 30 3c 0f 03 00 00 00 00     ...>....0<......
     112:	38 7c fe c6 82 c6 fe 7c 38 00 0e 1f 3f 31 20 31     8|.....|8...?1 1
     122:	3f 1f 0e 00 78 fc fe 86 02 86 fe fc f8 00 00 00     ?...x...........
     132:	21 21 31 1c 1f 0f 03 00 00 00 00 00 00 00 00 00     !!1.............
	...

0000014e <single_numbers>:
     14e:	3e 41 41 41 3e 00 42 7f 40 00 42 61 51 49 46 21     >AAA>.B.@.BaQIF!
     15e:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     16e:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     17e:	29 1e                                               ).

00000180 <smallFont>:
     180:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     190:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
     1a0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     1b0:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     1c0:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     1d0:	3e 41 41 41 3e 00 42 7f 40 00 42 61 51 49 46 21     >AAA>.B.@.BaQIF!
     1e0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     1f0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     200:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     210:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     220:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     230:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     240:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     250:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     260:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     270:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     280:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     290:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     2a0:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     2b0:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     2c0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     2d0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     2e0:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     2f0:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     300:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     310:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     320:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     330:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     340:	50 3c 44 64 54 4c 44 00 06 09 09 06                 P<DdTLD.....

0000034c <__ctors_end>:
     34c:	11 24       	eor	r1, r1
     34e:	1f be       	out	0x3f, r1	; 63
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d8 e0       	ldi	r29, 0x08	; 8
     354:	de bf       	out	0x3e, r29	; 62
     356:	cd bf       	out	0x3d, r28	; 61

00000358 <__do_copy_data>:
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	e2 e1       	ldi	r30, 0x12	; 18
     360:	fa e1       	ldi	r31, 0x1A	; 26
     362:	02 c0       	rjmp	.+4      	; 0x368 <__do_copy_data+0x10>
     364:	05 90       	lpm	r0, Z+
     366:	0d 92       	st	X+, r0
     368:	a8 39       	cpi	r26, 0x98	; 152
     36a:	b1 07       	cpc	r27, r17
     36c:	d9 f7       	brne	.-10     	; 0x364 <__do_copy_data+0xc>

0000036e <__do_clear_bss>:
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	a8 e9       	ldi	r26, 0x98	; 152
     372:	b1 e0       	ldi	r27, 0x01	; 1
     374:	01 c0       	rjmp	.+2      	; 0x378 <.do_clear_bss_start>

00000376 <.do_clear_bss_loop>:
     376:	1d 92       	st	X+, r1

00000378 <.do_clear_bss_start>:
     378:	a7 3d       	cpi	r26, 0xD7	; 215
     37a:	b2 07       	cpc	r27, r18
     37c:	e1 f7       	brne	.-8      	; 0x376 <.do_clear_bss_loop>
     37e:	0e 94 30 02 	call	0x460	; 0x460 <main>
     382:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <_exit>

00000386 <__bad_interrupt>:
     386:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038a <BUTTON_init>:

void BUTTON_init()
{
	//Note: Still need to add switches and LEDs
// Setting data direction for buttons as inputs (already set to zero)
BUTTON_DD_1 &= ~_BV(BUTTON_1_PIN);
     38a:	38 98       	cbi	0x07, 0	; 7
BUTTON_DD_2 &= ~_BV(BUTTON_2_PIN);
     38c:	39 98       	cbi	0x07, 1	; 7
BUTTON_DD_3 &= ~_BV(BUTTON_3_PIN);
     38e:	3a 98       	cbi	0x07, 2	; 7

// Enabling internal pull-up resistor on pins attached to buttons
BUTTON_1_PORT |= _BV(BUTTON_1_PIN);     
     390:	30 9a       	sbi	0x06, 0	; 6
BUTTON_2_PORT |= _BV(BUTTON_2_PIN);
     392:	31 9a       	sbi	0x06, 1	; 6
BUTTON_3_PORT |= _BV(BUTTON_3_PIN);
     394:	32 9a       	sbi	0x06, 2	; 6
     396:	08 95       	ret

00000398 <eeprom_GetAlarm>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void eeprom_GetAlarm(void){
	// Read alarm time from EEPROM
	alarmtime1.hour = (uint8_t)eeprom_read_byte(&alarm_hour1);
     398:	87 e0       	ldi	r24, 0x07	; 7
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3a0:	80 93 b3 01 	sts	0x01B3, r24
	alarmtime1.minute = (uint8_t)eeprom_read_byte(&alarm_minute1);
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3ac:	80 93 b4 01 	sts	0x01B4, r24
	alarmtime1.AM_PM = (uint8_t)eeprom_read_byte(&alarm_AM_PM1);
     3b0:	85 e0       	ldi	r24, 0x05	; 5
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3b8:	80 93 b5 01 	sts	0x01B5, r24
	alarmtime1.on_off = (uint8_t)eeprom_read_byte(&alarm_onoff1);
     3bc:	84 e0       	ldi	r24, 0x04	; 4
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3c4:	80 93 b6 01 	sts	0x01B6, r24
	alarmtime2.hour = (uint8_t)eeprom_read_byte(&alarm_hour2);
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3d0:	80 93 cf 01 	sts	0x01CF, r24
	alarmtime2.minute = (uint8_t)eeprom_read_byte(&alarm_minute2);
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3dc:	80 93 d0 01 	sts	0x01D0, r24
	alarmtime2.AM_PM = (uint8_t)eeprom_read_byte(&alarm_AM_PM2);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3e8:	80 93 d1 01 	sts	0x01D1, r24
	alarmtime2.on_off = (uint8_t)eeprom_read_byte(&alarm_onoff2);
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 ed 0c 	call	0x19da	; 0x19da <__eerd_byte_m328p>
     3f4:	80 93 d2 01 	sts	0x01D2, r24
     3f8:	08 95       	ret

000003fa <eeprom_SetAlarm>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void eeprom_SetAlarm(void){
	//store alarm time
	eeprom_update_byte(&alarm_hour1, alarmtime1.hour);
     3fa:	60 91 b3 01 	lds	r22, 0x01B3
     3fe:	87 e0       	ldi	r24, 0x07	; 7
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_minute1, alarmtime1.minute);
     406:	60 91 b4 01 	lds	r22, 0x01B4
     40a:	86 e0       	ldi	r24, 0x06	; 6
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_AM_PM1, alarmtime1.AM_PM);
     412:	60 91 b5 01 	lds	r22, 0x01B5
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_hour2, alarmtime2.hour);
     41e:	60 91 cf 01 	lds	r22, 0x01CF
     422:	83 e0       	ldi	r24, 0x03	; 3
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_minute2, alarmtime2.minute);
     42a:	60 91 d0 01 	lds	r22, 0x01D0
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_AM_PM2, alarmtime2.AM_PM);
     436:	60 91 d1 01 	lds	r22, 0x01D1
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
     442:	08 95       	ret

00000444 <WDT_Init>:

void WDT_Init(void)
{
	
	//reset watchdog
	wdt_disable();
     444:	88 e1       	ldi	r24, 0x18	; 24
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	80 93 60 00 	sts	0x0060, r24
     44e:	10 92 60 00 	sts	0x0060, r1
     452:	0f be       	out	0x3f, r0	; 63
	//set up WDT interrupt
	WDTCSR = (1<<WDCE)|(1<<WDE);
     454:	e0 e6       	ldi	r30, 0x60	; 96
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 83       	st	Z, r24
	//Start watchdog timer with 4s prescaller
	WDTCSR = (1<<WDIE)|(1<<WDP3);
     45a:	80 e6       	ldi	r24, 0x60	; 96
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret

00000460 <main>:
--------------------------------------------------------------------------------------------------*/

int main(void)
{
	//initialize peripherals, timers and buttons/switches
	cli();
     460:	f8 94       	cli
	Timer0_Init();
     462:	0e 94 76 0c 	call	0x18ec	; 0x18ec <Timer0_Init>
	Timer1_Init();
     466:	0e 94 8a 0c 	call	0x1914	; 0x1914 <Timer1_Init>
	Timer2_Init();
     46a:	0e 94 81 0c 	call	0x1902	; 0x1902 <Timer2_Init>
	WDT_Init();
     46e:	0e 94 22 02 	call	0x444	; 0x444 <WDT_Init>
	I2C_Init();
     472:	0e 94 57 07 	call	0xeae	; 0xeae <I2C_Init>
	BUTTON_init();
     476:	0e 94 c5 01 	call	0x38a	; 0x38a <BUTTON_init>
	LCD_SPI_initialize();
     47a:	0e 94 a4 07 	call	0xf48	; 0xf48 <LCD_SPI_initialize>
	LCD_initialize();
     47e:	0e 94 dd 07 	call	0xfba	; 0xfba <LCD_initialize>
	sei();
     482:	78 94       	sei
	RTC_Set(currenttime);
	*/
	
	
	// Read alarm time from EEPROM
	eeprom_GetAlarm();
     484:	0e 94 cc 01 	call	0x398	; 0x398 <eeprom_GetAlarm>
	//Clear out random stuff when re-programming
	alarmtime1.on_off &= 0x01;
     488:	e6 eb       	ldi	r30, 0xB6	; 182
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	80 81       	ld	r24, Z
     48e:	81 70       	andi	r24, 0x01	; 1
     490:	80 83       	st	Z, r24
	alarmtime2.on_off &= 0x01;
     492:	e2 ed       	ldi	r30, 0xD2	; 210
     494:	f1 e0       	ldi	r31, 0x01	; 1
     496:	20 81       	ld	r18, Z
     498:	21 70       	andi	r18, 0x01	; 1
     49a:	20 83       	st	Z, r18
	alarmtime1.alarm_number = 1;
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	90 93 b7 01 	sts	0x01B7, r25
	alarmtime2.alarm_number = 2;
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	90 93 d3 01 	sts	0x01D3, r25
	//alarmtime1.music_bell;
	
	//Set alarm string to proper value, should be replaced by cute symbol
	if(alarmtime1.on_off){
     4a8:	88 23       	and	r24, r24
     4aa:	69 f0       	breq	.+26     	; 0x4c6 <main+0x66>
		strcpy(string_alarm_onoff1,on);
     4ac:	8f e4       	ldi	r24, 0x4F	; 79
     4ae:	9e e4       	ldi	r25, 0x4E	; 78
     4b0:	a0 e2       	ldi	r26, 0x20	; 32
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	80 93 c5 01 	sts	0x01C5, r24
     4b8:	90 93 c6 01 	sts	0x01C6, r25
     4bc:	a0 93 c7 01 	sts	0x01C7, r26
     4c0:	b0 93 c8 01 	sts	0x01C8, r27
     4c4:	0c c0       	rjmp	.+24     	; 0x4de <main+0x7e>
	}
	else
	{
		strcpy(string_alarm_onoff1,off);
     4c6:	8f e4       	ldi	r24, 0x4F	; 79
     4c8:	96 e4       	ldi	r25, 0x46	; 70
     4ca:	a6 e4       	ldi	r26, 0x46	; 70
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	80 93 c5 01 	sts	0x01C5, r24
     4d2:	90 93 c6 01 	sts	0x01C6, r25
     4d6:	a0 93 c7 01 	sts	0x01C7, r26
     4da:	b0 93 c8 01 	sts	0x01C8, r27
	}
	if(alarmtime2.on_off){
     4de:	22 23       	and	r18, r18
     4e0:	69 f0       	breq	.+26     	; 0x4fc <main+0x9c>
		strcpy(string_alarm_onoff2,on);
     4e2:	8f e4       	ldi	r24, 0x4F	; 79
     4e4:	9e e4       	ldi	r25, 0x4E	; 78
     4e6:	a0 e2       	ldi	r26, 0x20	; 32
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	80 93 bb 01 	sts	0x01BB, r24
     4ee:	90 93 bc 01 	sts	0x01BC, r25
     4f2:	a0 93 bd 01 	sts	0x01BD, r26
     4f6:	b0 93 be 01 	sts	0x01BE, r27
     4fa:	0c c0       	rjmp	.+24     	; 0x514 <main+0xb4>
	}
	else
	{
		strcpy(string_alarm_onoff2,off);
     4fc:	8f e4       	ldi	r24, 0x4F	; 79
     4fe:	96 e4       	ldi	r25, 0x46	; 70
     500:	a6 e4       	ldi	r26, 0x46	; 70
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	80 93 bb 01 	sts	0x01BB, r24
     508:	90 93 bc 01 	sts	0x01BC, r25
     50c:	a0 93 bd 01 	sts	0x01BD, r26
     510:	b0 93 be 01 	sts	0x01BE, r27
		Timer1PWM_OnOff(PWM_OFF);
		CLEAR_BUTTONS;
		//WDT_RESET;
	}
	
	if((alarmtime2.hour == times.hour) && (alarmtime2.minute == times.minute) && (alarmtime2.AM_PM == times.AM_PM)
     514:	cf ec       	ldi	r28, 0xCF	; 207
     516:	d1 e0       	ldi	r29, 0x01	; 1
     518:	0f 2e       	mov	r0, r31
     51a:	f0 ed       	ldi	r31, 0xD0	; 208
     51c:	6f 2e       	mov	r6, r31
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	7f 2e       	mov	r7, r31
     522:	f0 2d       	mov	r31, r0
     524:	0f 2e       	mov	r0, r31
     526:	f1 ed       	ldi	r31, 0xD1	; 209
     528:	4f 2e       	mov	r4, r31
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	5f 2e       	mov	r5, r31
     52e:	f0 2d       	mov	r31, r0
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void check_alarms(void){
	//check if alarm 1 has gone off
	if((alarmtime1.hour == times.hour) && (alarmtime1.minute == times.minute) && (alarmtime1.AM_PM == times.AM_PM)
     530:	0f 2e       	mov	r0, r31
     532:	f5 eb       	ldi	r31, 0xB5	; 181
     534:	2f 2e       	mov	r2, r31
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	3f 2e       	mov	r3, r31
     53a:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		//Main switch for turning on radio, toggling presets, entering
		// the menu, and toggling alarms on and off
		switch (g_button_pressed){
     53c:	80 91 a2 01 	lds	r24, 0x01A2
     540:	83 30       	cpi	r24, 0x03	; 3
     542:	09 f4       	brne	.+2      	; 0x546 <main+0xe6>
     544:	c6 c2       	rjmp	.+1420   	; 0xad2 <__stack+0x1d3>
     546:	28 f4       	brcc	.+10     	; 0x552 <main+0xf2>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	61 f0       	breq	.+24     	; 0x564 <main+0x104>
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	69 f0       	breq	.+26     	; 0x56a <main+0x10a>
     550:	1c c3       	rjmp	.+1592   	; 0xb8a <__stack+0x28b>
     552:	85 30       	cpi	r24, 0x05	; 5
     554:	09 f4       	brne	.+2      	; 0x558 <main+0xf8>
     556:	eb c2       	rjmp	.+1494   	; 0xb2e <__stack+0x22f>
     558:	08 f4       	brcc	.+2      	; 0x55c <main+0xfc>
     55a:	e6 c2       	rjmp	.+1484   	; 0xb28 <__stack+0x229>
     55c:	86 30       	cpi	r24, 0x06	; 6
     55e:	09 f4       	brne	.+2      	; 0x562 <main+0x102>
     560:	e9 c2       	rjmp	.+1490   	; 0xb34 <__stack+0x235>
     562:	13 c3       	rjmp	.+1574   	; 0xb8a <__stack+0x28b>
			//button one pressed
			case (B1):
				CLEAR_BUTTONS;
     564:	10 92 a2 01 	sts	0x01A2, r1
				//toggle presets
				break;
     568:	e9 cf       	rjmp	.-46     	; 0x53c <main+0xdc>
			//button 2 pressed, enter menu
			case (B2):
				CLEAR_BUTTONS;
     56a:	10 92 a2 01 	sts	0x01A2, r1
				//Set menu loop variable
				menufresh = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 9f 01 	sts	0x019F, r24
				//Set the select to first element in the menu
				menu_current = 0;
     574:	10 92 9e 01 	sts	0x019E, r1
     578:	10 92 9d 01 	sts	0x019D, r1
				LCD_clear_screen();
     57c:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
				{
					//print menu with current selection inverted
					LCD_print_menu(menu_current);
     580:	0f 2e       	mov	r0, r31
     582:	fd e9       	ldi	r31, 0x9D	; 157
     584:	ef 2e       	mov	r14, r31
     586:	f1 e0       	ldi	r31, 0x01	; 1
     588:	ff 2e       	mov	r15, r31
     58a:	f0 2d       	mov	r31, r0
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     58c:	0f 2e       	mov	r0, r31
     58e:	f4 eb       	ldi	r31, 0xB4	; 180
     590:	af 2e       	mov	r10, r31
     592:	f1 e0       	ldi	r31, 0x01	; 1
     594:	bf 2e       	mov	r11, r31
     596:	f0 2d       	mov	r31, r0
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     598:	0f 2e       	mov	r0, r31
     59a:	f3 eb       	ldi	r31, 0xB3	; 179
     59c:	cf 2e       	mov	r12, r31
     59e:	f1 e0       	ldi	r31, 0x01	; 1
     5a0:	df 2e       	mov	r13, r31
     5a2:	f0 2d       	mov	r31, r0
				//Set the select to first element in the menu
				menu_current = 0;
				LCD_clear_screen();
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
     5a4:	8b c2       	rjmp	.+1302   	; 0xabc <__stack+0x1bd>
				{
					//print menu with current selection inverted
					LCD_print_menu(menu_current);
     5a6:	d7 01       	movw	r26, r14
     5a8:	8c 91       	ld	r24, X
     5aa:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <LCD_print_menu>
					switch(g_button_pressed){
     5ae:	80 91 a2 01 	lds	r24, 0x01A2
     5b2:	82 30       	cpi	r24, 0x02	; 2
     5b4:	91 f0       	breq	.+36     	; 0x5da <main+0x17a>
     5b6:	83 30       	cpi	r24, 0x03	; 3
     5b8:	09 f4       	brne	.+2      	; 0x5bc <main+0x15c>
     5ba:	61 c2       	rjmp	.+1218   	; 0xa7e <__stack+0x17f>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	09 f0       	breq	.+2      	; 0x5c2 <main+0x162>
     5c0:	69 c2       	rjmp	.+1234   	; 0xa94 <__stack+0x195>
						//move one selection up in menu
						case (B1):
							CLEAR_BUTTONS;
     5c2:	10 92 a2 01 	sts	0x01A2, r1
							menu_current = menu_current-1;
     5c6:	80 91 9d 01 	lds	r24, 0x019D
     5ca:	90 91 9e 01 	lds	r25, 0x019E
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	90 93 9e 01 	sts	0x019E, r25
     5d4:	80 93 9d 01 	sts	0x019D, r24
							break;
     5d8:	5d c2       	rjmp	.+1210   	; 0xa94 <__stack+0x195>
						//enter state for current menu selection
						case (B2):
							CLEAR_BUTTONS;
     5da:	10 92 a2 01 	sts	0x01A2, r1
							switch(menu_current)
     5de:	80 91 9d 01 	lds	r24, 0x019D
     5e2:	90 91 9e 01 	lds	r25, 0x019E
     5e6:	84 30       	cpi	r24, 0x04	; 4
     5e8:	91 05       	cpc	r25, r1
     5ea:	09 f4       	brne	.+2      	; 0x5ee <main+0x18e>
     5ec:	26 c1       	rjmp	.+588    	; 0x83a <main+0x3da>
     5ee:	85 30       	cpi	r24, 0x05	; 5
     5f0:	91 05       	cpc	r25, r1
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <main+0x196>
     5f4:	3f c2       	rjmp	.+1150   	; 0xa74 <__stack+0x175>
     5f6:	03 97       	sbiw	r24, 0x03	; 3
     5f8:	09 f0       	breq	.+2      	; 0x5fc <main+0x19c>
     5fa:	4c c2       	rjmp	.+1176   	; 0xa94 <__stack+0x195>
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
     5fc:	01 e0       	ldi	r16, 0x01	; 1
     5fe:	20 91 b3 01 	lds	r18, 0x01B3
     602:	30 91 b4 01 	lds	r19, 0x01B4
     606:	40 91 b5 01 	lds	r20, 0x01B5
     60a:	50 91 b6 01 	lds	r21, 0x01B6
     60e:	60 91 b7 01 	lds	r22, 0x01B7
     612:	70 91 b8 01 	lds	r23, 0x01B8
     616:	80 91 b9 01 	lds	r24, 0x01B9
     61a:	90 91 ba 01 	lds	r25, 0x01BA
     61e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
	CLEAR_BUTTONS;
     622:	10 92 a2 01 	sts	0x01A2, r1
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     626:	80 91 9c 01 	lds	r24, 0x019C
     62a:	8f 30       	cpi	r24, 0x0F	; 15
     62c:	08 f0       	brcs	.+2      	; 0x630 <main+0x1d0>
     62e:	4e c0       	rjmp	.+156    	; 0x6cc <main+0x26c>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
				alarmtime->hour = 13;
     630:	1d e0       	ldi	r17, 0x0D	; 13
     632:	3f c0       	rjmp	.+126    	; 0x6b2 <main+0x252>
inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	19 f0       	breq	.+6      	; 0x63e <main+0x1de>
     638:	83 30       	cpi	r24, 0x03	; 3
     63a:	f1 f0       	breq	.+60     	; 0x678 <main+0x218>
     63c:	3a c0       	rjmp	.+116    	; 0x6b2 <main+0x252>
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     63e:	f6 01       	movw	r30, r12
     640:	80 81       	ld	r24, Z
     642:	81 11       	cpse	r24, r1
     644:	02 c0       	rjmp	.+4      	; 0x64a <main+0x1ea>
				alarmtime->hour = 13;
     646:	10 83       	st	Z, r17
     648:	34 c0       	rjmp	.+104    	; 0x6b2 <main+0x252>
				break;
			}
			alarmtime->hour = alarmtime->hour - 1;
     64a:	81 50       	subi	r24, 0x01	; 1
     64c:	28 2f       	mov	r18, r24
     64e:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,HOURS);
     650:	01 e0       	ldi	r16, 0x01	; 1
     652:	30 91 b4 01 	lds	r19, 0x01B4
     656:	40 91 b5 01 	lds	r20, 0x01B5
     65a:	50 91 b6 01 	lds	r21, 0x01B6
     65e:	60 91 b7 01 	lds	r22, 0x01B7
     662:	70 91 b8 01 	lds	r23, 0x01B8
     666:	80 91 b9 01 	lds	r24, 0x01B9
     66a:	90 91 ba 01 	lds	r25, 0x01BA
     66e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     672:	10 92 a2 01 	sts	0x01A2, r1
     676:	1d c0       	rjmp	.+58     	; 0x6b2 <main+0x252>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     678:	f6 01       	movw	r30, r12
     67a:	80 81       	ld	r24, Z
     67c:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->hour >= 13){
     67e:	8d 30       	cpi	r24, 0x0D	; 13
     680:	10 f4       	brcc	.+4      	; 0x686 <main+0x226>
			LCD_print_alarm_display(*alarmtime,HOURS);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     682:	80 83       	st	Z, r24
     684:	01 c0       	rjmp	.+2      	; 0x688 <main+0x228>
			if(alarmtime->hour >= 13){
				alarmtime->hour = 0;
     686:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,HOURS);
     688:	01 e0       	ldi	r16, 0x01	; 1
     68a:	20 91 b3 01 	lds	r18, 0x01B3
     68e:	30 91 b4 01 	lds	r19, 0x01B4
     692:	40 91 b5 01 	lds	r20, 0x01B5
     696:	50 91 b6 01 	lds	r21, 0x01B6
     69a:	60 91 b7 01 	lds	r22, 0x01B7
     69e:	70 91 b8 01 	lds	r23, 0x01B8
     6a2:	80 91 b9 01 	lds	r24, 0x01B9
     6a6:	90 91 ba 01 	lds	r25, 0x01BA
     6aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     6ae:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     6b2:	85 e0       	ldi	r24, 0x05	; 5
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     6ba:	80 91 a2 01 	lds	r24, 0x01A2
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	29 f0       	breq	.+10     	; 0x6cc <main+0x26c>
     6c2:	90 91 9c 01 	lds	r25, 0x019C
     6c6:	9f 30       	cpi	r25, 0x0F	; 15
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <main+0x26c>
     6ca:	b4 cf       	rjmp	.-152    	; 0x634 <main+0x1d4>
			CLEAR_BUTTONS;
			break;
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
     6cc:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,MINUTES);
     6d0:	00 e0       	ldi	r16, 0x00	; 0
     6d2:	20 91 b3 01 	lds	r18, 0x01B3
     6d6:	30 91 b4 01 	lds	r19, 0x01B4
     6da:	40 91 b5 01 	lds	r20, 0x01B5
     6de:	50 91 b6 01 	lds	r21, 0x01B6
     6e2:	60 91 b7 01 	lds	r22, 0x01B7
     6e6:	70 91 b8 01 	lds	r23, 0x01B8
     6ea:	80 91 b9 01 	lds	r24, 0x01B9
     6ee:	90 91 ba 01 	lds	r25, 0x01BA
     6f2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     6f6:	80 91 a2 01 	lds	r24, 0x01A2
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	09 f4       	brne	.+2      	; 0x700 <main+0x2a0>
     6fe:	52 c0       	rjmp	.+164    	; 0x7a4 <main+0x344>
     700:	90 91 9c 01 	lds	r25, 0x019C
     704:	9f 30       	cpi	r25, 0x0F	; 15
     706:	08 f0       	brcs	.+2      	; 0x70a <main+0x2aa>
     708:	4d c0       	rjmp	.+154    	; 0x7a4 <main+0x344>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
				alarmtime->minute = 60;
     70a:	1c e3       	ldi	r17, 0x3C	; 60
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	19 f0       	breq	.+6      	; 0x716 <main+0x2b6>
     710:	83 30       	cpi	r24, 0x03	; 3
     712:	f1 f0       	breq	.+60     	; 0x750 <main+0x2f0>
     714:	3a c0       	rjmp	.+116    	; 0x78a <main+0x32a>
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     716:	f5 01       	movw	r30, r10
     718:	80 81       	ld	r24, Z
     71a:	81 11       	cpse	r24, r1
     71c:	02 c0       	rjmp	.+4      	; 0x722 <main+0x2c2>
				alarmtime->minute = 60;
     71e:	10 83       	st	Z, r17
     720:	34 c0       	rjmp	.+104    	; 0x78a <main+0x32a>
				break;
			}
			alarmtime->minute = alarmtime->minute - 1;
     722:	81 50       	subi	r24, 0x01	; 1
     724:	38 2f       	mov	r19, r24
     726:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,MINUTES);
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	20 91 b3 01 	lds	r18, 0x01B3
     72e:	40 91 b5 01 	lds	r20, 0x01B5
     732:	50 91 b6 01 	lds	r21, 0x01B6
     736:	60 91 b7 01 	lds	r22, 0x01B7
     73a:	70 91 b8 01 	lds	r23, 0x01B8
     73e:	80 91 b9 01 	lds	r24, 0x01B9
     742:	90 91 ba 01 	lds	r25, 0x01BA
     746:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     74a:	10 92 a2 01 	sts	0x01A2, r1
     74e:	1d c0       	rjmp	.+58     	; 0x78a <main+0x32a>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     750:	f5 01       	movw	r30, r10
     752:	80 81       	ld	r24, Z
     754:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->minute >= 60){
     756:	8c 33       	cpi	r24, 0x3C	; 60
     758:	10 f4       	brcc	.+4      	; 0x75e <main+0x2fe>
			LCD_print_alarm_display(*alarmtime,MINUTES);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     75a:	80 83       	st	Z, r24
     75c:	01 c0       	rjmp	.+2      	; 0x760 <main+0x300>
			if(alarmtime->minute >= 60){
				alarmtime->minute = 0;
     75e:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,MINUTES);
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	20 91 b3 01 	lds	r18, 0x01B3
     766:	30 91 b4 01 	lds	r19, 0x01B4
     76a:	40 91 b5 01 	lds	r20, 0x01B5
     76e:	50 91 b6 01 	lds	r21, 0x01B6
     772:	60 91 b7 01 	lds	r22, 0x01B7
     776:	70 91 b8 01 	lds	r23, 0x01B8
     77a:	80 91 b9 01 	lds	r24, 0x01B9
     77e:	90 91 ba 01 	lds	r25, 0x01BA
     782:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     786:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     78a:	85 e0       	ldi	r24, 0x05	; 5
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     792:	80 91 a2 01 	lds	r24, 0x01A2
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	29 f0       	breq	.+10     	; 0x7a4 <main+0x344>
     79a:	90 91 9c 01 	lds	r25, 0x019C
     79e:	9f 30       	cpi	r25, 0x0F	; 15
     7a0:	08 f4       	brcc	.+2      	; 0x7a4 <main+0x344>
     7a2:	b4 cf       	rjmp	.-152    	; 0x70c <main+0x2ac>
			break;
		}
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
     7a4:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,AMPM);
     7a8:	02 e0       	ldi	r16, 0x02	; 2
     7aa:	20 91 b3 01 	lds	r18, 0x01B3
     7ae:	30 91 b4 01 	lds	r19, 0x01B4
     7b2:	40 91 b5 01 	lds	r20, 0x01B5
     7b6:	50 91 b6 01 	lds	r21, 0x01B6
     7ba:	60 91 b7 01 	lds	r22, 0x01B7
     7be:	70 91 b8 01 	lds	r23, 0x01B8
     7c2:	80 91 b9 01 	lds	r24, 0x01B9
     7c6:	90 91 ba 01 	lds	r25, 0x01BA
     7ca:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
     7ce:	26 c0       	rjmp	.+76     	; 0x81c <main+0x3bc>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		hw_delay(5);
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
     7d8:	80 91 a2 01 	lds	r24, 0x01A2
     7dc:	8d 7f       	andi	r24, 0xFD	; 253
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	e9 f4       	brne	.+58     	; 0x81c <main+0x3bc>
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     7e2:	f1 01       	movw	r30, r2
     7e4:	80 81       	ld	r24, Z
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->AM_PM >= 2){
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	10 f4       	brcc	.+4      	; 0x7f0 <main+0x390>
	{
		hw_delay(5);
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     7ec:	80 83       	st	Z, r24
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <main+0x392>
			if(alarmtime->AM_PM >= 2){
				alarmtime->AM_PM = 0;
     7f0:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,AMPM);
     7f2:	02 e0       	ldi	r16, 0x02	; 2
     7f4:	20 91 b3 01 	lds	r18, 0x01B3
     7f8:	30 91 b4 01 	lds	r19, 0x01B4
     7fc:	40 91 b5 01 	lds	r20, 0x01B5
     800:	50 91 b6 01 	lds	r21, 0x01B6
     804:	60 91 b7 01 	lds	r22, 0x01B7
     808:	70 91 b8 01 	lds	r23, 0x01B8
     80c:	80 91 b9 01 	lds	r24, 0x01B9
     810:	90 91 ba 01 	lds	r25, 0x01BA
     814:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     818:	10 92 a2 01 	sts	0x01A2, r1
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,AMPM);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     81c:	80 91 a2 01 	lds	r24, 0x01A2
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	21 f0       	breq	.+8      	; 0x82c <main+0x3cc>
     824:	80 91 9c 01 	lds	r24, 0x019C
     828:	8f 30       	cpi	r24, 0x0F	; 15
     82a:	90 f2       	brcs	.-92     	; 0x7d0 <main+0x370>
			CLEAR_BUTTONS;
		}
		// Update alarm set time in EEPROM
	}
	//store new alarm time in EEPROM
	eeprom_SetAlarm();
     82c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_SetAlarm>
	CLEAR_BUTTONS;
     830:	10 92 a2 01 	sts	0x01A2, r1
	LCD_clear_screen();
     834:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
     838:	2d c1       	rjmp	.+602    	; 0xa94 <__stack+0x195>
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
     83a:	01 e0       	ldi	r16, 0x01	; 1
     83c:	20 91 cf 01 	lds	r18, 0x01CF
     840:	30 91 d0 01 	lds	r19, 0x01D0
     844:	40 91 d1 01 	lds	r20, 0x01D1
     848:	50 91 d2 01 	lds	r21, 0x01D2
     84c:	60 91 d3 01 	lds	r22, 0x01D3
     850:	70 91 d4 01 	lds	r23, 0x01D4
     854:	80 91 d5 01 	lds	r24, 0x01D5
     858:	90 91 d6 01 	lds	r25, 0x01D6
     85c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
	CLEAR_BUTTONS;
     860:	10 92 a2 01 	sts	0x01A2, r1
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     864:	80 91 9c 01 	lds	r24, 0x019C
     868:	8f 30       	cpi	r24, 0x0F	; 15
     86a:	08 f0       	brcs	.+2      	; 0x86e <main+0x40e>
     86c:	4c c0       	rjmp	.+152    	; 0x906 <__stack+0x7>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
				alarmtime->hour = 13;
     86e:	1d e0       	ldi	r17, 0x0D	; 13
     870:	3d c0       	rjmp	.+122    	; 0x8ec <main+0x48c>
inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     872:	81 30       	cpi	r24, 0x01	; 1
     874:	19 f0       	breq	.+6      	; 0x87c <main+0x41c>
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	e9 f0       	breq	.+58     	; 0x8b4 <main+0x454>
     87a:	38 c0       	rjmp	.+112    	; 0x8ec <main+0x48c>
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     87c:	88 81       	ld	r24, Y
     87e:	81 11       	cpse	r24, r1
     880:	02 c0       	rjmp	.+4      	; 0x886 <main+0x426>
				alarmtime->hour = 13;
     882:	18 83       	st	Y, r17
     884:	33 c0       	rjmp	.+102    	; 0x8ec <main+0x48c>
				break;
			}
			alarmtime->hour = alarmtime->hour - 1;
     886:	81 50       	subi	r24, 0x01	; 1
     888:	28 2f       	mov	r18, r24
     88a:	88 83       	st	Y, r24
			LCD_print_alarm_display(*alarmtime,HOURS);
     88c:	01 e0       	ldi	r16, 0x01	; 1
     88e:	30 91 d0 01 	lds	r19, 0x01D0
     892:	40 91 d1 01 	lds	r20, 0x01D1
     896:	50 91 d2 01 	lds	r21, 0x01D2
     89a:	60 91 d3 01 	lds	r22, 0x01D3
     89e:	70 91 d4 01 	lds	r23, 0x01D4
     8a2:	80 91 d5 01 	lds	r24, 0x01D5
     8a6:	90 91 d6 01 	lds	r25, 0x01D6
     8aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     8ae:	10 92 a2 01 	sts	0x01A2, r1
     8b2:	1c c0       	rjmp	.+56     	; 0x8ec <main+0x48c>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     8b4:	88 81       	ld	r24, Y
     8b6:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->hour >= 13){
     8b8:	8d 30       	cpi	r24, 0x0D	; 13
     8ba:	10 f4       	brcc	.+4      	; 0x8c0 <main+0x460>
			LCD_print_alarm_display(*alarmtime,HOURS);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     8bc:	88 83       	st	Y, r24
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <main+0x462>
			if(alarmtime->hour >= 13){
				alarmtime->hour = 0;
     8c0:	18 82       	st	Y, r1
			}
			LCD_print_alarm_display(*alarmtime,HOURS);
     8c2:	01 e0       	ldi	r16, 0x01	; 1
     8c4:	20 91 cf 01 	lds	r18, 0x01CF
     8c8:	30 91 d0 01 	lds	r19, 0x01D0
     8cc:	40 91 d1 01 	lds	r20, 0x01D1
     8d0:	50 91 d2 01 	lds	r21, 0x01D2
     8d4:	60 91 d3 01 	lds	r22, 0x01D3
     8d8:	70 91 d4 01 	lds	r23, 0x01D4
     8dc:	80 91 d5 01 	lds	r24, 0x01D5
     8e0:	90 91 d6 01 	lds	r25, 0x01D6
     8e4:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     8e8:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     8ec:	85 e0       	ldi	r24, 0x05	; 5
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     8f4:	80 91 a2 01 	lds	r24, 0x01A2
     8f8:	82 30       	cpi	r24, 0x02	; 2
     8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0x7>
     8fc:	90 91 9c 01 	lds	r25, 0x019C
     900:	9f 30       	cpi	r25, 0x0F	; 15
     902:	08 f4       	brcc	.+2      	; 0x906 <__stack+0x7>
     904:	b6 cf       	rjmp	.-148    	; 0x872 <main+0x412>
			CLEAR_BUTTONS;
			break;
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
     906:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,MINUTES);
     90a:	00 e0       	ldi	r16, 0x00	; 0
     90c:	20 91 cf 01 	lds	r18, 0x01CF
     910:	30 91 d0 01 	lds	r19, 0x01D0
     914:	40 91 d1 01 	lds	r20, 0x01D1
     918:	50 91 d2 01 	lds	r21, 0x01D2
     91c:	60 91 d3 01 	lds	r22, 0x01D3
     920:	70 91 d4 01 	lds	r23, 0x01D4
     924:	80 91 d5 01 	lds	r24, 0x01D5
     928:	90 91 d6 01 	lds	r25, 0x01D6
     92c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     930:	80 91 a2 01 	lds	r24, 0x01A2
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	09 f4       	brne	.+2      	; 0x93a <__stack+0x3b>
     938:	52 c0       	rjmp	.+164    	; 0x9de <__stack+0xdf>
     93a:	90 91 9c 01 	lds	r25, 0x019C
     93e:	9f 30       	cpi	r25, 0x0F	; 15
     940:	08 f0       	brcs	.+2      	; 0x944 <__stack+0x45>
     942:	4d c0       	rjmp	.+154    	; 0x9de <__stack+0xdf>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
				alarmtime->minute = 60;
     944:	1c e3       	ldi	r17, 0x3C	; 60
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	19 f0       	breq	.+6      	; 0x950 <__stack+0x51>
     94a:	83 30       	cpi	r24, 0x03	; 3
     94c:	f1 f0       	breq	.+60     	; 0x98a <__stack+0x8b>
     94e:	3a c0       	rjmp	.+116    	; 0x9c4 <__stack+0xc5>
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     950:	f3 01       	movw	r30, r6
     952:	80 81       	ld	r24, Z
     954:	81 11       	cpse	r24, r1
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
				alarmtime->minute = 60;
     958:	10 83       	st	Z, r17
     95a:	34 c0       	rjmp	.+104    	; 0x9c4 <__stack+0xc5>
				break;
			}
			alarmtime->minute = alarmtime->minute - 1;
     95c:	81 50       	subi	r24, 0x01	; 1
     95e:	38 2f       	mov	r19, r24
     960:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,MINUTES);
     962:	00 e0       	ldi	r16, 0x00	; 0
     964:	20 91 cf 01 	lds	r18, 0x01CF
     968:	40 91 d1 01 	lds	r20, 0x01D1
     96c:	50 91 d2 01 	lds	r21, 0x01D2
     970:	60 91 d3 01 	lds	r22, 0x01D3
     974:	70 91 d4 01 	lds	r23, 0x01D4
     978:	80 91 d5 01 	lds	r24, 0x01D5
     97c:	90 91 d6 01 	lds	r25, 0x01D6
     980:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     984:	10 92 a2 01 	sts	0x01A2, r1
     988:	1d c0       	rjmp	.+58     	; 0x9c4 <__stack+0xc5>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     98a:	f3 01       	movw	r30, r6
     98c:	80 81       	ld	r24, Z
     98e:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->minute >= 60){
     990:	8c 33       	cpi	r24, 0x3C	; 60
     992:	10 f4       	brcc	.+4      	; 0x998 <__stack+0x99>
			LCD_print_alarm_display(*alarmtime,MINUTES);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     994:	80 83       	st	Z, r24
     996:	01 c0       	rjmp	.+2      	; 0x99a <__stack+0x9b>
			if(alarmtime->minute >= 60){
				alarmtime->minute = 0;
     998:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,MINUTES);
     99a:	00 e0       	ldi	r16, 0x00	; 0
     99c:	20 91 cf 01 	lds	r18, 0x01CF
     9a0:	30 91 d0 01 	lds	r19, 0x01D0
     9a4:	40 91 d1 01 	lds	r20, 0x01D1
     9a8:	50 91 d2 01 	lds	r21, 0x01D2
     9ac:	60 91 d3 01 	lds	r22, 0x01D3
     9b0:	70 91 d4 01 	lds	r23, 0x01D4
     9b4:	80 91 d5 01 	lds	r24, 0x01D5
     9b8:	90 91 d6 01 	lds	r25, 0x01D6
     9bc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     9c0:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     9cc:	80 91 a2 01 	lds	r24, 0x01A2
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	29 f0       	breq	.+10     	; 0x9de <__stack+0xdf>
     9d4:	90 91 9c 01 	lds	r25, 0x019C
     9d8:	9f 30       	cpi	r25, 0x0F	; 15
     9da:	08 f4       	brcc	.+2      	; 0x9de <__stack+0xdf>
     9dc:	b4 cf       	rjmp	.-152    	; 0x946 <__stack+0x47>
			break;
		}
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
     9de:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,AMPM);
     9e2:	02 e0       	ldi	r16, 0x02	; 2
     9e4:	20 91 cf 01 	lds	r18, 0x01CF
     9e8:	30 91 d0 01 	lds	r19, 0x01D0
     9ec:	40 91 d1 01 	lds	r20, 0x01D1
     9f0:	50 91 d2 01 	lds	r21, 0x01D2
     9f4:	60 91 d3 01 	lds	r22, 0x01D3
     9f8:	70 91 d4 01 	lds	r23, 0x01D4
     9fc:	80 91 d5 01 	lds	r24, 0x01D5
     a00:	90 91 d6 01 	lds	r25, 0x01D6
     a04:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
     a08:	26 c0       	rjmp	.+76     	; 0xa56 <__stack+0x157>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		hw_delay(5);
     a0a:	85 e0       	ldi	r24, 0x05	; 5
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
     a12:	80 91 a2 01 	lds	r24, 0x01A2
     a16:	8d 7f       	andi	r24, 0xFD	; 253
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	e9 f4       	brne	.+58     	; 0xa56 <__stack+0x157>
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     a1c:	f2 01       	movw	r30, r4
     a1e:	80 81       	ld	r24, Z
     a20:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->AM_PM >= 2){
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	10 f4       	brcc	.+4      	; 0xa2a <__stack+0x12b>
	{
		hw_delay(5);
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     a26:	80 83       	st	Z, r24
     a28:	01 c0       	rjmp	.+2      	; 0xa2c <__stack+0x12d>
			if(alarmtime->AM_PM >= 2){
				alarmtime->AM_PM = 0;
     a2a:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,AMPM);
     a2c:	02 e0       	ldi	r16, 0x02	; 2
     a2e:	20 91 cf 01 	lds	r18, 0x01CF
     a32:	30 91 d0 01 	lds	r19, 0x01D0
     a36:	40 91 d1 01 	lds	r20, 0x01D1
     a3a:	50 91 d2 01 	lds	r21, 0x01D2
     a3e:	60 91 d3 01 	lds	r22, 0x01D3
     a42:	70 91 d4 01 	lds	r23, 0x01D4
     a46:	80 91 d5 01 	lds	r24, 0x01D5
     a4a:	90 91 d6 01 	lds	r25, 0x01D6
     a4e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     a52:	10 92 a2 01 	sts	0x01A2, r1
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,AMPM);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     a56:	80 91 a2 01 	lds	r24, 0x01A2
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	21 f0       	breq	.+8      	; 0xa66 <__stack+0x167>
     a5e:	80 91 9c 01 	lds	r24, 0x019C
     a62:	8f 30       	cpi	r24, 0x0F	; 15
     a64:	90 f2       	brcs	.-92     	; 0xa0a <__stack+0x10b>
			CLEAR_BUTTONS;
		}
		// Update alarm set time in EEPROM
	}
	//store new alarm time in EEPROM
	eeprom_SetAlarm();
     a66:	0e 94 fd 01 	call	0x3fa	; 0x3fa <eeprom_SetAlarm>
	CLEAR_BUTTONS;
     a6a:	10 92 a2 01 	sts	0x01A2, r1
	LCD_clear_screen();
     a6e:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
     a72:	10 c0       	rjmp	.+32     	; 0xa94 <__stack+0x195>
									//set Alarm2
									set_alarm(&alarmtime2);
									break;
								case(5):
									//back
									menufresh = 0;
     a74:	10 92 9f 01 	sts	0x019F, r1
									LCD_clear_screen();
     a78:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
									break;
     a7c:	0b c0       	rjmp	.+22     	; 0xa94 <__stack+0x195>
							}
							break;
						//move one selection down in menu
						case (B3):
							CLEAR_BUTTONS;
     a7e:	10 92 a2 01 	sts	0x01A2, r1
							//WDT_RESET;
							menu_current++;
     a82:	80 91 9d 01 	lds	r24, 0x019D
     a86:	90 91 9e 01 	lds	r25, 0x019E
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	90 93 9e 01 	sts	0x019E, r25
     a90:	80 93 9d 01 	sts	0x019D, r24
							break;
					}
					//Handle going over the top or below the bottom selection
					if(menu_current == 6){
     a94:	80 91 9d 01 	lds	r24, 0x019D
     a98:	90 91 9e 01 	lds	r25, 0x019E
     a9c:	86 30       	cpi	r24, 0x06	; 6
     a9e:	91 05       	cpc	r25, r1
     aa0:	29 f4       	brne	.+10     	; 0xaac <__stack+0x1ad>
						menu_current = 0;
     aa2:	10 92 9e 01 	sts	0x019E, r1
     aa6:	10 92 9d 01 	sts	0x019D, r1
     aaa:	08 c0       	rjmp	.+16     	; 0xabc <__stack+0x1bd>
					}
					else if(menu_current == -1){
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	31 f4       	brne	.+12     	; 0xabc <__stack+0x1bd>
						menu_current = 5;
     ab0:	85 e0       	ldi	r24, 0x05	; 5
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	90 93 9e 01 	sts	0x019E, r25
     ab8:	80 93 9d 01 	sts	0x019D, r24
				//Set the select to first element in the menu
				menu_current = 0;
				LCD_clear_screen();
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
     abc:	80 91 9f 01 	lds	r24, 0x019F
     ac0:	88 23       	and	r24, r24
     ac2:	09 f4       	brne	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	3b cd       	rjmp	.-1418   	; 0x53c <main+0xdc>
     ac6:	80 91 9c 01 	lds	r24, 0x019C
     aca:	8f 30       	cpi	r24, 0x0F	; 15
     acc:	08 f4       	brcc	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	6b cd       	rjmp	.-1322   	; 0x5a6 <main+0x146>
     ad0:	35 cd       	rjmp	.-1430   	; 0x53c <main+0xdc>
					}
				}
				break;
			//toggle alarm 1 on or off
			case (B3):
				CLEAR_BUTTONS;
     ad2:	10 92 a2 01 	sts	0x01A2, r1
				//toggle alarm 1
				alarmtime1.on_off ^= 0x01;
     ad6:	06 eb       	ldi	r16, 0xB6	; 182
     ad8:	11 e0       	ldi	r17, 0x01	; 1
     ada:	f8 01       	movw	r30, r16
     adc:	60 81       	ld	r22, Z
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	68 27       	eor	r22, r24
     ae2:	60 83       	st	Z, r22
				eeprom_update_byte(&alarm_onoff1, alarmtime1.on_off);
     ae4:	84 e0       	ldi	r24, 0x04	; 4
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
				//update string to be displayed
				if(alarmtime1.on_off){
     aec:	d8 01       	movw	r26, r16
     aee:	8c 91       	ld	r24, X
     af0:	88 23       	and	r24, r24
     af2:	69 f0       	breq	.+26     	; 0xb0e <__stack+0x20f>
					strcpy(string_alarm_onoff1,on);
     af4:	8f e4       	ldi	r24, 0x4F	; 79
     af6:	9e e4       	ldi	r25, 0x4E	; 78
     af8:	a0 e2       	ldi	r26, 0x20	; 32
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	80 93 c5 01 	sts	0x01C5, r24
     b00:	90 93 c6 01 	sts	0x01C6, r25
     b04:	a0 93 c7 01 	sts	0x01C7, r26
     b08:	b0 93 c8 01 	sts	0x01C8, r27
     b0c:	17 cd       	rjmp	.-1490   	; 0x53c <main+0xdc>
				}
				else{
					strcpy(string_alarm_onoff1,off);
     b0e:	8f e4       	ldi	r24, 0x4F	; 79
     b10:	96 e4       	ldi	r25, 0x46	; 70
     b12:	a6 e4       	ldi	r26, 0x46	; 70
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	80 93 c5 01 	sts	0x01C5, r24
     b1a:	90 93 c6 01 	sts	0x01C6, r25
     b1e:	a0 93 c7 01 	sts	0x01C7, r26
     b22:	b0 93 c8 01 	sts	0x01C8, r27
     b26:	0a cd       	rjmp	.-1516   	; 0x53c <main+0xdc>
				}
				break;
			case(B1H):
				CLEAR_BUTTONS;
     b28:	10 92 a2 01 	sts	0x01A2, r1
				//radio on/off
				break;
     b2c:	07 cd       	rjmp	.-1522   	; 0x53c <main+0xdc>
			case(B2H):
				CLEAR_BUTTONS;
     b2e:	10 92 a2 01 	sts	0x01A2, r1
				break;
     b32:	04 cd       	rjmp	.-1528   	; 0x53c <main+0xdc>
			//toggle alarm 2 on or off
			case(B3H):
				CLEAR_BUTTONS;
     b34:	10 92 a2 01 	sts	0x01A2, r1
				//toggle alarm 2
				alarmtime2.on_off ^= 0x01;
     b38:	02 ed       	ldi	r16, 0xD2	; 210
     b3a:	11 e0       	ldi	r17, 0x01	; 1
     b3c:	d8 01       	movw	r26, r16
     b3e:	6c 91       	ld	r22, X
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	68 27       	eor	r22, r24
     b44:	6c 93       	st	X, r22
				eeprom_update_byte(&alarm_onoff2, alarmtime2.on_off);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__eeupd_byte_m328p>
				//update string to be displayed
				if(alarmtime2.on_off){
     b4e:	f8 01       	movw	r30, r16
     b50:	80 81       	ld	r24, Z
     b52:	88 23       	and	r24, r24
     b54:	69 f0       	breq	.+26     	; 0xb70 <__stack+0x271>
					strcpy(string_alarm_onoff2,on);
     b56:	8f e4       	ldi	r24, 0x4F	; 79
     b58:	9e e4       	ldi	r25, 0x4E	; 78
     b5a:	a0 e2       	ldi	r26, 0x20	; 32
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	80 93 bb 01 	sts	0x01BB, r24
     b62:	90 93 bc 01 	sts	0x01BC, r25
     b66:	a0 93 bd 01 	sts	0x01BD, r26
     b6a:	b0 93 be 01 	sts	0x01BE, r27
     b6e:	e6 cc       	rjmp	.-1588   	; 0x53c <main+0xdc>
				}
				else{
					strcpy(string_alarm_onoff2,off);
     b70:	8f e4       	ldi	r24, 0x4F	; 79
     b72:	96 e4       	ldi	r25, 0x46	; 70
     b74:	a6 e4       	ldi	r26, 0x46	; 70
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	80 93 bb 01 	sts	0x01BB, r24
     b7c:	90 93 bc 01 	sts	0x01BC, r25
     b80:	a0 93 bd 01 	sts	0x01BD, r26
     b84:	b0 93 be 01 	sts	0x01BE, r27
     b88:	d9 cc       	rjmp	.-1614   	; 0x53c <main+0xdc>
				}
				break;
			//default alarm display
			default:
				//If the counter is greater than timeout, reset it
				if(WDT_counter >= WDT_TIMEOUT)
     b8a:	80 91 9c 01 	lds	r24, 0x019C
     b8e:	8f 30       	cpi	r24, 0x0F	; 15
     b90:	20 f0       	brcs	.+8      	; 0xb9a <__stack+0x29b>
				{
					WDT_RESET;
     b92:	10 92 9c 01 	sts	0x019C, r1
					//Clear screen in case UI timed out
					LCD_clear_screen();
     b96:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
				}
				
				//Read current time and update main display
				RTC_Read(&times);
     b9a:	8b ea       	ldi	r24, 0xAB	; 171
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0e 94 36 0c 	call	0x186c	; 0x186c <RTC_Read>
				LCD_print_time_display(times, 21,"RADIO", "MENU", string_alarm_onoff1, string_alarm_onoff2);
     ba2:	0f 2e       	mov	r0, r31
     ba4:	fb eb       	ldi	r31, 0xBB	; 187
     ba6:	8f 2e       	mov	r8, r31
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	9f 2e       	mov	r9, r31
     bac:	f0 2d       	mov	r31, r0
     bae:	0f 2e       	mov	r0, r31
     bb0:	f5 ec       	ldi	r31, 0xC5	; 197
     bb2:	af 2e       	mov	r10, r31
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	bf 2e       	mov	r11, r31
     bb8:	f0 2d       	mov	r31, r0
     bba:	0f 2e       	mov	r0, r31
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	cf 2e       	mov	r12, r31
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	df 2e       	mov	r13, r31
     bc4:	f0 2d       	mov	r31, r0
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f5 e0       	ldi	r31, 0x05	; 5
     bca:	ef 2e       	mov	r14, r31
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	ff 2e       	mov	r15, r31
     bd0:	f0 2d       	mov	r31, r0
     bd2:	05 e1       	ldi	r16, 0x15	; 21
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	20 91 ab 01 	lds	r18, 0x01AB
     bda:	30 91 ac 01 	lds	r19, 0x01AC
     bde:	40 91 ad 01 	lds	r20, 0x01AD
     be2:	50 91 ae 01 	lds	r21, 0x01AE
     be6:	60 91 af 01 	lds	r22, 0x01AF
     bea:	70 91 b0 01 	lds	r23, 0x01B0
     bee:	80 91 b1 01 	lds	r24, 0x01B1
     bf2:	90 91 b2 01 	lds	r25, 0x01B2
     bf6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_print_time_display>
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void check_alarms(void){
	//check if alarm 1 has gone off
	if((alarmtime1.hour == times.hour) && (alarmtime1.minute == times.minute) && (alarmtime1.AM_PM == times.AM_PM)
     bfa:	90 91 b3 01 	lds	r25, 0x01B3
     bfe:	80 91 af 01 	lds	r24, 0x01AF
     c02:	98 13       	cpse	r25, r24
     c04:	46 c0       	rjmp	.+140    	; 0xc92 <__stack+0x393>
     c06:	80 91 b4 01 	lds	r24, 0x01B4
     c0a:	90 91 b0 01 	lds	r25, 0x01B0
     c0e:	89 13       	cpse	r24, r25
     c10:	40 c0       	rjmp	.+128    	; 0xc92 <__stack+0x393>
     c12:	d1 01       	movw	r26, r2
     c14:	2c 91       	ld	r18, X
     c16:	90 91 b2 01 	lds	r25, 0x01B2
     c1a:	29 13       	cpse	r18, r25
     c1c:	3a c0       	rjmp	.+116    	; 0xc92 <__stack+0x393>
	&& (alarmtime1.on_off) && (alarmfresh1 != times.minute))
     c1e:	90 91 b6 01 	lds	r25, 0x01B6
     c22:	99 23       	and	r25, r25
     c24:	b1 f1       	breq	.+108    	; 0xc92 <__stack+0x393>
     c26:	90 91 a1 01 	lds	r25, 0x01A1
     c2a:	89 17       	cp	r24, r25
     c2c:	91 f1       	breq	.+100    	; 0xc92 <__stack+0x393>
	{
		//update variable to make sure alarm doesn't repeatedly go off for a minute
		alarmfresh1 = times.minute;
     c2e:	80 93 a1 01 	sts	0x01A1, r24
		Timer1PWM_OnOff(PWM_ON);
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer1PWM_OnOff>
		LCD_clear_screen();
     c38:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
		LCD_goto(0,0);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
		LCD_print_string("ALARM 1!",0);
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	8b e0       	ldi	r24, 0x0B	; 11
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
		LCD_print_bottom_menu("OFF", " ", " ");
     c52:	41 e3       	ldi	r20, 0x31	; 49
     c54:	51 e0       	ldi	r21, 0x01	; 1
     c56:	ba 01       	movw	r22, r20
     c58:	84 e1       	ldi	r24, 0x14	; 20
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <LCD_print_bottom_menu>
		CLEAR_BUTTONS;
     c60:	10 92 a2 01 	sts	0x01A2, r1
		WDT_RESET;
     c64:	10 92 9c 01 	sts	0x019C, r1
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
			RTC_Read(&times);
     c68:	8b ea       	ldi	r24, 0xAB	; 171
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 36 0c 	call	0x186c	; 0x186c <RTC_Read>
			hw_delay(5);
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		LCD_goto(0,0);
		LCD_print_string("ALARM 1!",0);
		LCD_print_bottom_menu("OFF", " ", " ");
		CLEAR_BUTTONS;
		WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     c78:	80 91 a2 01 	lds	r24, 0x01A2
     c7c:	81 11       	cpse	r24, r1
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <__stack+0x389>
     c80:	80 91 9c 01 	lds	r24, 0x019C
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	80 f3       	brcs	.-32     	; 0xc68 <__stack+0x369>
			RTC_Read(&times);
			hw_delay(5);
		}
		Timer1PWM_OnOff(PWM_OFF);
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer1PWM_OnOff>
		CLEAR_BUTTONS;
     c8e:	10 92 a2 01 	sts	0x01A2, r1
		//WDT_RESET;
	}
	
	if((alarmtime2.hour == times.hour) && (alarmtime2.minute == times.minute) && (alarmtime2.AM_PM == times.AM_PM)
     c92:	98 81       	ld	r25, Y
     c94:	80 91 af 01 	lds	r24, 0x01AF
     c98:	98 13       	cpse	r25, r24
     c9a:	50 cc       	rjmp	.-1888   	; 0x53c <main+0xdc>
     c9c:	f3 01       	movw	r30, r6
     c9e:	80 81       	ld	r24, Z
     ca0:	90 91 b0 01 	lds	r25, 0x01B0
     ca4:	89 13       	cpse	r24, r25
     ca6:	4a cc       	rjmp	.-1900   	; 0x53c <main+0xdc>
     ca8:	d2 01       	movw	r26, r4
     caa:	2c 91       	ld	r18, X
     cac:	90 91 b2 01 	lds	r25, 0x01B2
     cb0:	29 13       	cpse	r18, r25
     cb2:	44 cc       	rjmp	.-1912   	; 0x53c <main+0xdc>
	&& (alarmtime2.on_off) && (alarmfresh2 != times.minute))
     cb4:	90 91 d2 01 	lds	r25, 0x01D2
     cb8:	99 23       	and	r25, r25
     cba:	09 f4       	brne	.+2      	; 0xcbe <__stack+0x3bf>
     cbc:	3f cc       	rjmp	.-1922   	; 0x53c <main+0xdc>
     cbe:	90 91 a0 01 	lds	r25, 0x01A0
     cc2:	89 17       	cp	r24, r25
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <__stack+0x3c9>
     cc6:	3a cc       	rjmp	.-1932   	; 0x53c <main+0xdc>
	{
		alarmfresh2 = times.minute;
     cc8:	80 93 a0 01 	sts	0x01A0, r24
		Timer1PWM_OnOff(PWM_ON);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer1PWM_OnOff>
		LCD_clear_screen();
     cd2:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
		LCD_goto(0,0);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
		LCD_print_string("ALARM 2!",0);
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	88 e1       	ldi	r24, 0x18	; 24
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
		LCD_print_bottom_menu("OFF", " ", " ");
     cec:	41 e3       	ldi	r20, 0x31	; 49
     cee:	51 e0       	ldi	r21, 0x01	; 1
     cf0:	ba 01       	movw	r22, r20
     cf2:	84 e1       	ldi	r24, 0x14	; 20
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <LCD_print_bottom_menu>
		CLEAR_BUTTONS;
     cfa:	10 92 a2 01 	sts	0x01A2, r1
		//WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     cfe:	80 91 9c 01 	lds	r24, 0x019C
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	80 f4       	brcc	.+32     	; 0xd26 <__stack+0x427>
			RTC_Read(&times);
     d06:	8b ea       	ldi	r24, 0xAB	; 171
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 36 0c 	call	0x186c	; 0x186c <RTC_Read>
			hw_delay(5);
     d0e:	85 e0       	ldi	r24, 0x05	; 5
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
		LCD_goto(0,0);
		LCD_print_string("ALARM 2!",0);
		LCD_print_bottom_menu("OFF", " ", " ");
		CLEAR_BUTTONS;
		//WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     d16:	80 91 a2 01 	lds	r24, 0x01A2
     d1a:	81 11       	cpse	r24, r1
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__stack+0x427>
     d1e:	80 91 9c 01 	lds	r24, 0x019C
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	80 f3       	brcs	.-32     	; 0xd06 <__stack+0x407>
			RTC_Read(&times);
			hw_delay(5);
		}
		Timer1PWM_OnOff(PWM_OFF);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer1PWM_OnOff>
		CLEAR_BUTTONS;
     d2c:	10 92 a2 01 	sts	0x01A2, r1
     d30:	05 cc       	rjmp	.-2038   	; 0x53c <main+0xdc>

00000d32 <__vector_14>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	8f 93       	push	r24
     d46:	9f 93       	push	r25
	static int count;
	static int bpressed = 0;
	bool button1Raw = (PINC & _BV(BUTTON_1)) == 0;
     d48:	96 b1       	in	r25, 0x06	; 6
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	98 27       	eor	r25, r24
	bool button2Raw = (PINC & _BV(BUTTON_2)) == 0;
     d4e:	26 b1       	in	r18, 0x06	; 6
     d50:	26 95       	lsr	r18
     d52:	21 70       	andi	r18, 0x01	; 1
     d54:	28 27       	eor	r18, r24
	bool button3Raw = (PINC & _BV(BUTTON_3)) == 0;
     d56:	36 b1       	in	r19, 0x06	; 6
     d58:	32 fb       	bst	r19, 2
     d5a:	33 27       	eor	r19, r19
     d5c:	30 f9       	bld	r19, 0
     d5e:	38 27       	eor	r19, r24
	
	if(button1Raw){
     d60:	49 2f       	mov	r20, r25
     d62:	41 70       	andi	r20, 0x01	; 1
     d64:	90 ff       	sbrs	r25, 0
     d66:	1c c0       	rjmp	.+56     	; 0xda0 <__vector_14+0x6e>
		count++;
     d68:	80 91 9a 01 	lds	r24, 0x019A
     d6c:	90 91 9b 01 	lds	r25, 0x019B
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	90 93 9b 01 	sts	0x019B, r25
     d76:	80 93 9a 01 	sts	0x019A, r24
		if(count == 50){
     d7a:	82 33       	cpi	r24, 0x32	; 50
     d7c:	91 05       	cpc	r25, r1
     d7e:	39 f4       	brne	.+14     	; 0xd8e <__vector_14+0x5c>
			bpressed = B1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 99 01 	sts	0x0199, r25
     d88:	80 93 98 01 	sts	0x0198, r24
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <__vector_14+0x6e>
		}
		if(count == 700){
     d8e:	8c 3b       	cpi	r24, 0xBC	; 188
     d90:	92 40       	sbci	r25, 0x02	; 2
     d92:	31 f4       	brne	.+12     	; 0xda0 <__vector_14+0x6e>
			bpressed = B1H;
     d94:	84 e0       	ldi	r24, 0x04	; 4
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	90 93 99 01 	sts	0x0199, r25
     d9c:	80 93 98 01 	sts	0x0198, r24
		}
	}
	
	if(button2Raw){
     da0:	22 23       	and	r18, r18
     da2:	e1 f0       	breq	.+56     	; 0xddc <__vector_14+0xaa>
		count++;
     da4:	80 91 9a 01 	lds	r24, 0x019A
     da8:	90 91 9b 01 	lds	r25, 0x019B
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	90 93 9b 01 	sts	0x019B, r25
     db2:	80 93 9a 01 	sts	0x019A, r24
		if(count == 50){
     db6:	82 33       	cpi	r24, 0x32	; 50
     db8:	91 05       	cpc	r25, r1
     dba:	39 f4       	brne	.+14     	; 0xdca <__vector_14+0x98>
			bpressed = B2;
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 99 01 	sts	0x0199, r25
     dc4:	80 93 98 01 	sts	0x0198, r24
     dc8:	09 c0       	rjmp	.+18     	; 0xddc <__vector_14+0xaa>
		}
		if(count == 700){
     dca:	8c 3b       	cpi	r24, 0xBC	; 188
     dcc:	92 40       	sbci	r25, 0x02	; 2
     dce:	31 f4       	brne	.+12     	; 0xddc <__vector_14+0xaa>
			bpressed = B2H;
     dd0:	85 e0       	ldi	r24, 0x05	; 5
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 99 01 	sts	0x0199, r25
     dd8:	80 93 98 01 	sts	0x0198, r24
		}
	}
	
	if(button3Raw){
     ddc:	33 23       	and	r19, r19
     dde:	e9 f0       	breq	.+58     	; 0xe1a <__vector_14+0xe8>
		count++;
     de0:	80 91 9a 01 	lds	r24, 0x019A
     de4:	90 91 9b 01 	lds	r25, 0x019B
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	90 93 9b 01 	sts	0x019B, r25
     dee:	80 93 9a 01 	sts	0x019A, r24
		if(count == 50){
     df2:	82 33       	cpi	r24, 0x32	; 50
     df4:	91 05       	cpc	r25, r1
     df6:	39 f4       	brne	.+14     	; 0xe06 <__vector_14+0xd4>
			bpressed = B3;
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	90 93 99 01 	sts	0x0199, r25
     e00:	80 93 98 01 	sts	0x0198, r24
     e04:	24 c0       	rjmp	.+72     	; 0xe4e <__vector_14+0x11c>
		}
		if(count == 700){
     e06:	8c 3b       	cpi	r24, 0xBC	; 188
     e08:	92 40       	sbci	r25, 0x02	; 2
     e0a:	39 f4       	brne	.+14     	; 0xe1a <__vector_14+0xe8>
			bpressed = B3H;
     e0c:	86 e0       	ldi	r24, 0x06	; 6
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	90 93 99 01 	sts	0x0199, r25
     e14:	80 93 98 01 	sts	0x0198, r24
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <__vector_14+0xf6>
		}
	}
	if((bpressed > B3) && !button1Raw && !button2Raw && !button3Raw){
     e1a:	80 91 98 01 	lds	r24, 0x0198
     e1e:	90 91 99 01 	lds	r25, 0x0199
     e22:	84 30       	cpi	r24, 0x04	; 4
     e24:	91 05       	cpc	r25, r1
     e26:	9c f0       	brlt	.+38     	; 0xe4e <__vector_14+0x11c>
     e28:	41 11       	cpse	r20, r1
     e2a:	25 c0       	rjmp	.+74     	; 0xe76 <__vector_14+0x144>
     e2c:	21 11       	cpse	r18, r1
     e2e:	23 c0       	rjmp	.+70     	; 0xe76 <__vector_14+0x144>
     e30:	31 11       	cpse	r19, r1
     e32:	21 c0       	rjmp	.+66     	; 0xe76 <__vector_14+0x144>
		g_button_pressed = bpressed;
     e34:	80 93 a2 01 	sts	0x01A2, r24
		bpressed = 0;
     e38:	10 92 99 01 	sts	0x0199, r1
     e3c:	10 92 98 01 	sts	0x0198, r1
		count = 0;
     e40:	10 92 9b 01 	sts	0x019B, r1
     e44:	10 92 9a 01 	sts	0x019A, r1
		WDT_RESET;
     e48:	10 92 9c 01 	sts	0x019C, r1
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <__vector_14+0x144>
	}
	
	if(bpressed && !button1Raw && !button2Raw && !button3Raw)
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	91 f0       	breq	.+36     	; 0xe76 <__vector_14+0x144>
     e52:	41 11       	cpse	r20, r1
     e54:	10 c0       	rjmp	.+32     	; 0xe76 <__vector_14+0x144>
     e56:	21 11       	cpse	r18, r1
     e58:	0e c0       	rjmp	.+28     	; 0xe76 <__vector_14+0x144>
     e5a:	31 11       	cpse	r19, r1
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <__vector_14+0x144>
	{
		g_button_pressed = bpressed;
     e5e:	80 93 a2 01 	sts	0x01A2, r24
		bpressed = 0;
     e62:	10 92 99 01 	sts	0x0199, r1
     e66:	10 92 98 01 	sts	0x0198, r1
		count = 0;
     e6a:	10 92 9b 01 	sts	0x019B, r1
     e6e:	10 92 9a 01 	sts	0x019A, r1
		WDT_RESET;
     e72:	10 92 9c 01 	sts	0x019C, r1
	}
	
}
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <__vector_6>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

ISR(WDT_vect)
{
     e8c:	1f 92       	push	r1
     e8e:	0f 92       	push	r0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	0f 92       	push	r0
     e94:	11 24       	eor	r1, r1
     e96:	8f 93       	push	r24
	WDT_counter++;
     e98:	80 91 9c 01 	lds	r24, 0x019C
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	80 93 9c 01 	sts	0x019C, r24
}
     ea2:	8f 91       	pop	r24
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <I2C_Init>:
--------------------------------------------------------------------------------------------------*/

void I2C_Init(void){
	
	//set PC5 and PC6 as output pins
	DDRC |= _BV(PC5) | _BV(PC6);
     eae:	87 b1       	in	r24, 0x07	; 7
     eb0:	80 66       	ori	r24, 0x60	; 96
     eb2:	87 b9       	out	0x07, r24	; 7
	
	//Initialize I2C bit rate to 100kHz with pre-scalar of 0
	TWSR = 0;
     eb4:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = ((F_CPU/F_SCL)-16)/2;
     eb8:	88 e4       	ldi	r24, 0x48	; 72
     eba:	80 93 b8 00 	sts	0x00B8, r24
     ebe:	08 95       	ret

00000ec0 <I2C_Start>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void I2C_Start(void){
	//send Start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
     ec0:	84 ea       	ldi	r24, 0xA4	; 164
     ec2:	80 93 bc 00 	sts	0x00BC, r24
	//Wait for TWINT flag
	while(!(TWCR & _BV(TWINT)));
     ec6:	ec eb       	ldi	r30, 0xBC	; 188
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	ec f7       	brge	.-6      	; 0xeca <I2C_Start+0xa>
}
     ed0:	08 95       	ret

00000ed2 <I2C_Addr>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void I2C_Addr(uint8_t address, uint8_t read_write){
	//Put SLA+R/W byte into TWDR
	TWDR = address << 1 | read_write;
     ed2:	88 0f       	add	r24, r24
     ed4:	68 2b       	or	r22, r24
     ed6:	60 93 bb 00 	sts	0x00BB, r22
	//Send Message
	TWCR = _BV(TWINT) | _BV(TWEN);
     eda:	84 e8       	ldi	r24, 0x84	; 132
     edc:	80 93 bc 00 	sts	0x00BC, r24
	//Wait for ack
	while(!(TWCR & _BV(TWINT)));
     ee0:	ec eb       	ldi	r30, 0xBC	; 188
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	88 23       	and	r24, r24
     ee8:	ec f7       	brge	.-6      	; 0xee4 <I2C_Addr+0x12>
}
     eea:	08 95       	ret

00000eec <I2C_Write>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void I2C_Write(uint8_t data){
	//put data to be written in TWDR
	TWDR = data;
     eec:	80 93 bb 00 	sts	0x00BB, r24
	//Write data to slave
	TWCR = _BV(TWINT) | _BV(TWEN);
     ef0:	84 e8       	ldi	r24, 0x84	; 132
     ef2:	80 93 bc 00 	sts	0x00BC, r24
	//wait for ack
	while(!(TWCR &_BV(TWINT)));
     ef6:	ec eb       	ldi	r30, 0xBC	; 188
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	ec f7       	brge	.-6      	; 0xefa <I2C_Write+0xe>
}
     f00:	08 95       	ret

00000f02 <I2C_Read>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

uint8_t I2C_Read(void){
	//Enable nack
	TWCR = _BV(TWINT) | _BV(TWEN);
     f02:	84 e8       	ldi	r24, 0x84	; 132
     f04:	80 93 bc 00 	sts	0x00BC, r24
	//wait for TWINT to indicate BYTE received from slave
	while(!(TWCR & _BV(TWINT)));
     f08:	ec eb       	ldi	r30, 0xBC	; 188
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 23       	and	r24, r24
     f10:	ec f7       	brge	.-6      	; 0xf0c <I2C_Read+0xa>
	//return byte
	return (TWDR);
     f12:	80 91 bb 00 	lds	r24, 0x00BB
}
     f16:	08 95       	ret

00000f18 <I2C_RecieveMessage>:
	slave_addr - Address of slave that you want to read from
	device_reg - Register address you want to read
Return value : Byte of data that was read
--------------------------------------------------------------------------------------------------*/

uint8_t I2C_RecieveMessage(uint8_t slave_addr, uint8_t device_reg){
     f18:	cf 93       	push	r28
     f1a:	c6 2f       	mov	r28, r22
	//variable to store received data in
	uint8_t read_data;
	//start communication
	I2C_Start();
     f1c:	0e 94 60 07 	call	0xec0	; 0xec0 <I2C_Start>
	//address slave in write mode
	I2C_Addr(RTC_ADDRESS, WRITE);
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	88 e6       	ldi	r24, 0x68	; 104
     f24:	0e 94 69 07 	call	0xed2	; 0xed2 <I2C_Addr>
	//specify device register to read from
	I2C_Write(device_reg);
     f28:	8c 2f       	mov	r24, r28
     f2a:	0e 94 76 07 	call	0xeec	; 0xeec <I2C_Write>
	//start another communication
	I2C_Start();
     f2e:	0e 94 60 07 	call	0xec0	; 0xec0 <I2C_Start>
	//address slave in read mode
	I2C_Addr(RTC_ADDRESS, READ);
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	88 e6       	ldi	r24, 0x68	; 104
     f36:	0e 94 69 07 	call	0xed2	; 0xed2 <I2C_Addr>
	//read and store data from slave
	read_data = I2C_Read();
     f3a:	0e 94 81 07 	call	0xf02	; 0xf02 <I2C_Read>
Return value : None.
--------------------------------------------------------------------------------------------------*/

void I2C_Stop(void){
	//Send stop condition
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
     f3e:	94 e9       	ldi	r25, 0x94	; 148
     f40:	90 93 bc 00 	sts	0x00BC, r25
	read_data = I2C_Read();
	//stop communication
	I2C_Stop();
	//return byte
	return (read_data);
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <LCD_SPI_initialize>:
Return value : None.
--------------------------------------------------------------------------------------------------*/
void LCD_SPI_initialize()
{
	// Set data direction for LCD output control pins
	LCD_DD_RESET  |= _BV(LCD_RESET_PIN);
     f48:	20 9a       	sbi	0x04, 0	; 4
	LCD_DD_SCK    |= _BV(LCD_SCK);
     f4a:	25 9a       	sbi	0x04, 5	; 4
	LCD_DD_MOSI   |= _BV(LCD_MOSI);     
     f4c:	23 9a       	sbi	0x04, 3	; 4
	LCD_DD_D_OR_C |= _BV(LCD_D_OR_C);   
     f4e:	54 9a       	sbi	0x0a, 4	; 10
	LCD_DD_SS     |= _BV(LCD_SS);    
     f50:	22 9a       	sbi	0x04, 2	; 4
	
	// Setting SPI clock generator to Fclk/16 and enabling SPI peripheral and setting in master mode
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
     f52:	81 e5       	ldi	r24, 0x51	; 81
     f54:	8c bd       	out	0x2c, r24	; 44
     f56:	08 95       	ret

00000f58 <LCD_send_command>:
--------------------------------------------------------------------------------------------------*/
void LCD_send_command(BYTE command_to_send)
{
	
	// Enable LCD
	LCD_ENABLE;
     f58:	2a 98       	cbi	0x05, 2	; 5
	
	// Set the LCD in command mode
	LCD_COMMAND_MODE;
     f5a:	5c 98       	cbi	0x0b, 4	; 11
	
	// Writing to the SPI data register which auto. shifts out data
	SPDR = command_to_send;
     f5c:	8e bd       	out	0x2e, r24	; 46
	
	// Wait while the SPIF flag is low
	while(!(SPSR & _BV(SPIF)))
     f5e:	0d b4       	in	r0, 0x2d	; 45
     f60:	07 fe       	sbrs	r0, 7
     f62:	fd cf       	rjmp	.-6      	; 0xf5e <LCD_send_command+0x6>
	{
		// Do nothing
	}
	SPSR &= ~_BV(SPIF);
     f64:	8d b5       	in	r24, 0x2d	; 45
     f66:	8f 77       	andi	r24, 0x7F	; 127
     f68:	8d bd       	out	0x2d, r24	; 45
	
		// Disable LCD
	LCD_DISABLE;
     f6a:	2a 9a       	sbi	0x05, 2	; 5
     f6c:	08 95       	ret

00000f6e <LCD_send_data>:
--------------------------------------------------------------------------------------------------*/

void LCD_send_data(BYTE data_to_send)
{
	// Enable LCD
	LCD_ENABLE;
     f6e:	2a 98       	cbi	0x05, 2	; 5
	
	// Set Data Mode
	LCD_DATA_MODE;
     f70:	5c 9a       	sbi	0x0b, 4	; 11
	
	// Store data to send in SPI data register
	SPDR = data_to_send;
     f72:	8e bd       	out	0x2e, r24	; 46
	
	// Wait while the SPIF flag is low
	while(!(SPSR & _BV(SPIF)))
     f74:	0d b4       	in	r0, 0x2d	; 45
     f76:	07 fe       	sbrs	r0, 7
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <LCD_send_data+0x6>
	{
		// Do nothing
	}
	
	// Disable LCD
	LCD_DISABLE;
     f7a:	2a 9a       	sbi	0x05, 2	; 5
     f7c:	08 95       	ret

00000f7e <LCD_goto>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_goto(int column, int row)
{
     f7e:	cf 93       	push	r28
     f80:	c6 2f       	mov	r28, r22
	// Set the x address
	LCD_send_command(0x80 | column);
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set the y address
	LCD_send_command(0x40 | row);
     f88:	8c 2f       	mov	r24, r28
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
}
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <LCD_clear_screen>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_clear_screen()
{
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	c8 ef       	ldi	r28, 0xF8	; 248
     f9a:	d1 e0       	ldi	r29, 0x01	; 1
	int i;
	
	for(i = 0; i < 504; i++)
	{
		LCD_send_data(0x00);
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
     fa2:	21 97       	sbiw	r28, 0x01	; 1

void LCD_clear_screen()
{
	int i;
	
	for(i = 0; i < 504; i++)
     fa4:	20 97       	sbiw	r28, 0x00	; 0
     fa6:	d1 f7       	brne	.-12     	; 0xf9c <LCD_clear_screen+0x8>
	{
		LCD_send_data(0x00);
	}
	
	// Return to home position
	LCD_goto(0,0);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <LCD_initialize>:
Return value : None.
--------------------------------------------------------------------------------------------------*/
void LCD_initialize()
{
	// Enabling the LCD
	LCD_ENABLE;
     fba:	2a 98       	cbi	0x05, 2	; 5
	
	// Set the reset pin (active low) (resetting) 
	LCD_RESET;
     fbc:	28 98       	cbi	0x05, 0	; 5
	
	// Wait for 1 ms
	hw_delay(1);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 9e 0c 	call	0x193c	; 0x193c <hw_delay>
	
	// Set reset pin (active low) (setting)
	LCD_NRESET;
     fc6:	28 9a       	sbi	0x05, 0	; 5
	
	// Clear the screen
	LCD_clear_screen();
     fc8:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
	
	// Disable the LCD 
	LCD_DISABLE;
     fcc:	2a 9a       	sbi	0x05, 2	; 5
	 *				Setting operation voltage to approx. 7V with Vop = 65
	 *				Mux 1:48
	 */
	
	// Set the display to normal mode
	LCD_send_command(0x0C);
     fce:	8c e0       	ldi	r24, 0x0C	; 12
     fd0:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set the cursor to (0,0)
	LCD_goto(0,0);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	
	// Set LCD in Horizontal addressing mode / Extended instruction mode / Power down disabled mode
	LCD_send_command(0x21);
     fe0:	81 e2       	ldi	r24, 0x21	; 33
     fe2:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set the temperature coefficient to 2 (17 mV/K)
	LCD_send_command(0x04);
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set operation voltage to approximately 7V
	LCD_send_command(0xA0);
     fec:	80 ea       	ldi	r24, 0xA0	; 160
     fee:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set mux rate 1:48
	//was 0x16
	LCD_send_command(0x16);
     ff2:	86 e1       	ldi	r24, 0x16	; 22
     ff4:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
	
	// Set back into normal instruction mode
	LCD_send_command(0x20);
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
     ffe:	08 95       	ret

00001000 <LCD_set_y>:
--------------------------------------------------------------------------------------------------*/

void LCD_set_y(int y_to_set)
{
	// Set the y address
	LCD_send_command(0x40 | y_to_set);
    1000:	80 64       	ori	r24, 0x40	; 64
    1002:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_send_command>
    1006:	08 95       	ret

00001008 <LCD_print_char>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_char(unsigned char char_to_print)
{
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
	unsigned char j;
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
    1010:	08 2f       	mov	r16, r24
    1012:	10 e0       	ldi	r17, 0x00	; 0
    1014:	00 52       	subi	r16, 0x20	; 32
    1016:	11 09       	sbc	r17, r1
    1018:	c8 01       	movw	r24, r16
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	08 0f       	add	r16, r24
    1024:	19 1f       	adc	r17, r25
    1026:	c0 e0       	ldi	r28, 0x00	; 0
    1028:	d0 e0       	ldi	r29, 0x00	; 0
    102a:	00 58       	subi	r16, 0x80	; 128
    102c:	1e 4f       	sbci	r17, 0xFE	; 254
    102e:	f8 01       	movw	r30, r16
    1030:	ec 0f       	add	r30, r28
    1032:	fd 1f       	adc	r31, r29
    1034:	84 91       	lpm	r24, Z
    1036:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    103a:	21 96       	adiw	r28, 0x01	; 1

void LCD_print_char(unsigned char char_to_print)
{
	unsigned char j;
	
	for(j=0; j<5; j++)
    103c:	c5 30       	cpi	r28, 0x05	; 5
    103e:	d1 05       	cpc	r29, r1
    1040:	b1 f7       	brne	.-20     	; 0x102e <LCD_print_char+0x26>
	{
		LCD_send_data((pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
	}
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <LCD_print_inverted_char>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_inverted_char(unsigned char char_to_print)
{
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
	unsigned char j;
	
	for(j=0; j<5; j++)
	{
		LCD_send_data(~(pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
    1054:	08 2f       	mov	r16, r24
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	00 52       	subi	r16, 0x20	; 32
    105a:	11 09       	sbc	r17, r1
    105c:	c8 01       	movw	r24, r16
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	08 0f       	add	r16, r24
    1068:	19 1f       	adc	r17, r25
    106a:	c0 e0       	ldi	r28, 0x00	; 0
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	00 58       	subi	r16, 0x80	; 128
    1070:	1e 4f       	sbci	r17, 0xFE	; 254
    1072:	f8 01       	movw	r30, r16
    1074:	ec 0f       	add	r30, r28
    1076:	fd 1f       	adc	r31, r29
    1078:	84 91       	lpm	r24, Z
    107a:	80 95       	com	r24
    107c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1080:	21 96       	adiw	r28, 0x01	; 1

void LCD_print_inverted_char(unsigned char char_to_print)
{
	unsigned char j;
	
	for(j=0; j<5; j++)
    1082:	c5 30       	cpi	r28, 0x05	; 5
    1084:	d1 05       	cpc	r29, r1
    1086:	a9 f7       	brne	.-22     	; 0x1072 <LCD_print_inverted_char+0x26>
	{
		LCD_send_data(~(pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
	}
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <LCD_print_large_number>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
    1092:	2f 92       	push	r2
    1094:	3f 92       	push	r3
    1096:	4f 92       	push	r4
    1098:	5f 92       	push	r5
    109a:	6f 92       	push	r6
    109c:	7f 92       	push	r7
    109e:	8f 92       	push	r8
    10a0:	9f 92       	push	r9
    10a2:	af 92       	push	r10
    10a4:	bf 92       	push	r11
    10a6:	cf 92       	push	r12
    10a8:	df 92       	push	r13
    10aa:	ef 92       	push	r14
    10ac:	ff 92       	push	r15
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <LCD_print_large_number+0x26>
    10b8:	1f 92       	push	r1
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	32 2e       	mov	r3, r18
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
		{
			if(inverted)
			{
				LCD_send_data(~pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    10c0:	24 e1       	ldi	r18, 0x14	; 20
    10c2:	28 9f       	mul	r18, r24
    10c4:	50 01       	movw	r10, r0
    10c6:	29 9f       	mul	r18, r25
    10c8:	b0 0c       	add	r11, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	45 01       	movw	r8, r10
void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
    10ce:	c1 2c       	mov	r12, r1
    10d0:	d1 2c       	mov	r13, r1
	{
		LCD_goto(x,y+i);
    10d2:	64 2e       	mov	r6, r20
    10d4:	71 2c       	mov	r7, r1
    10d6:	46 2e       	mov	r4, r22
    10d8:	51 2c       	mov	r5, r1
    10da:	26 2c       	mov	r2, r6
    10dc:	79 82       	std	Y+1, r7	; 0x01
    10de:	b6 01       	movw	r22, r12
    10e0:	66 0d       	add	r22, r6
    10e2:	77 1d       	adc	r23, r7
    10e4:	c2 01       	movw	r24, r4
    10e6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
		for(j = 0; j < 10; j++)
    10ea:	1a 82       	std	Y+2, r1	; 0x02
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    10ee:	c5 01       	movw	r24, r10
    10f0:	8e 58       	subi	r24, 0x8E	; 142
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	7c 01       	movw	r14, r24
    10f6:	84 01       	movw	r16, r8
    10f8:	0e 58       	subi	r16, 0x8E	; 142
    10fa:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			if(inverted)
    10fc:	33 20       	and	r3, r3
    10fe:	49 f0       	breq	.+18     	; 0x1112 <LCD_print_large_number+0x80>
    1100:	ea 81       	ldd	r30, Y+2	; 0x02
    1102:	fb 81       	ldd	r31, Y+3	; 0x03
    1104:	e0 0f       	add	r30, r16
    1106:	f1 1f       	adc	r31, r17
			{
				LCD_send_data(~pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    1108:	84 91       	lpm	r24, Z
    110a:	80 95       	com	r24
    110c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <LCD_print_large_number+0x8e>
    1112:	ea 81       	ldd	r30, Y+2	; 0x02
    1114:	fb 81       	ldd	r31, Y+3	; 0x03
    1116:	ee 0d       	add	r30, r14
    1118:	ff 1d       	adc	r31, r15
			}
			else
			{
				LCD_send_data(pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    111a:	84 91       	lpm	r24, Z
    111c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    1120:	ea 81       	ldd	r30, Y+2	; 0x02
    1122:	fb 81       	ldd	r31, Y+3	; 0x03
    1124:	31 96       	adiw	r30, 0x01	; 1
    1126:	fb 83       	std	Y+3, r31	; 0x03
    1128:	ea 83       	std	Y+2, r30	; 0x02
    112a:	3a 97       	sbiw	r30, 0x0a	; 10
    112c:	39 f7       	brne	.-50     	; 0x10fc <LCD_print_large_number+0x6a>
void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
    112e:	ff ef       	ldi	r31, 0xFF	; 255
    1130:	cf 1a       	sub	r12, r31
    1132:	df 0a       	sbc	r13, r31
    1134:	8a e0       	ldi	r24, 0x0A	; 10
    1136:	88 0e       	add	r8, r24
    1138:	91 1c       	adc	r9, r1
    113a:	9a e0       	ldi	r25, 0x0A	; 10
    113c:	a9 0e       	add	r10, r25
    113e:	b1 1c       	adc	r11, r1
    1140:	e2 e0       	ldi	r30, 0x02	; 2
    1142:	ce 16       	cp	r12, r30
    1144:	d1 04       	cpc	r13, r1
    1146:	49 f6       	brne	.-110    	; 0x10da <LCD_print_large_number+0x48>
				LCD_send_data(pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
			}
			
		}
	}
	LCD_set_y(y);
    1148:	82 2d       	mov	r24, r2
    114a:	99 81       	ldd	r25, Y+1	; 0x01
    114c:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_set_y>
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	3f 90       	pop	r3
    1178:	2f 90       	pop	r2
    117a:	08 95       	ret

0000117c <LCD_print_double_number>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_double_number(int number_to_print)
{
    117c:	8f 92       	push	r8
    117e:	9f 92       	push	r9
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	4c 01       	movw	r8, r24
	unsigned char j;
	int temp;
	
	temp = number_to_print / 10;
    1196:	6a e0       	ldi	r22, 0x0A	; 10
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	0e 94 c5 0c 	call	0x198a	; 0x198a <__divmodhi4>
    119e:	5b 01       	movw	r10, r22
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
    11a0:	6b 01       	movw	r12, r22
    11a2:	cc 0c       	add	r12, r12
    11a4:	dd 1c       	adc	r13, r13
    11a6:	cc 0c       	add	r12, r12
    11a8:	dd 1c       	adc	r13, r13
    11aa:	c6 01       	movw	r24, r12
    11ac:	86 0f       	add	r24, r22
    11ae:	97 1f       	adc	r25, r23
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	0f 2e       	mov	r0, r31
    11b6:	fe e4       	ldi	r31, 0x4E	; 78
    11b8:	ef 2e       	mov	r14, r31
    11ba:	f1 e0       	ldi	r31, 0x01	; 1
    11bc:	ff 2e       	mov	r15, r31
    11be:	f0 2d       	mov	r31, r0
    11c0:	9c 01       	movw	r18, r24
    11c2:	22 5b       	subi	r18, 0xB2	; 178
    11c4:	3e 4f       	sbci	r19, 0xFE	; 254
    11c6:	69 01       	movw	r12, r18
    11c8:	87 01       	movw	r16, r14
    11ca:	f6 01       	movw	r30, r12
    11cc:	ec 0f       	add	r30, r28
    11ce:	fd 1f       	adc	r31, r29
    11d0:	84 91       	lpm	r24, Z
    11d2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    11d6:	21 96       	adiw	r28, 0x01	; 1
	unsigned char j;
	int temp;
	
	temp = number_to_print / 10;
	
	for(j=0; j<5; j++)
    11d8:	c5 30       	cpi	r28, 0x05	; 5
    11da:	d1 05       	cpc	r29, r1
    11dc:	a9 f7       	brne	.-22     	; 0x11c8 <LCD_print_double_number+0x4c>
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
	temp = number_to_print - temp*10;
    11de:	26 ef       	ldi	r18, 0xF6	; 246
    11e0:	a5 01       	movw	r20, r10
    11e2:	24 03       	mulsu	r18, r20
    11e4:	c0 01       	movw	r24, r0
    11e6:	25 9f       	mul	r18, r21
    11e8:	90 0d       	add	r25, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	88 0e       	add	r8, r24
    11ee:	99 1e       	adc	r9, r25
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
    11f0:	c4 01       	movw	r24, r8
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0e       	add	r8, r24
    11fc:	99 1e       	adc	r9, r25
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    1202:	08 0d       	add	r16, r8
    1204:	19 1d       	adc	r17, r9
    1206:	f8 01       	movw	r30, r16
    1208:	ec 0f       	add	r30, r28
    120a:	fd 1f       	adc	r31, r29
    120c:	84 91       	lpm	r24, Z
    120e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1212:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
	temp = number_to_print - temp*10;
	
	for(j=0; j<5; j++)
    1214:	c5 30       	cpi	r28, 0x05	; 5
    1216:	d1 05       	cpc	r29, r1
    1218:	b1 f7       	brne	.-20     	; 0x1206 <LCD_print_double_number+0x8a>
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	08 95       	ret

00001234 <LCD_print_largedouble_number>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_largedouble_number(int number_to_print, int x, int y, uint8_t hours, uint8_t inverted)
{
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	d6 2e       	mov	r13, r22
    1248:	c7 2e       	mov	r12, r23
    124a:	14 2f       	mov	r17, r20
    124c:	b5 2e       	mov	r11, r21
	int temp1;
	int temp2;
	
	temp1 = number_to_print / 10;
    124e:	6a e0       	ldi	r22, 0x0A	; 10
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	0e 94 c5 0c 	call	0x198a	; 0x198a <__divmodhi4>
    1256:	eb 01       	movw	r28, r22
    1258:	7c 01       	movw	r14, r24
	temp2 = number_to_print % 10;
	if((temp1 == 0) && hours)
    125a:	20 97       	sbiw	r28, 0x00	; 0
    125c:	69 f5       	brne	.+90     	; 0x12b8 <LCD_print_largedouble_number+0x84>
    125e:	22 23       	and	r18, r18
    1260:	59 f1       	breq	.+86     	; 0x12b8 <LCD_print_largedouble_number+0x84>
	{
		LCD_goto(x,y);
    1262:	64 2f       	mov	r22, r20
    1264:	7b 2d       	mov	r23, r11
    1266:	8d 2d       	mov	r24, r13
    1268:	9c 2d       	mov	r25, r12
    126a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
		LCD_print_large_number(10, x, y, NOTINVERTED);
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	41 2f       	mov	r20, r17
    1272:	6d 2d       	mov	r22, r13
    1274:	8a e0       	ldi	r24, 0x0A	; 10
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
		if(inverted)
    127c:	00 23       	and	r16, r16
    127e:	71 f0       	breq	.+28     	; 0x129c <LCD_print_largedouble_number+0x68>
		{
			LCD_goto(x,y);
    1280:	61 2f       	mov	r22, r17
    1282:	7b 2d       	mov	r23, r11
    1284:	8d 2d       	mov	r24, r13
    1286:	9c 2d       	mov	r25, r12
    1288:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, INVERTED);
    128c:	6a e0       	ldi	r22, 0x0A	; 10
    128e:	6d 0d       	add	r22, r13
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	41 2f       	mov	r20, r17
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
    129a:	43 c0       	rjmp	.+134    	; 0x1322 <LCD_print_largedouble_number+0xee>
		} 
		else
		{
			LCD_goto(x,y);
    129c:	61 2f       	mov	r22, r17
    129e:	7b 2d       	mov	r23, r11
    12a0:	8d 2d       	mov	r24, r13
    12a2:	9c 2d       	mov	r25, r12
    12a4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, NOTINVERTED);
    12a8:	6a e0       	ldi	r22, 0x0A	; 10
    12aa:	6d 0d       	add	r22, r13
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	41 2f       	mov	r20, r17
    12b0:	c7 01       	movw	r24, r14
    12b2:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
    12b6:	35 c0       	rjmp	.+106    	; 0x1322 <LCD_print_largedouble_number+0xee>
		
		
	}
	else
	{
		if(inverted)
    12b8:	00 23       	and	r16, r16
    12ba:	d1 f0       	breq	.+52     	; 0x12f0 <LCD_print_largedouble_number+0xbc>
		{
			LCD_goto(x,y);
    12bc:	61 2f       	mov	r22, r17
    12be:	7b 2d       	mov	r23, r11
    12c0:	8d 2d       	mov	r24, r13
    12c2:	9c 2d       	mov	r25, r12
    12c4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp1, x, y, INVERTED);
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	41 2f       	mov	r20, r17
    12cc:	6d 2d       	mov	r22, r13
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
			LCD_goto(x,y);
    12d4:	61 2f       	mov	r22, r17
    12d6:	7b 2d       	mov	r23, r11
    12d8:	8d 2d       	mov	r24, r13
    12da:	9c 2d       	mov	r25, r12
    12dc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, INVERTED);
    12e0:	6a e0       	ldi	r22, 0x0A	; 10
    12e2:	6d 0d       	add	r22, r13
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	41 2f       	mov	r20, r17
    12e8:	c7 01       	movw	r24, r14
    12ea:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
    12ee:	19 c0       	rjmp	.+50     	; 0x1322 <LCD_print_largedouble_number+0xee>
		}
		else
		{
			LCD_goto(x,y);
    12f0:	61 2f       	mov	r22, r17
    12f2:	7b 2d       	mov	r23, r11
    12f4:	8d 2d       	mov	r24, r13
    12f6:	9c 2d       	mov	r25, r12
    12f8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp1, x, y, NOTINVERTED);
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	41 2f       	mov	r20, r17
    1300:	6d 2d       	mov	r22, r13
    1302:	ce 01       	movw	r24, r28
    1304:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
			LCD_goto(x,y);
    1308:	61 2f       	mov	r22, r17
    130a:	7b 2d       	mov	r23, r11
    130c:	8d 2d       	mov	r24, r13
    130e:	9c 2d       	mov	r25, r12
    1310:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, NOTINVERTED);
    1314:	6a e0       	ldi	r22, 0x0A	; 10
    1316:	6d 0d       	add	r22, r13
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	41 2f       	mov	r20, r17
    131c:	c7 01       	movw	r24, r14
    131e:	0e 94 49 08 	call	0x1092	; 0x1092 <LCD_print_large_number>
		}
		
	}
	
}
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	bf 90       	pop	r11
    1334:	08 95       	ret

00001336 <LCD_print_large_colon>:
Description : Sends a command through SPI to Nokia 5110 LCD w/ PCD8544 Controller
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_large_colon(uint8_t x, uint8_t y){
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
    1346:	e6 2e       	mov	r14, r22
    1348:	f1 2c       	mov	r15, r1
    134a:	c8 2e       	mov	r12, r24
    134c:	d1 2c       	mov	r13, r1
    134e:	b7 01       	movw	r22, r14
    1350:	c6 01       	movw	r24, r12
    1352:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
    1356:	02 e7       	ldi	r16, 0x72	; 114
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	c8 e6       	ldi	r28, 0x68	; 104
    135c:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 10; j++)
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
    135e:	fe 01       	movw	r30, r28
    1360:	84 91       	lpm	r24, Z
    1362:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1366:	21 96       	adiw	r28, 0x01	; 1
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    1368:	c0 17       	cp	r28, r16
    136a:	d1 07       	cpc	r29, r17
    136c:	c1 f7       	brne	.-16     	; 0x135e <LCD_print_large_colon+0x28>
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
    136e:	b7 01       	movw	r22, r14
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	c6 01       	movw	r24, r12
    1376:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
		for(j = 0; j < 10; j++)
    137a:	c0 e0       	ldi	r28, 0x00	; 0
    137c:	d0 e0       	ldi	r29, 0x00	; 0
    137e:	08 e6       	ldi	r16, 0x68	; 104
    1380:	10 e0       	ldi	r17, 0x00	; 0
    1382:	0b 5f       	subi	r16, 0xFB	; 251
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	f8 01       	movw	r30, r16
    1388:	ec 0f       	add	r30, r28
    138a:	fd 1f       	adc	r31, r29
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
    138c:	84 91       	lpm	r24, Z
    138e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	ca 30       	cpi	r28, 0x0A	; 10
    1396:	d1 05       	cpc	r29, r1
    1398:	b1 f7       	brne	.-20     	; 0x1386 <LCD_print_large_colon+0x50>
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
		}
	}
	LCD_set_y(y);
    139a:	c7 01       	movw	r24, r14
    139c:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_set_y>
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	df 90       	pop	r13
    13ae:	cf 90       	pop	r12
    13b0:	08 95       	ret

000013b2 <LCD_print_string>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_string(const char *string, BYTE inverted)
{
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
	// Prints character of current index of string until string ends
	if(inverted){
    13b8:	61 11       	cpse	r22, r1
    13ba:	04 c0       	rjmp	.+8      	; 0x13c4 <LCD_print_string+0x12>
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
		}
	}
	else{
		while ( *string )
    13bc:	88 81       	ld	r24, Y
    13be:	81 11       	cpse	r24, r1
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <LCD_print_string+0x26>
    13c2:	10 c0       	rjmp	.+32     	; 0x13e4 <LCD_print_string+0x32>

void LCD_print_string(const char *string, BYTE inverted)
{
	// Prints character of current index of string until string ends
	if(inverted){
		while ( *string )
    13c4:	88 81       	ld	r24, Y
    13c6:	88 23       	and	r24, r24
    13c8:	69 f0       	breq	.+26     	; 0x13e4 <LCD_print_string+0x32>
    13ca:	21 96       	adiw	r28, 0x01	; 1
		{
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
    13cc:	0e 94 26 08 	call	0x104c	; 0x104c <LCD_print_inverted_char>

void LCD_print_string(const char *string, BYTE inverted)
{
	// Prints character of current index of string until string ends
	if(inverted){
		while ( *string )
    13d0:	89 91       	ld	r24, Y+
    13d2:	81 11       	cpse	r24, r1
    13d4:	fb cf       	rjmp	.-10     	; 0x13cc <LCD_print_string+0x1a>
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <LCD_print_string+0x32>
    13d8:	21 96       	adiw	r28, 0x01	; 1
	}
	else{
		while ( *string )
		{
			// Prints character of current index of string
			LCD_print_char( *string++ );
    13da:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
		}
	}
	else{
		while ( *string )
    13de:	89 91       	ld	r24, Y+
    13e0:	81 11       	cpse	r24, r1
    13e2:	fb cf       	rjmp	.-10     	; 0x13da <LCD_print_string+0x28>
			// Prints character of current index of string
			LCD_print_char( *string++ );
		}
	}
	
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <LCD_print_bottom_menu>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_bottom_menu(const char *button1, const char *button2, const char *button3)
{
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	6b 01       	movw	r12, r22
    13fe:	7a 01       	movw	r14, r20
	int tot_string_length, temp_calc, max_space, i;
	
	//Finding total number of characters
	tot_string_length = strlen(button1) + strlen(button2) + strlen(button3);
    1400:	dc 01       	movw	r26, r24
    1402:	0d 90       	ld	r0, X+
    1404:	00 20       	and	r0, r0
    1406:	e9 f7       	brne	.-6      	; 0x1402 <LCD_print_bottom_menu+0x18>
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	cd 01       	movw	r24, r26
    140c:	8c 1b       	sub	r24, r28
    140e:	9d 0b       	sbc	r25, r29
    1410:	db 01       	movw	r26, r22
    1412:	0d 90       	ld	r0, X+
    1414:	00 20       	and	r0, r0
    1416:	e9 f7       	brne	.-6      	; 0x1412 <LCD_print_bottom_menu+0x28>
    1418:	11 97       	sbiw	r26, 0x01	; 1
    141a:	a6 1b       	sub	r26, r22
    141c:	b7 0b       	sbc	r27, r23
    141e:	fa 01       	movw	r30, r20
    1420:	01 90       	ld	r0, Z+
    1422:	00 20       	and	r0, r0
    1424:	e9 f7       	brne	.-6      	; 0x1420 <LCD_print_bottom_menu+0x36>
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	e4 1b       	sub	r30, r20
    142a:	f5 0b       	sbc	r31, r21
    142c:	a8 0f       	add	r26, r24
    142e:	b9 1f       	adc	r27, r25
    1430:	ea 0f       	add	r30, r26
    1432:	fb 1f       	adc	r31, r27
	
	temp_calc = 16 - (tot_string_length);
    1434:	80 e1       	ldi	r24, 0x10	; 16
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	8e 1b       	sub	r24, r30
    143a:	9f 0b       	sbc	r25, r31
	
	max_space = temp_calc / 2;
    143c:	8c 01       	movw	r16, r24
    143e:	12 f4       	brpl	.+4      	; 0x1444 <LCD_print_bottom_menu+0x5a>
    1440:	0f 5f       	subi	r16, 0xFF	; 255
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	15 95       	asr	r17
    1446:	07 95       	ror	r16
	
	// Set cursor to bottom left
	LCD_goto(0,5);
    1448:	65 e0       	ldi	r22, 0x05	; 5
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	
	// print first button command heading
	LCD_print_string(button1,0);
    1454:	60 e0       	ldi	r22, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	
	for(i = 0; i < max_space; i++)
    145c:	10 16       	cp	r1, r16
    145e:	11 06       	cpc	r1, r17
    1460:	ec f4       	brge	.+58     	; 0x149c <LCD_print_bottom_menu+0xb2>
    1462:	c0 e0       	ldi	r28, 0x00	; 0
    1464:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// print a space after the first command
		LCD_print_char(' ');
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	LCD_goto(0,5);
	
	// print first button command heading
	LCD_print_string(button1,0);
	
	for(i = 0; i < max_space; i++)
    146c:	21 96       	adiw	r28, 0x01	; 1
    146e:	c0 17       	cp	r28, r16
    1470:	d1 07       	cpc	r29, r17
    1472:	c9 f7       	brne	.-14     	; 0x1466 <LCD_print_bottom_menu+0x7c>
    1474:	0c c0       	rjmp	.+24     	; 0x148e <LCD_print_bottom_menu+0xa4>
	LCD_print_string(button2,0);
	
	for(i = 0; i < max_space; i++)
	{
		// print a space after the first command
		LCD_print_char(' ');
    1476:	80 e2       	ldi	r24, 0x20	; 32
    1478:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
	
	for(i = 0; i < max_space; i++)
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	c0 17       	cp	r28, r16
    1480:	d1 07       	cpc	r29, r17
    1482:	c9 f7       	brne	.-14     	; 0x1476 <LCD_print_bottom_menu+0x8c>
	{
		// print a space after the first command
		LCD_print_char(' ');
	}
	// print third button command heading
	LCD_print_string(button3,0);
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	c7 01       	movw	r24, r14
    1488:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    148c:	0c c0       	rjmp	.+24     	; 0x14a6 <LCD_print_bottom_menu+0xbc>
		// print a space after the first command
		LCD_print_char(' ');
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	c6 01       	movw	r24, r12
    1492:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	
	for(i = 0; i < max_space; i++)
    1496:	c0 e0       	ldi	r28, 0x00	; 0
    1498:	d0 e0       	ldi	r29, 0x00	; 0
    149a:	ed cf       	rjmp	.-38     	; 0x1476 <LCD_print_bottom_menu+0x8c>
		// print a space after the first command
		LCD_print_char(' ');
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	c6 01       	movw	r24, r12
    14a0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    14a4:	ef cf       	rjmp	.-34     	; 0x1484 <LCD_print_bottom_menu+0x9a>
		// print a space after the first command
		LCD_print_char(' ');
	}
	// print third button command heading
	LCD_print_string(button3,0);
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	08 95       	ret

000014b8 <LCD_print_time_display>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_time_display(time_t current_time, int current_temperature, char *button1, char *button2, char *a1, char *a2 )
{
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	28 97       	sbiw	r28, 0x08	; 8
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	29 83       	std	Y+1, r18	; 0x01
    14e2:	3a 83       	std	Y+2, r19	; 0x02
    14e4:	4b 83       	std	Y+3, r20	; 0x03
    14e6:	6d 83       	std	Y+5, r22	; 0x05
    14e8:	7e 83       	std	Y+6, r23	; 0x06
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	98 87       	std	Y+8, r25	; 0x08
	// Example of Time display
	// Printing time portion
	LCD_goto(0,0);
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_double_number(current_time.hour);
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_char(':');
    1502:	8a e3       	ldi	r24, 0x3A	; 58
    1504:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	LCD_print_double_number(current_time.minute);
    1508:	8e 81       	ldd	r24, Y+6	; 0x06
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_char(':');
    1510:	8a e3       	ldi	r24, 0x3A	; 58
    1512:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	LCD_print_double_number(current_time.second);
    1516:	8f 81       	ldd	r24, Y+7	; 0x07
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_char(' ');
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	if(current_time.AM_PM)
    1524:	88 85       	ldd	r24, Y+8	; 0x08
    1526:	88 23       	and	r24, r24
    1528:	31 f0       	breq	.+12     	; 0x1536 <LCD_print_time_display+0x7e>
	{
		LCD_print_string("PM",0);
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	83 e3       	ldi	r24, 0x33	; 51
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <LCD_print_time_display+0x88>
	}
	else
	{
		LCD_print_string("AM",0);
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	86 e3       	ldi	r24, 0x36	; 54
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	}
	
	// Printing date portion
	LCD_goto(0,2);
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_double_number(current_time.month);
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_char('/');
    1554:	8f e2       	ldi	r24, 0x2F	; 47
    1556:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	LCD_print_double_number(current_time.day);
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_char('/');
    1562:	8f e2       	ldi	r24, 0x2F	; 47
    1564:	0e 94 04 08 	call	0x1008	; 0x1008 <LCD_print_char>
	LCD_print_double_number(current_time.year);
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	
	// Printing Temperature portion
	LCD_goto(64,1);
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_double_number(current_temperature);
    157c:	c8 01       	movw	r24, r16
    157e:	0e 94 be 08 	call	0x117c	; 0x117c <LCD_print_double_number>
	LCD_print_string(" C",0);
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	89 e3       	ldi	r24, 0x39	; 57
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	
	// Printing bottom menu
	LCD_goto(65,4);
    158c:	64 e0       	ldi	r22, 0x04	; 4
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	81 e4       	ldi	r24, 0x41	; 65
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(a1,0);
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	c5 01       	movw	r24, r10
    159c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_print_bottom_menu(button1, button2, a2);
    15a0:	a4 01       	movw	r20, r8
    15a2:	b6 01       	movw	r22, r12
    15a4:	c7 01       	movw	r24, r14
    15a6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <LCD_print_bottom_menu>
}
    15aa:	28 96       	adiw	r28, 0x08	; 8
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	af 90       	pop	r10
    15ca:	9f 90       	pop	r9
    15cc:	8f 90       	pop	r8
    15ce:	08 95       	ret

000015d0 <LCD_print_alarm_display>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_alarm_display(alarm_t alarmtime, uint8_t selection)
{
    15d0:	ef 92       	push	r14
    15d2:	ff 92       	push	r15
    15d4:	0f 93       	push	r16
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	28 97       	sbiw	r28, 0x08	; 8
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	6d 83       	std	Y+5, r22	; 0x05
    15ee:	e2 2e       	mov	r14, r18
    15f0:	13 2f       	mov	r17, r19
    15f2:	f4 2e       	mov	r15, r20
	int i;
	
	LCD_clear_screen();
    15f4:	0e 94 ca 07 	call	0xf94	; 0xf94 <LCD_clear_screen>
	LCD_goto(0,0);
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	if(alarmtime.alarm_number == 1)
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	91 30       	cpi	r25, 0x01	; 1
    1608:	31 f4       	brne	.+12     	; 0x1616 <LCD_print_alarm_display+0x46>
	{
		LCD_print_string("A1:",0);
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	8c e3       	ldi	r24, 0x3C	; 60
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <LCD_print_alarm_display+0x50>
	}
	else
	{
		LCD_print_string("A2:",0);
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	80 e4       	ldi	r24, 0x40	; 64
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	}
	
	switch (selection)
    1620:	01 30       	cpi	r16, 0x01	; 1
    1622:	a1 f1       	breq	.+104    	; 0x168c <LCD_print_alarm_display+0xbc>
    1624:	20 f0       	brcs	.+8      	; 0x162e <LCD_print_alarm_display+0x5e>
    1626:	02 30       	cpi	r16, 0x02	; 2
    1628:	09 f4       	brne	.+2      	; 0x162c <LCD_print_alarm_display+0x5c>
    162a:	5f c0       	rjmp	.+190    	; 0x16ea <LCD_print_alarm_display+0x11a>
    162c:	a7 c0       	rjmp	.+334    	; 0x177c <LCD_print_alarm_display+0x1ac>
	{
		case (MINUTES):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	41 e0       	ldi	r20, 0x01	; 1
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	62 e1       	ldi	r22, 0x12	; 18
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	8e 2d       	mov	r24, r14
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	86 e2       	ldi	r24, 0x26	; 38
    1646:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, INVERTED);
    164a:	01 e0       	ldi	r16, 0x01	; 1
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	6b e2       	ldi	r22, 0x2B	; 43
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	81 2f       	mov	r24, r17
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	81 e3       	ldi	r24, 0x31	; 49
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
			LCD_set_y(2);
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_set_y>
			if(alarmtime.AM_PM){
    1670:	ff 20       	and	r15, r15
    1672:	31 f0       	breq	.+12     	; 0x1680 <LCD_print_alarm_display+0xb0>
				LCD_print_string("PM",0);
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	83 e3       	ldi	r24, 0x33	; 51
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    167e:	7e c0       	rjmp	.+252    	; 0x177c <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_print_string("AM",0);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	86 e3       	ldi	r24, 0x36	; 54
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    168a:	78 c0       	rjmp	.+240    	; 0x177c <LCD_print_alarm_display+0x1ac>
			}
			break;
		case (HOURS):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, INVERTED);
    168c:	01 e0       	ldi	r16, 0x01	; 1
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	41 e0       	ldi	r20, 0x01	; 1
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	62 e1       	ldi	r22, 0x12	; 18
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	8e 2d       	mov	r24, r14
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	86 e2       	ldi	r24, 0x26	; 38
    16a4:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
    16a8:	00 e0       	ldi	r16, 0x00	; 0
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	50 e0       	ldi	r21, 0x00	; 0
    16b0:	6b e2       	ldi	r22, 0x2B	; 43
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	81 2f       	mov	r24, r17
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	81 e3       	ldi	r24, 0x31	; 49
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
			LCD_set_y(2);
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_set_y>
			if(alarmtime.AM_PM){
    16ce:	ff 20       	and	r15, r15
    16d0:	31 f0       	breq	.+12     	; 0x16de <LCD_print_alarm_display+0x10e>
				LCD_print_string("PM",NOTINVERTED);
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	83 e3       	ldi	r24, 0x33	; 51
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    16dc:	4f c0       	rjmp	.+158    	; 0x177c <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_print_string("AM",NOTINVERTED);
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	86 e3       	ldi	r24, 0x36	; 54
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
    16e8:	49 c0       	rjmp	.+146    	; 0x177c <LCD_print_alarm_display+0x1ac>
			}
			break;
		case (AMPM):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	62 e1       	ldi	r22, 0x12	; 18
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	8e 2d       	mov	r24, r14
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	86 e2       	ldi	r24, 0x26	; 38
    1702:	0e 94 9b 09 	call	0x1336	; 0x1336 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	6b e2       	ldi	r22, 0x2B	; 43
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	81 2f       	mov	r24, r17
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 1a 09 	call	0x1234	; 0x1234 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	81 e3       	ldi	r24, 0x31	; 49
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
			LCD_set_y(1);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_set_y>
    172a:	0c e0       	ldi	r16, 0x0C	; 12
    172c:	10 e0       	ldi	r17, 0x00	; 0
			for(i=0;i<12;i++){
				LCD_send_data(0x80);
    172e:	80 e8       	ldi	r24, 0x80	; 128
    1730:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1734:	01 50       	subi	r16, 0x01	; 1
    1736:	11 09       	sbc	r17, r1
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
			LCD_print_large_colon(38,1);
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
			LCD_print_string(" ",0);
			LCD_set_y(1);
			for(i=0;i<12;i++){
    1738:	01 15       	cp	r16, r1
    173a:	11 05       	cpc	r17, r1
    173c:	c1 f7       	brne	.-16     	; 0x172e <LCD_print_alarm_display+0x15e>
				LCD_send_data(0x80);
			}
			LCD_goto(68,2);
    173e:	62 e0       	ldi	r22, 0x02	; 2
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	84 e4       	ldi	r24, 0x44	; 68
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
			if(alarmtime.AM_PM){
    174a:	ff 20       	and	r15, r15
    174c:	61 f0       	breq	.+24     	; 0x1766 <LCD_print_alarm_display+0x196>
				LCD_send_data(0xFF);
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
				LCD_print_string("PM",INVERTED);
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	83 e3       	ldi	r24, 0x33	; 51
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
				LCD_send_data(0xFF);
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
    1764:	0b c0       	rjmp	.+22     	; 0x177c <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_send_data(0xFF);
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
				LCD_print_string("AM",INVERTED);
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	86 e3       	ldi	r24, 0x36	; 54
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
				LCD_send_data(0xFF);
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	0e 94 b7 07 	call	0xf6e	; 0xf6e <LCD_send_data>
			}
			break;
	}
	
	LCD_print_bottom_menu("Down", "Set", "Up");
    177c:	44 e4       	ldi	r20, 0x44	; 68
    177e:	51 e0       	ldi	r21, 0x01	; 1
    1780:	67 e4       	ldi	r22, 0x47	; 71
    1782:	71 e0       	ldi	r23, 0x01	; 1
    1784:	8b e4       	ldi	r24, 0x4B	; 75
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 f5 09 	call	0x13ea	; 0x13ea <LCD_print_bottom_menu>
}
    178c:	28 96       	adiw	r28, 0x08	; 8
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	ff 90       	pop	r15
    17a2:	ef 90       	pop	r14
    17a4:	08 95       	ret

000017a6 <LCD_print_menu>:
Argument(s) : BYTE command_to_send
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_menu(uint8_t selection)
{
    17a6:	cf 93       	push	r28
    17a8:	c8 2f       	mov	r28, r24
	LCD_goto(31,0);
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	8f e1       	ldi	r24, 0x1F	; 31
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[0],selection == 0);
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	c1 11       	cpse	r28, r1
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	80 e5       	ldi	r24, 0x50	; 80
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_goto(23,1);
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	87 e1       	ldi	r24, 0x17	; 23
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[1],selection == 1);
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	c1 30       	cpi	r28, 0x01	; 1
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <LCD_print_menu+0x32>
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	8c e5       	ldi	r24, 0x5C	; 92
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_goto(21,2);
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	85 e1       	ldi	r24, 0x15	; 21
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[2],selection == 2);
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	c2 30       	cpi	r28, 0x02	; 2
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <LCD_print_menu+0x4e>
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	88 e6       	ldi	r24, 0x68	; 104
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_goto(13,3);
    17fc:	63 e0       	ldi	r22, 0x03	; 3
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	8d e0       	ldi	r24, 0x0D	; 13
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[3],selection == 3);
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	c3 30       	cpi	r28, 0x03	; 3
    180c:	09 f0       	breq	.+2      	; 0x1810 <LCD_print_menu+0x6a>
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	84 e7       	ldi	r24, 0x74	; 116
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_goto(13,4);
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	8d e0       	ldi	r24, 0x0D	; 13
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[4],selection == 4);
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	c4 30       	cpi	r28, 0x04	; 4
    1828:	09 f0       	breq	.+2      	; 0x182c <LCD_print_menu+0x86>
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	80 e8       	ldi	r24, 0x80	; 128
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	LCD_goto(31,5);
    1834:	65 e0       	ldi	r22, 0x05	; 5
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	8f e1       	ldi	r24, 0x1F	; 31
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_goto>
	LCD_print_string(menu_text[5],selection == 5);
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	c5 30       	cpi	r28, 0x05	; 5
    1844:	09 f0       	breq	.+2      	; 0x1848 <LCD_print_menu+0xa2>
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	8c e8       	ldi	r24, 0x8C	; 140
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_print_string>
	
}
    1850:	cf 91       	pop	r28
    1852:	08 95       	ret

00001854 <fromBCD>:
Argument(s) : data_in - Raw Data from RTC
Return value : Decoded integer
--------------------------------------------------------------------------------------------------*/

uint8_t fromBCD(uint8_t data_in){
	return ((data_in & 0x0F) + 10*((data_in>>4) & 0x07));
    1854:	98 2f       	mov	r25, r24
    1856:	96 95       	lsr	r25
    1858:	96 95       	lsr	r25
    185a:	96 95       	lsr	r25
    185c:	9e 70       	andi	r25, 0x0E	; 14
    185e:	29 2f       	mov	r18, r25
    1860:	22 0f       	add	r18, r18
    1862:	22 0f       	add	r18, r18
    1864:	92 0f       	add	r25, r18
    1866:	8f 70       	andi	r24, 0x0F	; 15
}
    1868:	89 0f       	add	r24, r25
    186a:	08 95       	ret

0000186c <RTC_Read>:
Argument(s) : Pointer to the time_t data structure used for the current time
Return value : None.
--------------------------------------------------------------------------------------------------*/

void RTC_Read(time_t *times)
{
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
	times->year = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, YEAR_R));
    1872:	66 e0       	ldi	r22, 0x06	; 6
    1874:	88 e6       	ldi	r24, 0x68	; 104
    1876:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    187a:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    187e:	88 83       	st	Y, r24
	times->month = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, MONTH_R));
    1880:	65 e0       	ldi	r22, 0x05	; 5
    1882:	88 e6       	ldi	r24, 0x68	; 104
    1884:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    1888:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    188c:	89 83       	std	Y+1, r24	; 0x01
	times->day = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, DATE_R));
    188e:	64 e0       	ldi	r22, 0x04	; 4
    1890:	88 e6       	ldi	r24, 0x68	; 104
    1892:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    1896:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    189a:	8a 83       	std	Y+2, r24	; 0x02
	times->day_of_week = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, DAY_R));
    189c:	63 e0       	ldi	r22, 0x03	; 3
    189e:	88 e6       	ldi	r24, 0x68	; 104
    18a0:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    18a4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    18a8:	8b 83       	std	Y+3, r24	; 0x03
	times->hour  = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, HOURS_R) & 0x1F);
    18aa:	62 e0       	ldi	r22, 0x02	; 2
    18ac:	88 e6       	ldi	r24, 0x68	; 104
    18ae:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    18b2:	8f 71       	andi	r24, 0x1F	; 31
    18b4:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    18b8:	8c 83       	std	Y+4, r24	; 0x04
	times->minute = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, MINUTES_R));
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	88 e6       	ldi	r24, 0x68	; 104
    18be:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    18c2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    18c6:	8d 83       	std	Y+5, r24	; 0x05
	times->second = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, SECONDS_R));
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	88 e6       	ldi	r24, 0x68	; 104
    18cc:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    18d0:	0e 94 2a 0c 	call	0x1854	; 0x1854 <fromBCD>
    18d4:	8e 83       	std	Y+6, r24	; 0x06
	times->AM_PM = (I2C_RecieveMessage(RTC_ADDRESS, HOURS_R) & _BV(5))>>5;
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	88 e6       	ldi	r24, 0x68	; 104
    18da:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_RecieveMessage>
    18de:	85 fb       	bst	r24, 5
    18e0:	88 27       	eor	r24, r24
    18e2:	80 f9       	bld	r24, 0
    18e4:	8f 83       	std	Y+7, r24	; 0x07
	
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <Timer0_Init>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void Timer0_Init(void){
	//Setup timer 0 w/ interrupt every ms and pre-scale of 64
	TCCR0A = _BV(WGM01);
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = _BV(OCIE0A);
    18f4:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 250;
    18f8:	8a ef       	ldi	r24, 0xFA	; 250
    18fa:	87 bd       	out	0x27, r24	; 39
	TIFR0 |= _BV(OCF0A);
    18fc:	a9 9a       	sbi	0x15, 1	; 21
	TCNT0 = 0;
    18fe:	16 bc       	out	0x26, r1	; 38
    1900:	08 95       	ret

00001902 <Timer2_Init>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void Timer2_Init(void){
	//Setup timer 1 to run in CTC mode 4 with 1024 prescalar
	TCCR2A = _BV(WGM21);
    1902:	82 e0       	ldi	r24, 0x02	; 2
    1904:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= _BV(CS22) | _BV(CS21) | _BV(CS20);
    1908:	e1 eb       	ldi	r30, 0xB1	; 177
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	87 60       	ori	r24, 0x07	; 7
    1910:	80 83       	st	Z, r24
    1912:	08 95       	ret

00001914 <Timer1_Init>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/
void Timer1_Init(void)
{
	DDRB |= _BV(PB1);
    1914:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = _BV(COM1A1);
    1916:	80 e8       	ldi	r24, 0x80	; 128
    1918:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM13);
    191c:	80 e1       	ldi	r24, 0x10	; 16
    191e:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 390;
    1922:	86 e8       	ldi	r24, 0x86	; 134
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	90 93 87 00 	sts	0x0087, r25
    192a:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 90;
    192e:	8a e5       	ldi	r24, 0x5A	; 90
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	90 93 89 00 	sts	0x0089, r25
    1936:	80 93 88 00 	sts	0x0088, r24
    193a:	08 95       	ret

0000193c <hw_delay>:
--------------------------------------------------------------------------------------------------*/
void hw_delay(uint16_t delay_ms)
{
	int i;
	//put delay into output compare register
	OCR2A = 15;
    193c:	2f e0       	ldi	r18, 0x0F	; 15
    193e:	20 93 b3 00 	sts	0x00B3, r18
	//clear output compare flag
	TIFR2 |= _BV(OCF2A);
    1942:	b9 9a       	sbi	0x17, 1	; 23
	//reset timer
	TCNT2 = 0;
    1944:	10 92 b2 00 	sts	0x00B2, r1
	
	for(i = 0; i < delay_ms; i++)
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	51 f0       	breq	.+20     	; 0x1960 <hw_delay+0x24>
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
	{
		//wait for compare flag to be high
		while(!(TIFR2 & _BV(OCF2A)));
    1950:	b9 9b       	sbis	0x17, 1	; 23
    1952:	fe cf       	rjmp	.-4      	; 0x1950 <hw_delay+0x14>
		//clear compare flag
		TIFR2 |= _BV(OCF2A);
    1954:	b9 9a       	sbi	0x17, 1	; 23
	//clear output compare flag
	TIFR2 |= _BV(OCF2A);
	//reset timer
	TCNT2 = 0;
	
	for(i = 0; i < delay_ms; i++)
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	28 17       	cp	r18, r24
    195c:	39 07       	cpc	r19, r25
    195e:	c1 f7       	brne	.-16     	; 0x1950 <hw_delay+0x14>
    1960:	08 95       	ret

00001962 <Timer1PWM_OnOff>:
Description : Function that enables and disables the Timer 1 PWM to turn on and off the bell alarm
Argument(s) : state - 1 turns PWM on and 0 turns PWM off
Return value : None.
--------------------------------------------------------------------------------------------------*/
void Timer1PWM_OnOff(uint8_t state){
	if (state){
    1962:	88 23       	and	r24, r24
    1964:	49 f0       	breq	.+18     	; 0x1978 <Timer1PWM_OnOff+0x16>
		TCCR1B |= _BV(CS12) | _BV(CS10);
    1966:	e1 e8       	ldi	r30, 0x81	; 129
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	85 60       	ori	r24, 0x05	; 5
    196e:	80 83       	st	Z, r24
		TCCR1A = _BV(COM1A1);
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	80 93 80 00 	sts	0x0080, r24
    1976:	08 95       	ret
		
	}
	else{
		TCCR1B &= ~_BV(CS12) & ~_BV(CS10);
    1978:	e1 e8       	ldi	r30, 0x81	; 129
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8a 7f       	andi	r24, 0xFA	; 250
    1980:	80 83       	st	Z, r24
		PORTB &= ~_BV(PB1);	
    1982:	29 98       	cbi	0x05, 1	; 5
		TCCR1A = 0;
    1984:	10 92 80 00 	sts	0x0080, r1
    1988:	08 95       	ret

0000198a <__divmodhi4>:
    198a:	97 fb       	bst	r25, 7
    198c:	07 2e       	mov	r0, r23
    198e:	16 f4       	brtc	.+4      	; 0x1994 <__divmodhi4+0xa>
    1990:	00 94       	com	r0
    1992:	07 d0       	rcall	.+14     	; 0x19a2 <__divmodhi4_neg1>
    1994:	77 fd       	sbrc	r23, 7
    1996:	09 d0       	rcall	.+18     	; 0x19aa <__divmodhi4_neg2>
    1998:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__udivmodhi4>
    199c:	07 fc       	sbrc	r0, 7
    199e:	05 d0       	rcall	.+10     	; 0x19aa <__divmodhi4_neg2>
    19a0:	3e f4       	brtc	.+14     	; 0x19b0 <__divmodhi4_exit>

000019a2 <__divmodhi4_neg1>:
    19a2:	90 95       	com	r25
    19a4:	81 95       	neg	r24
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	08 95       	ret

000019aa <__divmodhi4_neg2>:
    19aa:	70 95       	com	r23
    19ac:	61 95       	neg	r22
    19ae:	7f 4f       	sbci	r23, 0xFF	; 255

000019b0 <__divmodhi4_exit>:
    19b0:	08 95       	ret

000019b2 <__udivmodhi4>:
    19b2:	aa 1b       	sub	r26, r26
    19b4:	bb 1b       	sub	r27, r27
    19b6:	51 e1       	ldi	r21, 0x11	; 17
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <__udivmodhi4_ep>

000019ba <__udivmodhi4_loop>:
    19ba:	aa 1f       	adc	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	a6 17       	cp	r26, r22
    19c0:	b7 07       	cpc	r27, r23
    19c2:	10 f0       	brcs	.+4      	; 0x19c8 <__udivmodhi4_ep>
    19c4:	a6 1b       	sub	r26, r22
    19c6:	b7 0b       	sbc	r27, r23

000019c8 <__udivmodhi4_ep>:
    19c8:	88 1f       	adc	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	5a 95       	dec	r21
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__udivmodhi4_loop>
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	08 95       	ret

000019da <__eerd_byte_m328p>:
    19da:	f9 99       	sbic	0x1f, 1	; 31
    19dc:	fe cf       	rjmp	.-4      	; 0x19da <__eerd_byte_m328p>
    19de:	92 bd       	out	0x22, r25	; 34
    19e0:	81 bd       	out	0x21, r24	; 33
    19e2:	f8 9a       	sbi	0x1f, 0	; 31
    19e4:	99 27       	eor	r25, r25
    19e6:	80 b5       	in	r24, 0x20	; 32
    19e8:	08 95       	ret

000019ea <__eeupd_byte_m328p>:
    19ea:	26 2f       	mov	r18, r22

000019ec <__eeupd_r18_m328p>:
    19ec:	f9 99       	sbic	0x1f, 1	; 31
    19ee:	fe cf       	rjmp	.-4      	; 0x19ec <__eeupd_r18_m328p>
    19f0:	92 bd       	out	0x22, r25	; 34
    19f2:	81 bd       	out	0x21, r24	; 33
    19f4:	f8 9a       	sbi	0x1f, 0	; 31
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	00 b4       	in	r0, 0x20	; 32
    19fa:	02 16       	cp	r0, r18
    19fc:	39 f0       	breq	.+14     	; 0x1a0c <__eeupd_r18_m328p+0x20>
    19fe:	1f ba       	out	0x1f, r1	; 31
    1a00:	20 bd       	out	0x20, r18	; 32
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	fa 9a       	sbi	0x1f, 2	; 31
    1a08:	f9 9a       	sbi	0x1f, 1	; 31
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	08 95       	ret

00001a0e <_exit>:
    1a0e:	f8 94       	cli

00001a10 <__stop_program>:
    1a10:	ff cf       	rjmp	.-2      	; 0x1a10 <__stop_program>
