
EGR 326 - Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00001a7c  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800198  00800198  00001bc8  2**0
                  ALLOC
  3 .eeprom       00000008  00810000  00810000  00001bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d7d  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077c  00000000  00000000  00004bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c6b  00000000  00000000  00005329  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00005f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084b  00000000  00000000  00006674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d91  00000000  00000000  00006ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__ctors_end>
       4:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
       8:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
       c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      10:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      14:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      18:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__vector_6>
      1c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      20:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      24:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      28:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      2c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      30:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      34:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      38:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_14>
      3c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      40:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      44:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      48:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      4c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      50:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      54:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_21>
      58:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      5c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      60:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>
      64:	0c 94 c3 01 	jmp	0x386	; 0x386 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 c0       	rjmp	.+0      	; 0x6a <__trampolines_end+0x2>
      6a:	c0 c0       	rjmp	.+384    	; 0x1ec <smallFont+0x6c>
      6c:	00 00       	nop
      6e:	39 39       	cpi	r19, 0x99	; 153
      70:	39 00       	.word	0x0039	; ????

00000072 <large_font>:
      72:	f0 fc fe 06 02 06 fe fc f0 00 07 1f 3f 30 20 30     ............?0 0
      82:	3f 1f 07 00 10 08 0c fc fe fe 00 00 00 00 20 20     ?.............  
      92:	20 3f 3f 3f 20 20 20 00 0c 0e 06 02 02 86 fe 7c      ???   ........|
      a2:	38 00 30 38 3c 36 33 31 30 30 38 00 0c 0e 86 82     8.08<631008.....
      b2:	82 c6 fe 7c 38 00 18 38 30 20 20 31 3f 1f 0e 00     ...|8..80  1?...
      c2:	00 c0 20 18 04 fe fe fe 00 00 03 02 02 02 22 3f     .. ..........."?
      d2:	3f 3f 22 03 00 fe 7e 46 46 c6 c6 87 00 00 18 38     ??"...~FF......8
      e2:	30 20 20 30 3f 1f 0f 00 c0 f0 f8 bc 4c c6 c2 82     0  0?.......L...
      f2:	00 00 0f 1f 3f 30 20 30 3f 1f 0f 00 0e 06 06 06     ....?0 0?.......
     102:	06 c6 f6 3e 0e 00 00 00 30 3c 0f 03 00 00 00 00     ...>....0<......
     112:	38 7c fe c6 82 c6 fe 7c 38 00 0e 1f 3f 31 20 31     8|.....|8...?1 1
     122:	3f 1f 0e 00 78 fc fe 86 02 86 fe fc f8 00 00 00     ?...x...........
     132:	21 21 31 1c 1f 0f 03 00 00 00 00 00 00 00 00 00     !!1.............
	...

0000014e <single_numbers>:
     14e:	3e 41 41 41 3e 00 42 7f 40 00 42 61 51 49 46 21     >AAA>.B.@.BaQIF!
     15e:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     16e:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     17e:	29 1e                                               ).

00000180 <smallFont>:
     180:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     190:	7f 14 7f 14 24 2a 7f 2a 12 c4 c8 10 26 46 36 49     ....$*.*....&F6I
     1a0:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     1b0:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     1c0:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     1d0:	3e 41 41 41 3e 00 42 7f 40 00 42 61 51 49 46 21     >AAA>.B.@.BaQIF!
     1e0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     1f0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     200:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     210:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     220:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     230:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     240:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     250:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     260:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     270:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     280:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     290:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     2a0:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     2b0:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     2c0:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     2d0:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     2e0:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     2f0:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     300:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     310:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     320:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     330:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     340:	50 3c 44 64 54 4c 44 00 06 09 09 06                 P<DdTLD.....

0000034c <__ctors_end>:
     34c:	11 24       	eor	r1, r1
     34e:	1f be       	out	0x3f, r1	; 63
     350:	cf ef       	ldi	r28, 0xFF	; 255
     352:	d8 e0       	ldi	r29, 0x08	; 8
     354:	de bf       	out	0x3e, r29	; 62
     356:	cd bf       	out	0x3d, r28	; 61

00000358 <__do_copy_data>:
     358:	11 e0       	ldi	r17, 0x01	; 1
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b1 e0       	ldi	r27, 0x01	; 1
     35e:	ec e7       	ldi	r30, 0x7C	; 124
     360:	fa e1       	ldi	r31, 0x1A	; 26
     362:	02 c0       	rjmp	.+4      	; 0x368 <__do_copy_data+0x10>
     364:	05 90       	lpm	r0, Z+
     366:	0d 92       	st	X+, r0
     368:	a8 39       	cpi	r26, 0x98	; 152
     36a:	b1 07       	cpc	r27, r17
     36c:	d9 f7       	brne	.-10     	; 0x364 <__do_copy_data+0xc>

0000036e <__do_clear_bss>:
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	a8 e9       	ldi	r26, 0x98	; 152
     372:	b1 e0       	ldi	r27, 0x01	; 1
     374:	01 c0       	rjmp	.+2      	; 0x378 <.do_clear_bss_start>

00000376 <.do_clear_bss_loop>:
     376:	1d 92       	st	X+, r1

00000378 <.do_clear_bss_start>:
     378:	a7 3d       	cpi	r26, 0xD7	; 215
     37a:	b2 07       	cpc	r27, r18
     37c:	e1 f7       	brne	.-8      	; 0x376 <.do_clear_bss_loop>
     37e:	0e 94 38 02 	call	0x470	; 0x470 <main>
     382:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_exit>

00000386 <__bad_interrupt>:
     386:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000038a <BUTTON_init>:

void BUTTON_init()
{
	//Note: Still need to add switches and LEDs
// Setting data direction for buttons and switches as inputs (already set to zero)
BUTTON_DD_1 &= ~_BV(BUTTON_1);
     38a:	50 98       	cbi	0x0a, 0	; 10
BUTTON_DD_2 &= ~_BV(BUTTON_2);
     38c:	51 98       	cbi	0x0a, 1	; 10
BUTTON_DD_3 &= ~_BV(BUTTON_3);
     38e:	55 98       	cbi	0x0a, 5	; 10
SWITCH_DD_1 &= ~_BV(SWITCH_1);
     390:	56 98       	cbi	0x0a, 6	; 10
SWITCH_DD_2 &= ~_BV(SWITCH_2);
     392:	57 98       	cbi	0x0a, 7	; 10

// Enabling internal pull-up resistor on pins attached to buttons and switches
BUTTONS_PORT |= _BV(BUTTON_1);     
     394:	58 9a       	sbi	0x0b, 0	; 11
BUTTONS_PORT |= _BV(BUTTON_2);
     396:	59 9a       	sbi	0x0b, 1	; 11
BUTTONS_PORT |= _BV(BUTTON_3);
     398:	5d 9a       	sbi	0x0b, 5	; 11
BUTTONS_PORT |= _BV(SWITCH_1);
     39a:	5e 9a       	sbi	0x0b, 6	; 11
BUTTONS_PORT |= _BV(SWITCH_2);
     39c:	5f 9a       	sbi	0x0b, 7	; 11

//Setting data directions for LEDs
DDRC |= _BV(LED_RADIO);
     39e:	3b 9a       	sbi	0x07, 3	; 7
DDRC |= _BV(LED_STEREO);
     3a0:	3e 9a       	sbi	0x07, 6	; 7

//Turn LEDs off initially
LED_RADIO_OFF;
     3a2:	43 9a       	sbi	0x08, 3	; 8
LED_STEREO_OFF;
     3a4:	46 9a       	sbi	0x08, 6	; 8
     3a6:	08 95       	ret

000003a8 <eeprom_GetAlarm>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void eeprom_GetAlarm(void){
	// Read alarm time from EEPROM
	alarmtime1.hour = (uint8_t)eeprom_read_byte(&alarm_hour1);
     3a8:	87 e0       	ldi	r24, 0x07	; 7
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3b0:	80 93 b3 01 	sts	0x01B3, r24
	alarmtime1.minute = (uint8_t)eeprom_read_byte(&alarm_minute1);
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3bc:	80 93 b4 01 	sts	0x01B4, r24
	alarmtime1.AM_PM = (uint8_t)eeprom_read_byte(&alarm_AM_PM1);
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3c8:	80 93 b5 01 	sts	0x01B5, r24
	alarmtime1.on_off = (uint8_t)eeprom_read_byte(&alarm_onoff1);
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3d4:	80 93 b6 01 	sts	0x01B6, r24
	alarmtime2.hour = (uint8_t)eeprom_read_byte(&alarm_hour2);
     3d8:	83 e0       	ldi	r24, 0x03	; 3
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3e0:	80 93 cf 01 	sts	0x01CF, r24
	alarmtime2.minute = (uint8_t)eeprom_read_byte(&alarm_minute2);
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3ec:	80 93 d0 01 	sts	0x01D0, r24
	alarmtime2.AM_PM = (uint8_t)eeprom_read_byte(&alarm_AM_PM2);
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     3f8:	80 93 d1 01 	sts	0x01D1, r24
	alarmtime2.on_off = (uint8_t)eeprom_read_byte(&alarm_onoff2);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__eerd_byte_m328p>
     404:	80 93 d2 01 	sts	0x01D2, r24
     408:	08 95       	ret

0000040a <eeprom_SetAlarm>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void eeprom_SetAlarm(void){
	//store alarm time
	eeprom_update_byte(&alarm_hour1, alarmtime1.hour);
     40a:	60 91 b3 01 	lds	r22, 0x01B3
     40e:	87 e0       	ldi	r24, 0x07	; 7
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_minute1, alarmtime1.minute);
     416:	60 91 b4 01 	lds	r22, 0x01B4
     41a:	86 e0       	ldi	r24, 0x06	; 6
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_AM_PM1, alarmtime1.AM_PM);
     422:	60 91 b5 01 	lds	r22, 0x01B5
     426:	85 e0       	ldi	r24, 0x05	; 5
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_hour2, alarmtime2.hour);
     42e:	60 91 cf 01 	lds	r22, 0x01CF
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_minute2, alarmtime2.minute);
     43a:	60 91 d0 01 	lds	r22, 0x01D0
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
	eeprom_update_byte(&alarm_AM_PM2, alarmtime2.AM_PM);
     446:	60 91 d1 01 	lds	r22, 0x01D1
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
     452:	08 95       	ret

00000454 <WDT_Init>:

void WDT_Init(void)
{
	
	//reset watchdog
	wdt_disable();
     454:	88 e1       	ldi	r24, 0x18	; 24
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	80 93 60 00 	sts	0x0060, r24
     45e:	10 92 60 00 	sts	0x0060, r1
     462:	0f be       	out	0x3f, r0	; 63
	//set up WDT interrupt
	WDTCSR = (1<<WDCE)|(1<<WDE);
     464:	e0 e6       	ldi	r30, 0x60	; 96
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 83       	st	Z, r24
	//Start watchdog timer with 4s prescaller
	WDTCSR = (1<<WDIE)|(1<<WDP3);
     46a:	80 e6       	ldi	r24, 0x60	; 96
     46c:	80 83       	st	Z, r24
     46e:	08 95       	ret

00000470 <main>:
--------------------------------------------------------------------------------------------------*/

int main(void)
{
	//initialize peripherals, timers and buttons/switches
	cli();
     470:	f8 94       	cli
	Timer0_Init();
     472:	0e 94 4a 0c 	call	0x1894	; 0x1894 <Timer0_Init>
	Timer1_Init();
     476:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <Timer1_Init>
	Timer2_Init();
     47a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <Timer2_Init>
	WDT_Init();
     47e:	0e 94 2a 02 	call	0x454	; 0x454 <WDT_Init>
	//I2C_Init();
	i2c_init();
     482:	0e 94 99 0c 	call	0x1932	; 0x1932 <i2c_init>
	BUTTON_init();
     486:	0e 94 c5 01 	call	0x38a	; 0x38a <BUTTON_init>
	LCD_SPI_initialize();
     48a:	0e 94 7b 07 	call	0xef6	; 0xef6 <LCD_SPI_initialize>
	LCD_initialize();
     48e:	0e 94 b4 07 	call	0xf68	; 0xf68 <LCD_initialize>
	//FM_Init(); Yet to be implemented
	//ADC_Init(); Yet to be implemented
	sei();
     492:	78 94       	sei
	RTC_Set(currenttime);
	*/
	
	
	// Read alarm time from EEPROM
	eeprom_GetAlarm();
     494:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <eeprom_GetAlarm>
	//Clear out random stuff when re-programming
	alarmtime1.on_off &= 0x01;
     498:	e6 eb       	ldi	r30, 0xB6	; 182
     49a:	f1 e0       	ldi	r31, 0x01	; 1
     49c:	80 81       	ld	r24, Z
     49e:	81 70       	andi	r24, 0x01	; 1
     4a0:	80 83       	st	Z, r24
	alarmtime2.on_off &= 0x01;
     4a2:	e2 ed       	ldi	r30, 0xD2	; 210
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	20 81       	ld	r18, Z
     4a8:	21 70       	andi	r18, 0x01	; 1
     4aa:	20 83       	st	Z, r18
	alarmtime1.alarm_number = 1;
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	90 93 b7 01 	sts	0x01B7, r25
	alarmtime2.alarm_number = 2;
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	90 93 d3 01 	sts	0x01D3, r25
	//alarmtime1.music_bell;
	
	//Set alarm string to proper value, should be replaced by cute symbol
	if(alarmtime1.on_off){
     4b8:	88 23       	and	r24, r24
     4ba:	69 f0       	breq	.+26     	; 0x4d6 <main+0x66>
		strcpy(string_alarm_onoff1,on);
     4bc:	8f e4       	ldi	r24, 0x4F	; 79
     4be:	9e e4       	ldi	r25, 0x4E	; 78
     4c0:	a0 e2       	ldi	r26, 0x20	; 32
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	80 93 c5 01 	sts	0x01C5, r24
     4c8:	90 93 c6 01 	sts	0x01C6, r25
     4cc:	a0 93 c7 01 	sts	0x01C7, r26
     4d0:	b0 93 c8 01 	sts	0x01C8, r27
     4d4:	0c c0       	rjmp	.+24     	; 0x4ee <main+0x7e>
	}
	else
	{
		strcpy(string_alarm_onoff1,off);
     4d6:	8f e4       	ldi	r24, 0x4F	; 79
     4d8:	96 e4       	ldi	r25, 0x46	; 70
     4da:	a6 e4       	ldi	r26, 0x46	; 70
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	80 93 c5 01 	sts	0x01C5, r24
     4e2:	90 93 c6 01 	sts	0x01C6, r25
     4e6:	a0 93 c7 01 	sts	0x01C7, r26
     4ea:	b0 93 c8 01 	sts	0x01C8, r27
	}
	if(alarmtime2.on_off){
     4ee:	22 23       	and	r18, r18
     4f0:	69 f0       	breq	.+26     	; 0x50c <main+0x9c>
		strcpy(string_alarm_onoff2,on);
     4f2:	8f e4       	ldi	r24, 0x4F	; 79
     4f4:	9e e4       	ldi	r25, 0x4E	; 78
     4f6:	a0 e2       	ldi	r26, 0x20	; 32
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	80 93 bb 01 	sts	0x01BB, r24
     4fe:	90 93 bc 01 	sts	0x01BC, r25
     502:	a0 93 bd 01 	sts	0x01BD, r26
     506:	b0 93 be 01 	sts	0x01BE, r27
     50a:	0c c0       	rjmp	.+24     	; 0x524 <main+0xb4>
	}
	else
	{
		strcpy(string_alarm_onoff2,off);
     50c:	8f e4       	ldi	r24, 0x4F	; 79
     50e:	96 e4       	ldi	r25, 0x46	; 70
     510:	a6 e4       	ldi	r26, 0x46	; 70
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	80 93 bb 01 	sts	0x01BB, r24
     518:	90 93 bc 01 	sts	0x01BC, r25
     51c:	a0 93 bd 01 	sts	0x01BD, r26
     520:	b0 93 be 01 	sts	0x01BE, r27
		Timer1PWM_OnOff(PWM_OFF);
		CLEAR_BUTTONS;
		//WDT_RESET;
	}
	
	if((alarmtime2.hour == times.hour) && (alarmtime2.minute == times.minute) && (alarmtime2.AM_PM == times.AM_PM)
     524:	cf ec       	ldi	r28, 0xCF	; 207
     526:	d1 e0       	ldi	r29, 0x01	; 1
     528:	0f 2e       	mov	r0, r31
     52a:	f0 ed       	ldi	r31, 0xD0	; 208
     52c:	6f 2e       	mov	r6, r31
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	7f 2e       	mov	r7, r31
     532:	f0 2d       	mov	r31, r0
     534:	0f 2e       	mov	r0, r31
     536:	f1 ed       	ldi	r31, 0xD1	; 209
     538:	4f 2e       	mov	r4, r31
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	5f 2e       	mov	r5, r31
     53e:	f0 2d       	mov	r31, r0
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void check_alarms(void){
	//check if alarm 1 has gone off
	if((alarmtime1.hour == times.hour) && (alarmtime1.minute == times.minute) && (alarmtime1.AM_PM == times.AM_PM)
     540:	0f 2e       	mov	r0, r31
     542:	f5 eb       	ldi	r31, 0xB5	; 181
     544:	2f 2e       	mov	r2, r31
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	3f 2e       	mov	r3, r31
     54a:	f0 2d       	mov	r31, r0
	
	while(1)
	{
		//Main switch for turning on radio, toggling presets, entering
		// the menu, and toggling alarms on and off
		switch (g_button_pressed){
     54c:	80 91 a2 01 	lds	r24, 0x01A2
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	09 f4       	brne	.+2      	; 0x556 <main+0xe6>
     554:	c7 c2       	rjmp	.+1422   	; 0xae4 <__stack+0x1e5>
     556:	28 f4       	brcc	.+10     	; 0x562 <main+0xf2>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	69 f0       	breq	.+26     	; 0x576 <main+0x106>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	71 f0       	breq	.+28     	; 0x57c <main+0x10c>
     560:	1d c3       	rjmp	.+1594   	; 0xb9c <__stack+0x29d>
     562:	86 30       	cpi	r24, 0x06	; 6
     564:	09 f4       	brne	.+2      	; 0x568 <main+0xf8>
     566:	ef c2       	rjmp	.+1502   	; 0xb46 <__stack+0x247>
     568:	80 33       	cpi	r24, 0x30	; 48
     56a:	09 f4       	brne	.+2      	; 0x56e <main+0xfe>
     56c:	e6 c2       	rjmp	.+1484   	; 0xb3a <__stack+0x23b>
     56e:	85 30       	cpi	r24, 0x05	; 5
     570:	09 f0       	breq	.+2      	; 0x574 <main+0x104>
     572:	14 c3       	rjmp	.+1576   	; 0xb9c <__stack+0x29d>
     574:	e5 c2       	rjmp	.+1482   	; 0xb40 <__stack+0x241>
			//button one pressed
			case (B1):
				CLEAR_BUTTONS;
     576:	10 92 a2 01 	sts	0x01A2, r1
				//toggle presets
				break;
     57a:	e8 cf       	rjmp	.-48     	; 0x54c <main+0xdc>
			//button 2 pressed, enter menu
			case (B2):
				CLEAR_BUTTONS;
     57c:	10 92 a2 01 	sts	0x01A2, r1
				//Set menu loop variable
				menufresh = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 9f 01 	sts	0x019F, r24
				//Set the select to first element in the menu
				menu_current = 0;
     586:	10 92 9e 01 	sts	0x019E, r1
     58a:	10 92 9d 01 	sts	0x019D, r1
				LCD_clear_screen();
     58e:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
				{
					//print menu with current selection inverted
					LCD_print_menu(menu_current);
     592:	0f 2e       	mov	r0, r31
     594:	fd e9       	ldi	r31, 0x9D	; 157
     596:	ef 2e       	mov	r14, r31
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	ff 2e       	mov	r15, r31
     59c:	f0 2d       	mov	r31, r0
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     59e:	0f 2e       	mov	r0, r31
     5a0:	f4 eb       	ldi	r31, 0xB4	; 180
     5a2:	af 2e       	mov	r10, r31
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	bf 2e       	mov	r11, r31
     5a8:	f0 2d       	mov	r31, r0
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f3 eb       	ldi	r31, 0xB3	; 179
     5ae:	cf 2e       	mov	r12, r31
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	df 2e       	mov	r13, r31
     5b4:	f0 2d       	mov	r31, r0
				//Set the select to first element in the menu
				menu_current = 0;
				LCD_clear_screen();
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
     5b6:	8b c2       	rjmp	.+1302   	; 0xace <__stack+0x1cf>
				{
					//print menu with current selection inverted
					LCD_print_menu(menu_current);
     5b8:	d7 01       	movw	r26, r14
     5ba:	8c 91       	ld	r24, X
     5bc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_print_menu>
					switch(g_button_pressed){
     5c0:	80 91 a2 01 	lds	r24, 0x01A2
     5c4:	82 30       	cpi	r24, 0x02	; 2
     5c6:	91 f0       	breq	.+36     	; 0x5ec <main+0x17c>
     5c8:	83 30       	cpi	r24, 0x03	; 3
     5ca:	09 f4       	brne	.+2      	; 0x5ce <main+0x15e>
     5cc:	61 c2       	rjmp	.+1218   	; 0xa90 <__stack+0x191>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	09 f0       	breq	.+2      	; 0x5d4 <main+0x164>
     5d2:	69 c2       	rjmp	.+1234   	; 0xaa6 <__stack+0x1a7>
						//move one selection up in menu
						case (B1):
							CLEAR_BUTTONS;
     5d4:	10 92 a2 01 	sts	0x01A2, r1
							menu_current = menu_current-1;
     5d8:	80 91 9d 01 	lds	r24, 0x019D
     5dc:	90 91 9e 01 	lds	r25, 0x019E
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	90 93 9e 01 	sts	0x019E, r25
     5e6:	80 93 9d 01 	sts	0x019D, r24
							break;
     5ea:	5d c2       	rjmp	.+1210   	; 0xaa6 <__stack+0x1a7>
						//enter state for current menu selection
						case (B2):
							CLEAR_BUTTONS;
     5ec:	10 92 a2 01 	sts	0x01A2, r1
							switch(menu_current)
     5f0:	80 91 9d 01 	lds	r24, 0x019D
     5f4:	90 91 9e 01 	lds	r25, 0x019E
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f4       	brne	.+2      	; 0x600 <main+0x190>
     5fe:	26 c1       	rjmp	.+588    	; 0x84c <main+0x3dc>
     600:	85 30       	cpi	r24, 0x05	; 5
     602:	91 05       	cpc	r25, r1
     604:	09 f4       	brne	.+2      	; 0x608 <main+0x198>
     606:	3f c2       	rjmp	.+1150   	; 0xa86 <__stack+0x187>
     608:	03 97       	sbiw	r24, 0x03	; 3
     60a:	09 f0       	breq	.+2      	; 0x60e <main+0x19e>
     60c:	4c c2       	rjmp	.+1176   	; 0xaa6 <__stack+0x1a7>
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
     60e:	01 e0       	ldi	r16, 0x01	; 1
     610:	20 91 b3 01 	lds	r18, 0x01B3
     614:	30 91 b4 01 	lds	r19, 0x01B4
     618:	40 91 b5 01 	lds	r20, 0x01B5
     61c:	50 91 b6 01 	lds	r21, 0x01B6
     620:	60 91 b7 01 	lds	r22, 0x01B7
     624:	70 91 b8 01 	lds	r23, 0x01B8
     628:	80 91 b9 01 	lds	r24, 0x01B9
     62c:	90 91 ba 01 	lds	r25, 0x01BA
     630:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
	CLEAR_BUTTONS;
     634:	10 92 a2 01 	sts	0x01A2, r1
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     638:	80 91 9c 01 	lds	r24, 0x019C
     63c:	8f 30       	cpi	r24, 0x0F	; 15
     63e:	08 f0       	brcs	.+2      	; 0x642 <main+0x1d2>
     640:	4e c0       	rjmp	.+156    	; 0x6de <main+0x26e>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
				alarmtime->hour = 13;
     642:	1d e0       	ldi	r17, 0x0D	; 13
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <main+0x254>
inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	19 f0       	breq	.+6      	; 0x650 <main+0x1e0>
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	f1 f0       	breq	.+60     	; 0x68a <main+0x21a>
     64e:	3a c0       	rjmp	.+116    	; 0x6c4 <main+0x254>
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     650:	f6 01       	movw	r30, r12
     652:	80 81       	ld	r24, Z
     654:	81 11       	cpse	r24, r1
     656:	02 c0       	rjmp	.+4      	; 0x65c <main+0x1ec>
				alarmtime->hour = 13;
     658:	10 83       	st	Z, r17
     65a:	34 c0       	rjmp	.+104    	; 0x6c4 <main+0x254>
				break;
			}
			alarmtime->hour = alarmtime->hour - 1;
     65c:	81 50       	subi	r24, 0x01	; 1
     65e:	28 2f       	mov	r18, r24
     660:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,HOURS);
     662:	01 e0       	ldi	r16, 0x01	; 1
     664:	30 91 b4 01 	lds	r19, 0x01B4
     668:	40 91 b5 01 	lds	r20, 0x01B5
     66c:	50 91 b6 01 	lds	r21, 0x01B6
     670:	60 91 b7 01 	lds	r22, 0x01B7
     674:	70 91 b8 01 	lds	r23, 0x01B8
     678:	80 91 b9 01 	lds	r24, 0x01B9
     67c:	90 91 ba 01 	lds	r25, 0x01BA
     680:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     684:	10 92 a2 01 	sts	0x01A2, r1
     688:	1d c0       	rjmp	.+58     	; 0x6c4 <main+0x254>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     68a:	f6 01       	movw	r30, r12
     68c:	80 81       	ld	r24, Z
     68e:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->hour >= 13){
     690:	8d 30       	cpi	r24, 0x0D	; 13
     692:	10 f4       	brcc	.+4      	; 0x698 <main+0x228>
			LCD_print_alarm_display(*alarmtime,HOURS);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     694:	80 83       	st	Z, r24
     696:	01 c0       	rjmp	.+2      	; 0x69a <main+0x22a>
			if(alarmtime->hour >= 13){
				alarmtime->hour = 0;
     698:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,HOURS);
     69a:	01 e0       	ldi	r16, 0x01	; 1
     69c:	20 91 b3 01 	lds	r18, 0x01B3
     6a0:	30 91 b4 01 	lds	r19, 0x01B4
     6a4:	40 91 b5 01 	lds	r20, 0x01B5
     6a8:	50 91 b6 01 	lds	r21, 0x01B6
     6ac:	60 91 b7 01 	lds	r22, 0x01B7
     6b0:	70 91 b8 01 	lds	r23, 0x01B8
     6b4:	80 91 b9 01 	lds	r24, 0x01B9
     6b8:	90 91 ba 01 	lds	r25, 0x01BA
     6bc:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     6c0:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     6cc:	80 91 a2 01 	lds	r24, 0x01A2
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	29 f0       	breq	.+10     	; 0x6de <main+0x26e>
     6d4:	90 91 9c 01 	lds	r25, 0x019C
     6d8:	9f 30       	cpi	r25, 0x0F	; 15
     6da:	08 f4       	brcc	.+2      	; 0x6de <main+0x26e>
     6dc:	b4 cf       	rjmp	.-152    	; 0x646 <main+0x1d6>
			CLEAR_BUTTONS;
			break;
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
     6de:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,MINUTES);
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	20 91 b3 01 	lds	r18, 0x01B3
     6e8:	30 91 b4 01 	lds	r19, 0x01B4
     6ec:	40 91 b5 01 	lds	r20, 0x01B5
     6f0:	50 91 b6 01 	lds	r21, 0x01B6
     6f4:	60 91 b7 01 	lds	r22, 0x01B7
     6f8:	70 91 b8 01 	lds	r23, 0x01B8
     6fc:	80 91 b9 01 	lds	r24, 0x01B9
     700:	90 91 ba 01 	lds	r25, 0x01BA
     704:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     708:	80 91 a2 01 	lds	r24, 0x01A2
     70c:	82 30       	cpi	r24, 0x02	; 2
     70e:	09 f4       	brne	.+2      	; 0x712 <main+0x2a2>
     710:	52 c0       	rjmp	.+164    	; 0x7b6 <main+0x346>
     712:	90 91 9c 01 	lds	r25, 0x019C
     716:	9f 30       	cpi	r25, 0x0F	; 15
     718:	08 f0       	brcs	.+2      	; 0x71c <main+0x2ac>
     71a:	4d c0       	rjmp	.+154    	; 0x7b6 <main+0x346>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
				alarmtime->minute = 60;
     71c:	1c e3       	ldi	r17, 0x3C	; 60
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	19 f0       	breq	.+6      	; 0x728 <main+0x2b8>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	f1 f0       	breq	.+60     	; 0x762 <main+0x2f2>
     726:	3a c0       	rjmp	.+116    	; 0x79c <main+0x32c>
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     728:	f5 01       	movw	r30, r10
     72a:	80 81       	ld	r24, Z
     72c:	81 11       	cpse	r24, r1
     72e:	02 c0       	rjmp	.+4      	; 0x734 <main+0x2c4>
				alarmtime->minute = 60;
     730:	10 83       	st	Z, r17
     732:	34 c0       	rjmp	.+104    	; 0x79c <main+0x32c>
				break;
			}
			alarmtime->minute = alarmtime->minute - 1;
     734:	81 50       	subi	r24, 0x01	; 1
     736:	38 2f       	mov	r19, r24
     738:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,MINUTES);
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	20 91 b3 01 	lds	r18, 0x01B3
     740:	40 91 b5 01 	lds	r20, 0x01B5
     744:	50 91 b6 01 	lds	r21, 0x01B6
     748:	60 91 b7 01 	lds	r22, 0x01B7
     74c:	70 91 b8 01 	lds	r23, 0x01B8
     750:	80 91 b9 01 	lds	r24, 0x01B9
     754:	90 91 ba 01 	lds	r25, 0x01BA
     758:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     75c:	10 92 a2 01 	sts	0x01A2, r1
     760:	1d c0       	rjmp	.+58     	; 0x79c <main+0x32c>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     762:	f5 01       	movw	r30, r10
     764:	80 81       	ld	r24, Z
     766:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->minute >= 60){
     768:	8c 33       	cpi	r24, 0x3C	; 60
     76a:	10 f4       	brcc	.+4      	; 0x770 <main+0x300>
			LCD_print_alarm_display(*alarmtime,MINUTES);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     76c:	80 83       	st	Z, r24
     76e:	01 c0       	rjmp	.+2      	; 0x772 <main+0x302>
			if(alarmtime->minute >= 60){
				alarmtime->minute = 0;
     770:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,MINUTES);
     772:	00 e0       	ldi	r16, 0x00	; 0
     774:	20 91 b3 01 	lds	r18, 0x01B3
     778:	30 91 b4 01 	lds	r19, 0x01B4
     77c:	40 91 b5 01 	lds	r20, 0x01B5
     780:	50 91 b6 01 	lds	r21, 0x01B6
     784:	60 91 b7 01 	lds	r22, 0x01B7
     788:	70 91 b8 01 	lds	r23, 0x01B8
     78c:	80 91 b9 01 	lds	r24, 0x01B9
     790:	90 91 ba 01 	lds	r25, 0x01BA
     794:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     798:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     7a4:	80 91 a2 01 	lds	r24, 0x01A2
     7a8:	82 30       	cpi	r24, 0x02	; 2
     7aa:	29 f0       	breq	.+10     	; 0x7b6 <main+0x346>
     7ac:	90 91 9c 01 	lds	r25, 0x019C
     7b0:	9f 30       	cpi	r25, 0x0F	; 15
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <main+0x346>
     7b4:	b4 cf       	rjmp	.-152    	; 0x71e <main+0x2ae>
			break;
		}
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
     7b6:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,AMPM);
     7ba:	02 e0       	ldi	r16, 0x02	; 2
     7bc:	20 91 b3 01 	lds	r18, 0x01B3
     7c0:	30 91 b4 01 	lds	r19, 0x01B4
     7c4:	40 91 b5 01 	lds	r20, 0x01B5
     7c8:	50 91 b6 01 	lds	r21, 0x01B6
     7cc:	60 91 b7 01 	lds	r22, 0x01B7
     7d0:	70 91 b8 01 	lds	r23, 0x01B8
     7d4:	80 91 b9 01 	lds	r24, 0x01B9
     7d8:	90 91 ba 01 	lds	r25, 0x01BA
     7dc:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
     7e0:	26 c0       	rjmp	.+76     	; 0x82e <main+0x3be>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		hw_delay(5);
     7e2:	85 e0       	ldi	r24, 0x05	; 5
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
     7ea:	80 91 a2 01 	lds	r24, 0x01A2
     7ee:	8d 7f       	andi	r24, 0xFD	; 253
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	e9 f4       	brne	.+58     	; 0x82e <main+0x3be>
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     7f4:	f1 01       	movw	r30, r2
     7f6:	80 81       	ld	r24, Z
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->AM_PM >= 2){
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	10 f4       	brcc	.+4      	; 0x802 <main+0x392>
	{
		hw_delay(5);
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     7fe:	80 83       	st	Z, r24
     800:	01 c0       	rjmp	.+2      	; 0x804 <main+0x394>
			if(alarmtime->AM_PM >= 2){
				alarmtime->AM_PM = 0;
     802:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,AMPM);
     804:	02 e0       	ldi	r16, 0x02	; 2
     806:	20 91 b3 01 	lds	r18, 0x01B3
     80a:	30 91 b4 01 	lds	r19, 0x01B4
     80e:	40 91 b5 01 	lds	r20, 0x01B5
     812:	50 91 b6 01 	lds	r21, 0x01B6
     816:	60 91 b7 01 	lds	r22, 0x01B7
     81a:	70 91 b8 01 	lds	r23, 0x01B8
     81e:	80 91 b9 01 	lds	r24, 0x01B9
     822:	90 91 ba 01 	lds	r25, 0x01BA
     826:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     82a:	10 92 a2 01 	sts	0x01A2, r1
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,AMPM);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     82e:	80 91 a2 01 	lds	r24, 0x01A2
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	21 f0       	breq	.+8      	; 0x83e <main+0x3ce>
     836:	80 91 9c 01 	lds	r24, 0x019C
     83a:	8f 30       	cpi	r24, 0x0F	; 15
     83c:	90 f2       	brcs	.-92     	; 0x7e2 <main+0x372>
			CLEAR_BUTTONS;
		}
		// Update alarm set time in EEPROM
	}
	//store new alarm time in EEPROM
	eeprom_SetAlarm();
     83e:	0e 94 05 02 	call	0x40a	; 0x40a <eeprom_SetAlarm>
	CLEAR_BUTTONS;
     842:	10 92 a2 01 	sts	0x01A2, r1
	LCD_clear_screen();
     846:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
     84a:	2d c1       	rjmp	.+602    	; 0xaa6 <__stack+0x1a7>
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
     84c:	01 e0       	ldi	r16, 0x01	; 1
     84e:	20 91 cf 01 	lds	r18, 0x01CF
     852:	30 91 d0 01 	lds	r19, 0x01D0
     856:	40 91 d1 01 	lds	r20, 0x01D1
     85a:	50 91 d2 01 	lds	r21, 0x01D2
     85e:	60 91 d3 01 	lds	r22, 0x01D3
     862:	70 91 d4 01 	lds	r23, 0x01D4
     866:	80 91 d5 01 	lds	r24, 0x01D5
     86a:	90 91 d6 01 	lds	r25, 0x01D6
     86e:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
	CLEAR_BUTTONS;
     872:	10 92 a2 01 	sts	0x01A2, r1
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     876:	80 91 9c 01 	lds	r24, 0x019C
     87a:	8f 30       	cpi	r24, 0x0F	; 15
     87c:	08 f0       	brcs	.+2      	; 0x880 <main+0x410>
     87e:	4c c0       	rjmp	.+152    	; 0x918 <__stack+0x19>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
				alarmtime->hour = 13;
     880:	1d e0       	ldi	r17, 0x0D	; 13
     882:	3d c0       	rjmp	.+122    	; 0x8fe <main+0x48e>
inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	19 f0       	breq	.+6      	; 0x88e <main+0x41e>
     888:	83 30       	cpi	r24, 0x03	; 3
     88a:	e9 f0       	breq	.+58     	; 0x8c6 <main+0x456>
     88c:	38 c0       	rjmp	.+112    	; 0x8fe <main+0x48e>
			case(B1):
			//WDT_RESET;
			if(alarmtime->hour <= 0){
     88e:	88 81       	ld	r24, Y
     890:	81 11       	cpse	r24, r1
     892:	02 c0       	rjmp	.+4      	; 0x898 <main+0x428>
				alarmtime->hour = 13;
     894:	18 83       	st	Y, r17
     896:	33 c0       	rjmp	.+102    	; 0x8fe <main+0x48e>
				break;
			}
			alarmtime->hour = alarmtime->hour - 1;
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	28 2f       	mov	r18, r24
     89c:	88 83       	st	Y, r24
			LCD_print_alarm_display(*alarmtime,HOURS);
     89e:	01 e0       	ldi	r16, 0x01	; 1
     8a0:	30 91 d0 01 	lds	r19, 0x01D0
     8a4:	40 91 d1 01 	lds	r20, 0x01D1
     8a8:	50 91 d2 01 	lds	r21, 0x01D2
     8ac:	60 91 d3 01 	lds	r22, 0x01D3
     8b0:	70 91 d4 01 	lds	r23, 0x01D4
     8b4:	80 91 d5 01 	lds	r24, 0x01D5
     8b8:	90 91 d6 01 	lds	r25, 0x01D6
     8bc:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     8c0:	10 92 a2 01 	sts	0x01A2, r1
     8c4:	1c c0       	rjmp	.+56     	; 0x8fe <main+0x48e>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     8c6:	88 81       	ld	r24, Y
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->hour >= 13){
     8ca:	8d 30       	cpi	r24, 0x0D	; 13
     8cc:	10 f4       	brcc	.+4      	; 0x8d2 <main+0x462>
			LCD_print_alarm_display(*alarmtime,HOURS);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->hour++;
     8ce:	88 83       	st	Y, r24
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <main+0x464>
			if(alarmtime->hour >= 13){
				alarmtime->hour = 0;
     8d2:	18 82       	st	Y, r1
			}
			LCD_print_alarm_display(*alarmtime,HOURS);
     8d4:	01 e0       	ldi	r16, 0x01	; 1
     8d6:	20 91 cf 01 	lds	r18, 0x01CF
     8da:	30 91 d0 01 	lds	r19, 0x01D0
     8de:	40 91 d1 01 	lds	r20, 0x01D1
     8e2:	50 91 d2 01 	lds	r21, 0x01D2
     8e6:	60 91 d3 01 	lds	r22, 0x01D3
     8ea:	70 91 d4 01 	lds	r23, 0x01D4
     8ee:	80 91 d5 01 	lds	r24, 0x01D5
     8f2:	90 91 d6 01 	lds	r25, 0x01D6
     8f6:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     8fa:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     8fe:	85 e0       	ldi	r24, 0x05	; 5
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
--------------------------------------------------------------------------------------------------*/

inline void set_alarm(alarm_t *alarmtime){
	LCD_print_alarm_display(*alarmtime,HOURS);
	CLEAR_BUTTONS;
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     906:	80 91 a2 01 	lds	r24, 0x01A2
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	29 f0       	breq	.+10     	; 0x918 <__stack+0x19>
     90e:	90 91 9c 01 	lds	r25, 0x019C
     912:	9f 30       	cpi	r25, 0x0F	; 15
     914:	08 f4       	brcc	.+2      	; 0x918 <__stack+0x19>
     916:	b6 cf       	rjmp	.-148    	; 0x884 <main+0x414>
			CLEAR_BUTTONS;
			break;
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
     918:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,MINUTES);
     91c:	00 e0       	ldi	r16, 0x00	; 0
     91e:	20 91 cf 01 	lds	r18, 0x01CF
     922:	30 91 d0 01 	lds	r19, 0x01D0
     926:	40 91 d1 01 	lds	r20, 0x01D1
     92a:	50 91 d2 01 	lds	r21, 0x01D2
     92e:	60 91 d3 01 	lds	r22, 0x01D3
     932:	70 91 d4 01 	lds	r23, 0x01D4
     936:	80 91 d5 01 	lds	r24, 0x01D5
     93a:	90 91 d6 01 	lds	r25, 0x01D6
     93e:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     942:	80 91 a2 01 	lds	r24, 0x01A2
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	09 f4       	brne	.+2      	; 0x94c <__stack+0x4d>
     94a:	52 c0       	rjmp	.+164    	; 0x9f0 <__stack+0xf1>
     94c:	90 91 9c 01 	lds	r25, 0x019C
     950:	9f 30       	cpi	r25, 0x0F	; 15
     952:	08 f0       	brcs	.+2      	; 0x956 <__stack+0x57>
     954:	4d c0       	rjmp	.+154    	; 0x9f0 <__stack+0xf1>
	{
		switch(g_button_pressed){
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
				alarmtime->minute = 60;
     956:	1c e3       	ldi	r17, 0x3C	; 60
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		switch(g_button_pressed){
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	19 f0       	breq	.+6      	; 0x962 <__stack+0x63>
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	f1 f0       	breq	.+60     	; 0x99c <__stack+0x9d>
     960:	3a c0       	rjmp	.+116    	; 0x9d6 <__stack+0xd7>
			case(B1):
			//WDT_RESET;
			if(alarmtime->minute <= 0){
     962:	f3 01       	movw	r30, r6
     964:	80 81       	ld	r24, Z
     966:	81 11       	cpse	r24, r1
     968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
				alarmtime->minute = 60;
     96a:	10 83       	st	Z, r17
     96c:	34 c0       	rjmp	.+104    	; 0x9d6 <__stack+0xd7>
				break;
			}
			alarmtime->minute = alarmtime->minute - 1;
     96e:	81 50       	subi	r24, 0x01	; 1
     970:	38 2f       	mov	r19, r24
     972:	80 83       	st	Z, r24
			LCD_print_alarm_display(*alarmtime,MINUTES);
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	20 91 cf 01 	lds	r18, 0x01CF
     97a:	40 91 d1 01 	lds	r20, 0x01D1
     97e:	50 91 d2 01 	lds	r21, 0x01D2
     982:	60 91 d3 01 	lds	r22, 0x01D3
     986:	70 91 d4 01 	lds	r23, 0x01D4
     98a:	80 91 d5 01 	lds	r24, 0x01D5
     98e:	90 91 d6 01 	lds	r25, 0x01D6
     992:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     996:	10 92 a2 01 	sts	0x01A2, r1
     99a:	1d c0       	rjmp	.+58     	; 0x9d6 <__stack+0xd7>
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     99c:	f3 01       	movw	r30, r6
     99e:	80 81       	ld	r24, Z
     9a0:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->minute >= 60){
     9a2:	8c 33       	cpi	r24, 0x3C	; 60
     9a4:	10 f4       	brcc	.+4      	; 0x9aa <__stack+0xab>
			LCD_print_alarm_display(*alarmtime,MINUTES);
			CLEAR_BUTTONS;
			break;
			case(B3):
			//WDT_RESET;
			alarmtime->minute++;
     9a6:	80 83       	st	Z, r24
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0xad>
			if(alarmtime->minute >= 60){
				alarmtime->minute = 0;
     9aa:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,MINUTES);
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	20 91 cf 01 	lds	r18, 0x01CF
     9b2:	30 91 d0 01 	lds	r19, 0x01D0
     9b6:	40 91 d1 01 	lds	r20, 0x01D1
     9ba:	50 91 d2 01 	lds	r21, 0x01D2
     9be:	60 91 d3 01 	lds	r22, 0x01D3
     9c2:	70 91 d4 01 	lds	r23, 0x01D4
     9c6:	80 91 d5 01 	lds	r24, 0x01D5
     9ca:	90 91 d6 01 	lds	r25, 0x01D6
     9ce:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     9d2:	10 92 a2 01 	sts	0x01A2, r1
			break;
		}
		hw_delay(5);
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		}
		hw_delay(5);
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,MINUTES);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     9de:	80 91 a2 01 	lds	r24, 0x01A2
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	29 f0       	breq	.+10     	; 0x9f0 <__stack+0xf1>
     9e6:	90 91 9c 01 	lds	r25, 0x019C
     9ea:	9f 30       	cpi	r25, 0x0F	; 15
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <__stack+0xf1>
     9ee:	b4 cf       	rjmp	.-152    	; 0x958 <__stack+0x59>
			break;
		}
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
     9f0:	10 92 a2 01 	sts	0x01A2, r1
	LCD_print_alarm_display(*alarmtime,AMPM);
     9f4:	02 e0       	ldi	r16, 0x02	; 2
     9f6:	20 91 cf 01 	lds	r18, 0x01CF
     9fa:	30 91 d0 01 	lds	r19, 0x01D0
     9fe:	40 91 d1 01 	lds	r20, 0x01D1
     a02:	50 91 d2 01 	lds	r21, 0x01D2
     a06:	60 91 d3 01 	lds	r22, 0x01D3
     a0a:	70 91 d4 01 	lds	r23, 0x01D4
     a0e:	80 91 d5 01 	lds	r24, 0x01D5
     a12:	90 91 d6 01 	lds	r25, 0x01D6
     a16:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
     a1a:	26 c0       	rjmp	.+76     	; 0xa68 <__stack+0x169>
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
	{
		hw_delay(5);
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
     a24:	80 91 a2 01 	lds	r24, 0x01A2
     a28:	8d 7f       	andi	r24, 0xFD	; 253
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	e9 f4       	brne	.+58     	; 0xa68 <__stack+0x169>
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     a2e:	f2 01       	movw	r30, r4
     a30:	80 81       	ld	r24, Z
     a32:	8f 5f       	subi	r24, 0xFF	; 255
			if(alarmtime->AM_PM >= 2){
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	10 f4       	brcc	.+4      	; 0xa3c <__stack+0x13d>
	{
		hw_delay(5);
		if((g_button_pressed == B1) || (g_button_pressed == B3) )
		{
			//WDT_RESET;
			alarmtime->AM_PM++;
     a38:	80 83       	st	Z, r24
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__stack+0x13f>
			if(alarmtime->AM_PM >= 2){
				alarmtime->AM_PM = 0;
     a3c:	10 82       	st	Z, r1
			}
			LCD_print_alarm_display(*alarmtime,AMPM);
     a3e:	02 e0       	ldi	r16, 0x02	; 2
     a40:	20 91 cf 01 	lds	r18, 0x01CF
     a44:	30 91 d0 01 	lds	r19, 0x01D0
     a48:	40 91 d1 01 	lds	r20, 0x01D1
     a4c:	50 91 d2 01 	lds	r21, 0x01D2
     a50:	60 91 d3 01 	lds	r22, 0x01D3
     a54:	70 91 d4 01 	lds	r23, 0x01D4
     a58:	80 91 d5 01 	lds	r24, 0x01D5
     a5c:	90 91 d6 01 	lds	r25, 0x01D6
     a60:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_print_alarm_display>
			CLEAR_BUTTONS;
     a64:	10 92 a2 01 	sts	0x01A2, r1
		hw_delay(5);
		// Update alarm set time in EEPROM
	}
	CLEAR_BUTTONS;
	LCD_print_alarm_display(*alarmtime,AMPM);
	while((g_button_pressed != B2) && (WDT_counter < WDT_TIMEOUT))
     a68:	80 91 a2 01 	lds	r24, 0x01A2
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	21 f0       	breq	.+8      	; 0xa78 <__stack+0x179>
     a70:	80 91 9c 01 	lds	r24, 0x019C
     a74:	8f 30       	cpi	r24, 0x0F	; 15
     a76:	90 f2       	brcs	.-92     	; 0xa1c <__stack+0x11d>
			CLEAR_BUTTONS;
		}
		// Update alarm set time in EEPROM
	}
	//store new alarm time in EEPROM
	eeprom_SetAlarm();
     a78:	0e 94 05 02 	call	0x40a	; 0x40a <eeprom_SetAlarm>
	CLEAR_BUTTONS;
     a7c:	10 92 a2 01 	sts	0x01A2, r1
	LCD_clear_screen();
     a80:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
     a84:	10 c0       	rjmp	.+32     	; 0xaa6 <__stack+0x1a7>
									//set Alarm2
									set_alarm(&alarmtime2);
									break;
								case(5):
									//back
									menufresh = 0;
     a86:	10 92 9f 01 	sts	0x019F, r1
									LCD_clear_screen();
     a8a:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
									break;
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <__stack+0x1a7>
							}
							break;
						//move one selection down in menu
						case (B3):
							CLEAR_BUTTONS;
     a90:	10 92 a2 01 	sts	0x01A2, r1
							//WDT_RESET;
							menu_current++;
     a94:	80 91 9d 01 	lds	r24, 0x019D
     a98:	90 91 9e 01 	lds	r25, 0x019E
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	90 93 9e 01 	sts	0x019E, r25
     aa2:	80 93 9d 01 	sts	0x019D, r24
							break;
					}
					//Handle going over the top or below the bottom selection
					if(menu_current == 6){
     aa6:	80 91 9d 01 	lds	r24, 0x019D
     aaa:	90 91 9e 01 	lds	r25, 0x019E
     aae:	86 30       	cpi	r24, 0x06	; 6
     ab0:	91 05       	cpc	r25, r1
     ab2:	29 f4       	brne	.+10     	; 0xabe <__stack+0x1bf>
						menu_current = 0;
     ab4:	10 92 9e 01 	sts	0x019E, r1
     ab8:	10 92 9d 01 	sts	0x019D, r1
     abc:	08 c0       	rjmp	.+16     	; 0xace <__stack+0x1cf>
					}
					else if(menu_current == -1){
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	31 f4       	brne	.+12     	; 0xace <__stack+0x1cf>
						menu_current = 5;
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	90 93 9e 01 	sts	0x019E, r25
     aca:	80 93 9d 01 	sts	0x019D, r24
				//Set the select to first element in the menu
				menu_current = 0;
				LCD_clear_screen();
				//Loop for main menu while the WDT hasn't timed out and 
				// the user hasn't selected back
				while(menufresh && (WDT_counter < WDT_TIMEOUT))
     ace:	80 91 9f 01 	lds	r24, 0x019F
     ad2:	88 23       	and	r24, r24
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__stack+0x1d9>
     ad6:	3a cd       	rjmp	.-1420   	; 0x54c <main+0xdc>
     ad8:	80 91 9c 01 	lds	r24, 0x019C
     adc:	8f 30       	cpi	r24, 0x0F	; 15
     ade:	08 f4       	brcc	.+2      	; 0xae2 <__stack+0x1e3>
     ae0:	6b cd       	rjmp	.-1322   	; 0x5b8 <main+0x148>
     ae2:	34 cd       	rjmp	.-1432   	; 0x54c <main+0xdc>
					}
				}
				break;
			//toggle alarm 1 on or off
			case (B3):
				CLEAR_BUTTONS;
     ae4:	10 92 a2 01 	sts	0x01A2, r1
				//toggle alarm 1
				alarmtime1.on_off ^= 0x01;
     ae8:	06 eb       	ldi	r16, 0xB6	; 182
     aea:	11 e0       	ldi	r17, 0x01	; 1
     aec:	f8 01       	movw	r30, r16
     aee:	60 81       	ld	r22, Z
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	68 27       	eor	r22, r24
     af4:	60 83       	st	Z, r22
				eeprom_update_byte(&alarm_onoff1, alarmtime1.on_off);
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
				//update string to be displayed
				if(alarmtime1.on_off){
     afe:	d8 01       	movw	r26, r16
     b00:	8c 91       	ld	r24, X
     b02:	88 23       	and	r24, r24
     b04:	69 f0       	breq	.+26     	; 0xb20 <__stack+0x221>
					strcpy(string_alarm_onoff1,on);
     b06:	8f e4       	ldi	r24, 0x4F	; 79
     b08:	9e e4       	ldi	r25, 0x4E	; 78
     b0a:	a0 e2       	ldi	r26, 0x20	; 32
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	80 93 c5 01 	sts	0x01C5, r24
     b12:	90 93 c6 01 	sts	0x01C6, r25
     b16:	a0 93 c7 01 	sts	0x01C7, r26
     b1a:	b0 93 c8 01 	sts	0x01C8, r27
     b1e:	16 cd       	rjmp	.-1492   	; 0x54c <main+0xdc>
				}
				else{
					strcpy(string_alarm_onoff1,off);
     b20:	8f e4       	ldi	r24, 0x4F	; 79
     b22:	96 e4       	ldi	r25, 0x46	; 70
     b24:	a6 e4       	ldi	r26, 0x46	; 70
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	80 93 c5 01 	sts	0x01C5, r24
     b2c:	90 93 c6 01 	sts	0x01C6, r25
     b30:	a0 93 c7 01 	sts	0x01C7, r26
     b34:	b0 93 c8 01 	sts	0x01C8, r27
     b38:	09 cd       	rjmp	.-1518   	; 0x54c <main+0xdc>
				}
				break;
			case(B1H):
				CLEAR_BUTTONS;
     b3a:	10 92 a2 01 	sts	0x01A2, r1
				//radio on/off
				break;
     b3e:	06 cd       	rjmp	.-1524   	; 0x54c <main+0xdc>
			case(B2H):
				CLEAR_BUTTONS;
     b40:	10 92 a2 01 	sts	0x01A2, r1
				break;
     b44:	03 cd       	rjmp	.-1530   	; 0x54c <main+0xdc>
			//toggle alarm 2 on or off (to be replaced with switches)
			case(B3H):
				CLEAR_BUTTONS;
     b46:	10 92 a2 01 	sts	0x01A2, r1
				//toggle alarm 2
				alarmtime2.on_off ^= 0x01;
     b4a:	02 ed       	ldi	r16, 0xD2	; 210
     b4c:	11 e0       	ldi	r17, 0x01	; 1
     b4e:	d8 01       	movw	r26, r16
     b50:	6c 91       	ld	r22, X
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	68 27       	eor	r22, r24
     b56:	6c 93       	st	X, r22
				eeprom_update_byte(&alarm_onoff2, alarmtime2.on_off);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__eeupd_byte_m328p>
				//update string to be displayed
				if(alarmtime2.on_off){
     b60:	f8 01       	movw	r30, r16
     b62:	80 81       	ld	r24, Z
     b64:	88 23       	and	r24, r24
     b66:	69 f0       	breq	.+26     	; 0xb82 <__stack+0x283>
					strcpy(string_alarm_onoff2,on);
     b68:	8f e4       	ldi	r24, 0x4F	; 79
     b6a:	9e e4       	ldi	r25, 0x4E	; 78
     b6c:	a0 e2       	ldi	r26, 0x20	; 32
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	80 93 bb 01 	sts	0x01BB, r24
     b74:	90 93 bc 01 	sts	0x01BC, r25
     b78:	a0 93 bd 01 	sts	0x01BD, r26
     b7c:	b0 93 be 01 	sts	0x01BE, r27
     b80:	e5 cc       	rjmp	.-1590   	; 0x54c <main+0xdc>
				}
				else{
					strcpy(string_alarm_onoff2,off);
     b82:	8f e4       	ldi	r24, 0x4F	; 79
     b84:	96 e4       	ldi	r25, 0x46	; 70
     b86:	a6 e4       	ldi	r26, 0x46	; 70
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	80 93 bb 01 	sts	0x01BB, r24
     b8e:	90 93 bc 01 	sts	0x01BC, r25
     b92:	a0 93 bd 01 	sts	0x01BD, r26
     b96:	b0 93 be 01 	sts	0x01BE, r27
     b9a:	d8 cc       	rjmp	.-1616   	; 0x54c <main+0xdc>
				break;
			//default alarm and radio display
			//need to add if statement that tailors display for the radio being on/off
			default:
				//If the counter is greater than timeout, reset it
				if(WDT_counter >= WDT_TIMEOUT)
     b9c:	80 91 9c 01 	lds	r24, 0x019C
     ba0:	8f 30       	cpi	r24, 0x0F	; 15
     ba2:	20 f0       	brcs	.+8      	; 0xbac <__stack+0x2ad>
				{
					WDT_RESET;
     ba4:	10 92 9c 01 	sts	0x019C, r1
					//Clear screen in case UI timed out
					LCD_clear_screen();
     ba8:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
				}
				
				//Read current time and update main display
				RTC_Read(&times);
     bac:	8b ea       	ldi	r24, 0xAB	; 171
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 0d 0c 	call	0x181a	; 0x181a <RTC_Read>
				LCD_print_time_display(times, 21,"RADIO", "MENU", string_alarm_onoff1, string_alarm_onoff2);
     bb4:	0f 2e       	mov	r0, r31
     bb6:	fb eb       	ldi	r31, 0xBB	; 187
     bb8:	8f 2e       	mov	r8, r31
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	9f 2e       	mov	r9, r31
     bbe:	f0 2d       	mov	r31, r0
     bc0:	0f 2e       	mov	r0, r31
     bc2:	f5 ec       	ldi	r31, 0xC5	; 197
     bc4:	af 2e       	mov	r10, r31
     bc6:	f1 e0       	ldi	r31, 0x01	; 1
     bc8:	bf 2e       	mov	r11, r31
     bca:	f0 2d       	mov	r31, r0
     bcc:	0f 2e       	mov	r0, r31
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	cf 2e       	mov	r12, r31
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	df 2e       	mov	r13, r31
     bd6:	f0 2d       	mov	r31, r0
     bd8:	0f 2e       	mov	r0, r31
     bda:	f5 e0       	ldi	r31, 0x05	; 5
     bdc:	ef 2e       	mov	r14, r31
     bde:	f1 e0       	ldi	r31, 0x01	; 1
     be0:	ff 2e       	mov	r15, r31
     be2:	f0 2d       	mov	r31, r0
     be4:	05 e1       	ldi	r16, 0x15	; 21
     be6:	10 e0       	ldi	r17, 0x00	; 0
     be8:	20 91 ab 01 	lds	r18, 0x01AB
     bec:	30 91 ac 01 	lds	r19, 0x01AC
     bf0:	40 91 ad 01 	lds	r20, 0x01AD
     bf4:	50 91 ae 01 	lds	r21, 0x01AE
     bf8:	60 91 af 01 	lds	r22, 0x01AF
     bfc:	70 91 b0 01 	lds	r23, 0x01B0
     c00:	80 91 b1 01 	lds	r24, 0x01B1
     c04:	90 91 b2 01 	lds	r25, 0x01B2
     c08:	0e 94 33 0a 	call	0x1466	; 0x1466 <LCD_print_time_display>
Return value : None.
--------------------------------------------------------------------------------------------------*/

inline void check_alarms(void){
	//check if alarm 1 has gone off
	if((alarmtime1.hour == times.hour) && (alarmtime1.minute == times.minute) && (alarmtime1.AM_PM == times.AM_PM)
     c0c:	90 91 b3 01 	lds	r25, 0x01B3
     c10:	80 91 af 01 	lds	r24, 0x01AF
     c14:	98 13       	cpse	r25, r24
     c16:	46 c0       	rjmp	.+140    	; 0xca4 <__stack+0x3a5>
     c18:	80 91 b4 01 	lds	r24, 0x01B4
     c1c:	90 91 b0 01 	lds	r25, 0x01B0
     c20:	89 13       	cpse	r24, r25
     c22:	40 c0       	rjmp	.+128    	; 0xca4 <__stack+0x3a5>
     c24:	d1 01       	movw	r26, r2
     c26:	2c 91       	ld	r18, X
     c28:	90 91 b2 01 	lds	r25, 0x01B2
     c2c:	29 13       	cpse	r18, r25
     c2e:	3a c0       	rjmp	.+116    	; 0xca4 <__stack+0x3a5>
	&& (alarmtime1.on_off) && (alarmfresh1 != times.minute))
     c30:	90 91 b6 01 	lds	r25, 0x01B6
     c34:	99 23       	and	r25, r25
     c36:	b1 f1       	breq	.+108    	; 0xca4 <__stack+0x3a5>
     c38:	90 91 a1 01 	lds	r25, 0x01A1
     c3c:	89 17       	cp	r24, r25
     c3e:	91 f1       	breq	.+100    	; 0xca4 <__stack+0x3a5>
	{
		//update variable to make sure alarm doesn't repeatedly go off for a minute
		alarmfresh1 = times.minute;
     c40:	80 93 a1 01 	sts	0x01A1, r24
		Timer1PWM_OnOff(PWM_ON);
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 85 0c 	call	0x190a	; 0x190a <Timer1PWM_OnOff>
		LCD_clear_screen();
     c4a:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
		LCD_goto(0,0);
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
		LCD_print_string("ALARM 1!",0);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	8b e0       	ldi	r24, 0x0B	; 11
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
		LCD_print_bottom_menu("OFF", " ", " ");
     c64:	41 e3       	ldi	r20, 0x31	; 49
     c66:	51 e0       	ldi	r21, 0x01	; 1
     c68:	ba 01       	movw	r22, r20
     c6a:	84 e1       	ldi	r24, 0x14	; 20
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_print_bottom_menu>
		CLEAR_BUTTONS;
     c72:	10 92 a2 01 	sts	0x01A2, r1
		WDT_RESET;
     c76:	10 92 9c 01 	sts	0x019C, r1
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
			RTC_Read(&times);
     c7a:	8b ea       	ldi	r24, 0xAB	; 171
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 0d 0c 	call	0x181a	; 0x181a <RTC_Read>
			hw_delay(5);
     c82:	85 e0       	ldi	r24, 0x05	; 5
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		LCD_goto(0,0);
		LCD_print_string("ALARM 1!",0);
		LCD_print_bottom_menu("OFF", " ", " ");
		CLEAR_BUTTONS;
		WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     c8a:	80 91 a2 01 	lds	r24, 0x01A2
     c8e:	81 11       	cpse	r24, r1
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__stack+0x39b>
     c92:	80 91 9c 01 	lds	r24, 0x019C
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	80 f3       	brcs	.-32     	; 0xc7a <__stack+0x37b>
			RTC_Read(&times);
			hw_delay(5);
		}
		Timer1PWM_OnOff(PWM_OFF);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 85 0c 	call	0x190a	; 0x190a <Timer1PWM_OnOff>
		CLEAR_BUTTONS;
     ca0:	10 92 a2 01 	sts	0x01A2, r1
		//WDT_RESET;
	}
	
	if((alarmtime2.hour == times.hour) && (alarmtime2.minute == times.minute) && (alarmtime2.AM_PM == times.AM_PM)
     ca4:	98 81       	ld	r25, Y
     ca6:	80 91 af 01 	lds	r24, 0x01AF
     caa:	98 13       	cpse	r25, r24
     cac:	4f cc       	rjmp	.-1890   	; 0x54c <main+0xdc>
     cae:	f3 01       	movw	r30, r6
     cb0:	80 81       	ld	r24, Z
     cb2:	90 91 b0 01 	lds	r25, 0x01B0
     cb6:	89 13       	cpse	r24, r25
     cb8:	49 cc       	rjmp	.-1902   	; 0x54c <main+0xdc>
     cba:	d2 01       	movw	r26, r4
     cbc:	2c 91       	ld	r18, X
     cbe:	90 91 b2 01 	lds	r25, 0x01B2
     cc2:	29 13       	cpse	r18, r25
     cc4:	43 cc       	rjmp	.-1914   	; 0x54c <main+0xdc>
	&& (alarmtime2.on_off) && (alarmfresh2 != times.minute))
     cc6:	90 91 d2 01 	lds	r25, 0x01D2
     cca:	99 23       	and	r25, r25
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__stack+0x3d1>
     cce:	3e cc       	rjmp	.-1924   	; 0x54c <main+0xdc>
     cd0:	90 91 a0 01 	lds	r25, 0x01A0
     cd4:	89 17       	cp	r24, r25
     cd6:	09 f4       	brne	.+2      	; 0xcda <__stack+0x3db>
     cd8:	39 cc       	rjmp	.-1934   	; 0x54c <main+0xdc>
	{
		alarmfresh2 = times.minute;
     cda:	80 93 a0 01 	sts	0x01A0, r24
		Timer1PWM_OnOff(PWM_ON);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 85 0c 	call	0x190a	; 0x190a <Timer1PWM_OnOff>
		LCD_clear_screen();
     ce4:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
		LCD_goto(0,0);
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
		LCD_print_string("ALARM 2!",0);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	88 e1       	ldi	r24, 0x18	; 24
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
		LCD_print_bottom_menu("OFF", " ", " ");
     cfe:	41 e3       	ldi	r20, 0x31	; 49
     d00:	51 e0       	ldi	r21, 0x01	; 1
     d02:	ba 01       	movw	r22, r20
     d04:	84 e1       	ldi	r24, 0x14	; 20
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_print_bottom_menu>
		CLEAR_BUTTONS;
     d0c:	10 92 a2 01 	sts	0x01A2, r1
		//WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     d10:	80 91 9c 01 	lds	r24, 0x019C
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	80 f4       	brcc	.+32     	; 0xd38 <__stack+0x439>
			RTC_Read(&times);
     d18:	8b ea       	ldi	r24, 0xAB	; 171
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 0d 0c 	call	0x181a	; 0x181a <RTC_Read>
			hw_delay(5);
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
		LCD_goto(0,0);
		LCD_print_string("ALARM 2!",0);
		LCD_print_bottom_menu("OFF", " ", " ");
		CLEAR_BUTTONS;
		//WDT_RESET;
		while(!g_button_pressed && (WDT_counter < (WDT_TIMEOUT/4))){
     d28:	80 91 a2 01 	lds	r24, 0x01A2
     d2c:	81 11       	cpse	r24, r1
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__stack+0x439>
     d30:	80 91 9c 01 	lds	r24, 0x019C
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	80 f3       	brcs	.-32     	; 0xd18 <__stack+0x419>
			RTC_Read(&times);
			hw_delay(5);
		}
		Timer1PWM_OnOff(PWM_OFF);
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 85 0c 	call	0x190a	; 0x190a <Timer1PWM_OnOff>
		CLEAR_BUTTONS;
     d3e:	10 92 a2 01 	sts	0x01A2, r1
     d42:	04 cc       	rjmp	.-2040   	; 0x54c <main+0xdc>

00000d44 <__vector_14>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/
//Have yet to add switch handling and LEDs based on radio
ISR(TIMER0_COMPA_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	ef 93       	push	r30
	static int count;
	static int bpressed = 0;
	int button1Raw = (BUTTON_READ_REG & _BV(BUTTON_1)) == 0;
     d60:	79 b1       	in	r23, 0x09	; 9
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	76 27       	eor	r23, r22
	int button2Raw = (BUTTON_READ_REG & _BV(BUTTON_2)) == 0;
     d66:	e9 b1       	in	r30, 0x09	; 9
     d68:	e6 95       	lsr	r30
     d6a:	e6 27       	eor	r30, r22
     d6c:	8e 2f       	mov	r24, r30
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
	int button3Raw = (BUTTON_READ_REG & _BV(BUTTON_3)) == 0;
     d72:	e9 b1       	in	r30, 0x09	; 9
     d74:	e2 95       	swap	r30
     d76:	e6 95       	lsr	r30
     d78:	e7 70       	andi	r30, 0x07	; 7
     d7a:	6e 27       	eor	r22, r30
     d7c:	26 2f       	mov	r18, r22
     d7e:	21 70       	andi	r18, 0x01	; 1
     d80:	30 e0       	ldi	r19, 0x00	; 0
	
	if(button1Raw){
     d82:	47 2f       	mov	r20, r23
     d84:	41 70       	andi	r20, 0x01	; 1
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	70 ff       	sbrs	r23, 0
     d8a:	1d c0       	rjmp	.+58     	; 0xdc6 <__vector_14+0x82>
		count++;
     d8c:	60 91 9a 01 	lds	r22, 0x019A
     d90:	70 91 9b 01 	lds	r23, 0x019B
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	70 93 9b 01 	sts	0x019B, r23
     d9c:	60 93 9a 01 	sts	0x019A, r22
		if(count == 50){
     da0:	62 33       	cpi	r22, 0x32	; 50
     da2:	71 05       	cpc	r23, r1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <__vector_14+0x70>
			bpressed = B1;
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	70 93 99 01 	sts	0x0199, r23
     dae:	60 93 98 01 	sts	0x0198, r22
     db2:	09 c0       	rjmp	.+18     	; 0xdc6 <__vector_14+0x82>
		}
		if(count == 700){
     db4:	6c 3b       	cpi	r22, 0xBC	; 188
     db6:	72 40       	sbci	r23, 0x02	; 2
     db8:	31 f4       	brne	.+12     	; 0xdc6 <__vector_14+0x82>
			bpressed = B1H;
     dba:	60 e3       	ldi	r22, 0x30	; 48
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	70 93 99 01 	sts	0x0199, r23
     dc2:	60 93 98 01 	sts	0x0198, r22
		}
	}
	
	if(button2Raw){
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	e9 f0       	breq	.+58     	; 0xe04 <__vector_14+0xc0>
		count++;
     dca:	60 91 9a 01 	lds	r22, 0x019A
     dce:	70 91 9b 01 	lds	r23, 0x019B
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	70 93 9b 01 	sts	0x019B, r23
     dda:	60 93 9a 01 	sts	0x019A, r22
		if(count == 50){
     dde:	62 33       	cpi	r22, 0x32	; 50
     de0:	71 05       	cpc	r23, r1
     de2:	39 f4       	brne	.+14     	; 0xdf2 <__vector_14+0xae>
			bpressed = B2;
     de4:	62 e0       	ldi	r22, 0x02	; 2
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	70 93 99 01 	sts	0x0199, r23
     dec:	60 93 98 01 	sts	0x0198, r22
     df0:	09 c0       	rjmp	.+18     	; 0xe04 <__vector_14+0xc0>
		}
		if(count == 700){
     df2:	6c 3b       	cpi	r22, 0xBC	; 188
     df4:	72 40       	sbci	r23, 0x02	; 2
     df6:	31 f4       	brne	.+12     	; 0xe04 <__vector_14+0xc0>
			bpressed = B2H;
     df8:	65 e0       	ldi	r22, 0x05	; 5
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	70 93 99 01 	sts	0x0199, r23
     e00:	60 93 98 01 	sts	0x0198, r22
		}
	}
	
	if(button3Raw){
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	f1 f0       	breq	.+60     	; 0xe46 <__vector_14+0x102>
		count++;
     e0a:	60 91 9a 01 	lds	r22, 0x019A
     e0e:	70 91 9b 01 	lds	r23, 0x019B
     e12:	6f 5f       	subi	r22, 0xFF	; 255
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	70 93 9b 01 	sts	0x019B, r23
     e1a:	60 93 9a 01 	sts	0x019A, r22
		if(count == 50){
     e1e:	62 33       	cpi	r22, 0x32	; 50
     e20:	71 05       	cpc	r23, r1
     e22:	39 f4       	brne	.+14     	; 0xe32 <__vector_14+0xee>
			bpressed = B3;
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	70 93 99 01 	sts	0x0199, r23
     e2c:	60 93 98 01 	sts	0x0198, r22
     e30:	24 c0       	rjmp	.+72     	; 0xe7a <__vector_14+0x136>
		}
		if(count == 700){
     e32:	6c 3b       	cpi	r22, 0xBC	; 188
     e34:	72 40       	sbci	r23, 0x02	; 2
     e36:	39 f4       	brne	.+14     	; 0xe46 <__vector_14+0x102>
			bpressed = B3H;
     e38:	66 e0       	ldi	r22, 0x06	; 6
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	70 93 99 01 	sts	0x0199, r23
     e40:	60 93 98 01 	sts	0x0198, r22
     e44:	07 c0       	rjmp	.+14     	; 0xe54 <__vector_14+0x110>
		}
	}
	if((bpressed > B3) && !button1Raw && !button2Raw && !button3Raw){
     e46:	60 91 98 01 	lds	r22, 0x0198
     e4a:	70 91 99 01 	lds	r23, 0x0199
     e4e:	64 30       	cpi	r22, 0x04	; 4
     e50:	71 05       	cpc	r23, r1
     e52:	9c f0       	brlt	.+38     	; 0xe7a <__vector_14+0x136>
     e54:	45 2b       	or	r20, r21
     e56:	31 f5       	brne	.+76     	; 0xea4 <__vector_14+0x160>
     e58:	89 2b       	or	r24, r25
     e5a:	21 f5       	brne	.+72     	; 0xea4 <__vector_14+0x160>
     e5c:	23 2b       	or	r18, r19
     e5e:	11 f5       	brne	.+68     	; 0xea4 <__vector_14+0x160>
		g_button_pressed = bpressed;
     e60:	60 93 a2 01 	sts	0x01A2, r22
		bpressed = 0;
     e64:	10 92 99 01 	sts	0x0199, r1
     e68:	10 92 98 01 	sts	0x0198, r1
		count = 0;
     e6c:	10 92 9b 01 	sts	0x019B, r1
     e70:	10 92 9a 01 	sts	0x019A, r1
		WDT_RESET;
     e74:	10 92 9c 01 	sts	0x019C, r1
     e78:	15 c0       	rjmp	.+42     	; 0xea4 <__vector_14+0x160>
	}
	
	if(bpressed && !button1Raw && !button2Raw && !button3Raw)
     e7a:	61 15       	cp	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	91 f0       	breq	.+36     	; 0xea4 <__vector_14+0x160>
     e80:	45 2b       	or	r20, r21
     e82:	81 f4       	brne	.+32     	; 0xea4 <__vector_14+0x160>
     e84:	89 2b       	or	r24, r25
     e86:	71 f4       	brne	.+28     	; 0xea4 <__vector_14+0x160>
     e88:	23 2b       	or	r18, r19
     e8a:	61 f4       	brne	.+24     	; 0xea4 <__vector_14+0x160>
	{
		g_button_pressed = bpressed;
     e8c:	60 93 a2 01 	sts	0x01A2, r22
		bpressed = 0;
     e90:	10 92 99 01 	sts	0x0199, r1
     e94:	10 92 98 01 	sts	0x0198, r1
		count = 0;
     e98:	10 92 9b 01 	sts	0x019B, r1
     e9c:	10 92 9a 01 	sts	0x019A, r1
		WDT_RESET;
     ea0:	10 92 9c 01 	sts	0x019C, r1
	}
	
}
     ea4:	ef 91       	pop	r30
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_6>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

ISR(WDT_vect)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	8f 93       	push	r24
	WDT_counter++;
     ecc:	80 91 9c 01 	lds	r24, 0x019C
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 9c 01 	sts	0x019C, r24
	
	//Still need to add functionality for System reset
}
     ed6:	8f 91       	pop	r24
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_21>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

ISR(ADC_vect)
{
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
	//add logic for handling 2 ADCs
}
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <LCD_SPI_initialize>:
Return value : None.
--------------------------------------------------------------------------------------------------*/
void LCD_SPI_initialize()
{
	// Set data direction for LCD output control pins
	LCD_DD_RESET  |= _BV(LCD_RESET_PIN);
     ef6:	20 9a       	sbi	0x04, 0	; 4
	LCD_DD_SCK    |= _BV(LCD_SCK);
     ef8:	25 9a       	sbi	0x04, 5	; 4
	LCD_DD_MOSI   |= _BV(LCD_MOSI);     
     efa:	23 9a       	sbi	0x04, 3	; 4
	LCD_DD_D_OR_C |= _BV(LCD_D_OR_C);   
     efc:	54 9a       	sbi	0x0a, 4	; 10
	LCD_DD_SS     |= _BV(LCD_SS);    
     efe:	22 9a       	sbi	0x04, 2	; 4
	
	// Setting SPI clock generator to Fclk/16 and enabling SPI peripheral and setting in master mode
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0);
     f00:	81 e5       	ldi	r24, 0x51	; 81
     f02:	8c bd       	out	0x2c, r24	; 44
     f04:	08 95       	ret

00000f06 <LCD_send_command>:
--------------------------------------------------------------------------------------------------*/
void LCD_send_command(BYTE command_to_send)
{
	
	// Enable LCD
	LCD_ENABLE;
     f06:	2a 98       	cbi	0x05, 2	; 5
	
	// Set the LCD in command mode
	LCD_COMMAND_MODE;
     f08:	5c 98       	cbi	0x0b, 4	; 11
	
	// Writing to the SPI data register which auto. shifts out data
	SPDR = command_to_send;
     f0a:	8e bd       	out	0x2e, r24	; 46
	
	// Wait while the SPIF flag is low
	while(!(SPSR & _BV(SPIF)))
     f0c:	0d b4       	in	r0, 0x2d	; 45
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <LCD_send_command+0x6>
	{
		// Do nothing
	}
	SPSR &= ~_BV(SPIF);
     f12:	8d b5       	in	r24, 0x2d	; 45
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8d bd       	out	0x2d, r24	; 45
	
		// Disable LCD
	LCD_DISABLE;
     f18:	2a 9a       	sbi	0x05, 2	; 5
     f1a:	08 95       	ret

00000f1c <LCD_send_data>:
--------------------------------------------------------------------------------------------------*/

void LCD_send_data(BYTE data_to_send)
{
	// Enable LCD
	LCD_ENABLE;
     f1c:	2a 98       	cbi	0x05, 2	; 5
	
	// Set Data Mode
	LCD_DATA_MODE;
     f1e:	5c 9a       	sbi	0x0b, 4	; 11
	
	// Store data to send in SPI data register
	SPDR = data_to_send;
     f20:	8e bd       	out	0x2e, r24	; 46
	
	// Wait while the SPIF flag is low
	while(!(SPSR & _BV(SPIF)))
     f22:	0d b4       	in	r0, 0x2d	; 45
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <LCD_send_data+0x6>
	{
		// Do nothing
	}
	
	// Disable LCD
	LCD_DISABLE;
     f28:	2a 9a       	sbi	0x05, 2	; 5
     f2a:	08 95       	ret

00000f2c <LCD_goto>:
	row - row to go to
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_goto(int column, int row)
{
     f2c:	cf 93       	push	r28
     f2e:	c6 2f       	mov	r28, r22
	// Set the x address
	LCD_send_command(0x80 | column);
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set the y address
	LCD_send_command(0x40 | row);
     f36:	8c 2f       	mov	r24, r28
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
}
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <LCD_clear_screen>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_clear_screen(void)
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	c8 ef       	ldi	r28, 0xF8	; 248
     f48:	d1 e0       	ldi	r29, 0x01	; 1
	int i;
	
	for(i = 0; i < 504; i++)
	{
		LCD_send_data(0x00);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
     f50:	21 97       	sbiw	r28, 0x01	; 1

void LCD_clear_screen(void)
{
	int i;
	
	for(i = 0; i < 504; i++)
     f52:	20 97       	sbiw	r28, 0x00	; 0
     f54:	d1 f7       	brne	.-12     	; 0xf4a <LCD_clear_screen+0x8>
	{
		LCD_send_data(0x00);
	}
	
	// Return to home position
	LCD_goto(0,0);
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <LCD_initialize>:
Return value : None.
--------------------------------------------------------------------------------------------------*/
void LCD_initialize()
{
	// Enabling the LCD
	LCD_ENABLE;
     f68:	2a 98       	cbi	0x05, 2	; 5
	
	// Set the reset pin (active low) (resetting) 
	LCD_RESET;
     f6a:	28 98       	cbi	0x05, 0	; 5
	
	// Wait for 1 ms
	hw_delay(1);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <hw_delay>
	
	// Set reset pin (active low) (setting)
	LCD_NRESET;
     f74:	28 9a       	sbi	0x05, 0	; 5
	
	// Clear the screen
	LCD_clear_screen();
     f76:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
	
	// Disable the LCD 
	LCD_DISABLE;
     f7a:	2a 9a       	sbi	0x05, 2	; 5
	 *				Setting operation voltage to approx. 7V with Vop = 65
	 *				Mux 1:48
	 */
	
	// Set the display to normal mode
	LCD_send_command(0x0C);
     f7c:	8c e0       	ldi	r24, 0x0C	; 12
     f7e:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set the cursor to (0,0)
	LCD_goto(0,0);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	
	// Set LCD in Horizontal addressing mode / Extended instruction mode / Power down disabled mode
	LCD_send_command(0x21);
     f8e:	81 e2       	ldi	r24, 0x21	; 33
     f90:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set the temperature coefficient to 2 (17 mV/K)
	LCD_send_command(0x04);
     f94:	84 e0       	ldi	r24, 0x04	; 4
     f96:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set operation voltage to approximately 7V
	LCD_send_command(0xA0);
     f9a:	80 ea       	ldi	r24, 0xA0	; 160
     f9c:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set mux rate 1:48
	//was 0x16
	LCD_send_command(0x16);
     fa0:	86 e1       	ldi	r24, 0x16	; 22
     fa2:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
	
	// Set back into normal instruction mode
	LCD_send_command(0x20);
     fa6:	80 e2       	ldi	r24, 0x20	; 32
     fa8:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
     fac:	08 95       	ret

00000fae <LCD_set_y>:
--------------------------------------------------------------------------------------------------*/

void LCD_set_y(int y_to_set)
{
	// Set the y address
	LCD_send_command(0x40 | y_to_set);
     fae:	80 64       	ori	r24, 0x40	; 64
     fb0:	0e 94 83 07 	call	0xf06	; 0xf06 <LCD_send_command>
     fb4:	08 95       	ret

00000fb6 <LCD_print_char>:
Argument(s) : char_to_print
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_char(unsigned char char_to_print)
{
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
	unsigned char j;
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
     fbe:	08 2f       	mov	r16, r24
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	00 52       	subi	r16, 0x20	; 32
     fc4:	11 09       	sbc	r17, r1
     fc6:	c8 01       	movw	r24, r16
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	08 0f       	add	r16, r24
     fd2:	19 1f       	adc	r17, r25
     fd4:	c0 e0       	ldi	r28, 0x00	; 0
     fd6:	d0 e0       	ldi	r29, 0x00	; 0
     fd8:	00 58       	subi	r16, 0x80	; 128
     fda:	1e 4f       	sbci	r17, 0xFE	; 254
     fdc:	f8 01       	movw	r30, r16
     fde:	ec 0f       	add	r30, r28
     fe0:	fd 1f       	adc	r31, r29
     fe2:	84 91       	lpm	r24, Z
     fe4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
     fe8:	21 96       	adiw	r28, 0x01	; 1

void LCD_print_char(unsigned char char_to_print)
{
	unsigned char j;
	
	for(j=0; j<5; j++)
     fea:	c5 30       	cpi	r28, 0x05	; 5
     fec:	d1 05       	cpc	r29, r1
     fee:	b1 f7       	brne	.-20     	; 0xfdc <LCD_print_char+0x26>
	{
		LCD_send_data((pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
	}
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <LCD_print_inverted_char>:
Argument(s) : char_to_print - character to print inverted
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_inverted_char(unsigned char char_to_print)
{
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
	unsigned char j;
	
	for(j=0; j<5; j++)
	{
		LCD_send_data(~(pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
    1002:	08 2f       	mov	r16, r24
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	00 52       	subi	r16, 0x20	; 32
    1008:	11 09       	sbc	r17, r1
    100a:	c8 01       	movw	r24, r16
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	08 0f       	add	r16, r24
    1016:	19 1f       	adc	r17, r25
    1018:	c0 e0       	ldi	r28, 0x00	; 0
    101a:	d0 e0       	ldi	r29, 0x00	; 0
    101c:	00 58       	subi	r16, 0x80	; 128
    101e:	1e 4f       	sbci	r17, 0xFE	; 254
    1020:	f8 01       	movw	r30, r16
    1022:	ec 0f       	add	r30, r28
    1024:	fd 1f       	adc	r31, r29
    1026:	84 91       	lpm	r24, Z
    1028:	80 95       	com	r24
    102a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    102e:	21 96       	adiw	r28, 0x01	; 1

void LCD_print_inverted_char(unsigned char char_to_print)
{
	unsigned char j;
	
	for(j=0; j<5; j++)
    1030:	c5 30       	cpi	r28, 0x05	; 5
    1032:	d1 05       	cpc	r29, r1
    1034:	a9 f7       	brne	.-22     	; 0x1020 <LCD_print_inverted_char+0x26>
	{
		LCD_send_data(~(pgm_read_byte(&(smallFont [(char_to_print-32)*5 + j])) ));
	}
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <LCD_print_large_number>:
	inverted - (1) print the number inverted (0) print the number normal
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
    1040:	2f 92       	push	r2
    1042:	3f 92       	push	r3
    1044:	4f 92       	push	r4
    1046:	5f 92       	push	r5
    1048:	6f 92       	push	r6
    104a:	7f 92       	push	r7
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	af 92       	push	r10
    1052:	bf 92       	push	r11
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <LCD_print_large_number+0x26>
    1066:	1f 92       	push	r1
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	32 2e       	mov	r3, r18
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
		{
			if(inverted)
			{
				LCD_send_data(~pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    106e:	24 e1       	ldi	r18, 0x14	; 20
    1070:	28 9f       	mul	r18, r24
    1072:	50 01       	movw	r10, r0
    1074:	29 9f       	mul	r18, r25
    1076:	b0 0c       	add	r11, r0
    1078:	11 24       	eor	r1, r1
    107a:	45 01       	movw	r8, r10
void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
    107c:	c1 2c       	mov	r12, r1
    107e:	d1 2c       	mov	r13, r1
	{
		LCD_goto(x,y+i);
    1080:	64 2e       	mov	r6, r20
    1082:	71 2c       	mov	r7, r1
    1084:	46 2e       	mov	r4, r22
    1086:	51 2c       	mov	r5, r1
    1088:	26 2c       	mov	r2, r6
    108a:	79 82       	std	Y+1, r7	; 0x01
    108c:	b6 01       	movw	r22, r12
    108e:	66 0d       	add	r22, r6
    1090:	77 1d       	adc	r23, r7
    1092:	c2 01       	movw	r24, r4
    1094:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
		for(j = 0; j < 10; j++)
    1098:	1a 82       	std	Y+2, r1	; 0x02
    109a:	1b 82       	std	Y+3, r1	; 0x03
    109c:	c5 01       	movw	r24, r10
    109e:	8e 58       	subi	r24, 0x8E	; 142
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	7c 01       	movw	r14, r24
    10a4:	84 01       	movw	r16, r8
    10a6:	0e 58       	subi	r16, 0x8E	; 142
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			if(inverted)
    10aa:	33 20       	and	r3, r3
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <LCD_print_large_number+0x80>
    10ae:	ea 81       	ldd	r30, Y+2	; 0x02
    10b0:	fb 81       	ldd	r31, Y+3	; 0x03
    10b2:	e0 0f       	add	r30, r16
    10b4:	f1 1f       	adc	r31, r17
			{
				LCD_send_data(~pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    10b6:	84 91       	lpm	r24, Z
    10b8:	80 95       	com	r24
    10ba:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <LCD_print_large_number+0x8e>
    10c0:	ea 81       	ldd	r30, Y+2	; 0x02
    10c2:	fb 81       	ldd	r31, Y+3	; 0x03
    10c4:	ee 0d       	add	r30, r14
    10c6:	ff 1d       	adc	r31, r15
			}
			else
			{
				LCD_send_data(pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
    10c8:	84 91       	lpm	r24, Z
    10ca:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    10ce:	ea 81       	ldd	r30, Y+2	; 0x02
    10d0:	fb 81       	ldd	r31, Y+3	; 0x03
    10d2:	31 96       	adiw	r30, 0x01	; 1
    10d4:	fb 83       	std	Y+3, r31	; 0x03
    10d6:	ea 83       	std	Y+2, r30	; 0x02
    10d8:	3a 97       	sbiw	r30, 0x0a	; 10
    10da:	39 f7       	brne	.-50     	; 0x10aa <LCD_print_large_number+0x6a>
void LCD_print_large_number(unsigned int number_to_print, uint8_t x, uint8_t y, uint8_t inverted)
{
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
    10dc:	ff ef       	ldi	r31, 0xFF	; 255
    10de:	cf 1a       	sub	r12, r31
    10e0:	df 0a       	sbc	r13, r31
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	88 0e       	add	r8, r24
    10e6:	91 1c       	adc	r9, r1
    10e8:	9a e0       	ldi	r25, 0x0A	; 10
    10ea:	a9 0e       	add	r10, r25
    10ec:	b1 1c       	adc	r11, r1
    10ee:	e2 e0       	ldi	r30, 0x02	; 2
    10f0:	ce 16       	cp	r12, r30
    10f2:	d1 04       	cpc	r13, r1
    10f4:	49 f6       	brne	.-110    	; 0x1088 <LCD_print_large_number+0x48>
				LCD_send_data(pgm_read_byte(&(large_font[20*number_to_print + j + (i*10)])));
			}
			
		}
	}
	LCD_set_y(y);
    10f6:	82 2d       	mov	r24, r2
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_set_y>
}
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	9f 90       	pop	r9
    111a:	8f 90       	pop	r8
    111c:	7f 90       	pop	r7
    111e:	6f 90       	pop	r6
    1120:	5f 90       	pop	r5
    1122:	4f 90       	pop	r4
    1124:	3f 90       	pop	r3
    1126:	2f 90       	pop	r2
    1128:	08 95       	ret

0000112a <LCD_print_double_number>:
Argument(s) : number_to_print - number from 0-99 to print
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_double_number(int number_to_print)
{
    112a:	8f 92       	push	r8
    112c:	9f 92       	push	r9
    112e:	af 92       	push	r10
    1130:	bf 92       	push	r11
    1132:	cf 92       	push	r12
    1134:	df 92       	push	r13
    1136:	ef 92       	push	r14
    1138:	ff 92       	push	r15
    113a:	0f 93       	push	r16
    113c:	1f 93       	push	r17
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	4c 01       	movw	r8, r24
	unsigned char j;
	int temp;
	
	temp = number_to_print / 10;
    1144:	6a e0       	ldi	r22, 0x0A	; 10
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divmodhi4>
    114c:	5b 01       	movw	r10, r22
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
    114e:	6b 01       	movw	r12, r22
    1150:	cc 0c       	add	r12, r12
    1152:	dd 1c       	adc	r13, r13
    1154:	cc 0c       	add	r12, r12
    1156:	dd 1c       	adc	r13, r13
    1158:	c6 01       	movw	r24, r12
    115a:	86 0f       	add	r24, r22
    115c:	97 1f       	adc	r25, r23
    115e:	c0 e0       	ldi	r28, 0x00	; 0
    1160:	d0 e0       	ldi	r29, 0x00	; 0
    1162:	0f 2e       	mov	r0, r31
    1164:	fe e4       	ldi	r31, 0x4E	; 78
    1166:	ef 2e       	mov	r14, r31
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	ff 2e       	mov	r15, r31
    116c:	f0 2d       	mov	r31, r0
    116e:	9c 01       	movw	r18, r24
    1170:	22 5b       	subi	r18, 0xB2	; 178
    1172:	3e 4f       	sbci	r19, 0xFE	; 254
    1174:	69 01       	movw	r12, r18
    1176:	87 01       	movw	r16, r14
    1178:	f6 01       	movw	r30, r12
    117a:	ec 0f       	add	r30, r28
    117c:	fd 1f       	adc	r31, r29
    117e:	84 91       	lpm	r24, Z
    1180:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    1184:	21 96       	adiw	r28, 0x01	; 1
	unsigned char j;
	int temp;
	
	temp = number_to_print / 10;
	
	for(j=0; j<5; j++)
    1186:	c5 30       	cpi	r28, 0x05	; 5
    1188:	d1 05       	cpc	r29, r1
    118a:	a9 f7       	brne	.-22     	; 0x1176 <LCD_print_double_number+0x4c>
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
	temp = number_to_print - temp*10;
    118c:	26 ef       	ldi	r18, 0xF6	; 246
    118e:	a5 01       	movw	r20, r10
    1190:	24 03       	mulsu	r18, r20
    1192:	c0 01       	movw	r24, r0
    1194:	25 9f       	mul	r18, r21
    1196:	90 0d       	add	r25, r0
    1198:	11 24       	eor	r1, r1
    119a:	88 0e       	add	r8, r24
    119c:	99 1e       	adc	r9, r25
	
	for(j=0; j<5; j++)
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
    119e:	c4 01       	movw	r24, r8
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	88 0e       	add	r8, r24
    11aa:	99 1e       	adc	r9, r25
    11ac:	c0 e0       	ldi	r28, 0x00	; 0
    11ae:	d0 e0       	ldi	r29, 0x00	; 0
    11b0:	08 0d       	add	r16, r8
    11b2:	19 1d       	adc	r17, r9
    11b4:	f8 01       	movw	r30, r16
    11b6:	ec 0f       	add	r30, r28
    11b8:	fd 1f       	adc	r31, r29
    11ba:	84 91       	lpm	r24, Z
    11bc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    11c0:	21 96       	adiw	r28, 0x01	; 1
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
	temp = number_to_print - temp*10;
	
	for(j=0; j<5; j++)
    11c2:	c5 30       	cpi	r28, 0x05	; 5
    11c4:	d1 05       	cpc	r29, r1
    11c6:	b1 f7       	brne	.-20     	; 0x11b4 <LCD_print_double_number+0x8a>
	{
		LCD_send_data((pgm_read_byte(&(single_numbers [5*temp + j]))));
	}
	
}
    11c8:	df 91       	pop	r29
    11ca:	cf 91       	pop	r28
    11cc:	1f 91       	pop	r17
    11ce:	0f 91       	pop	r16
    11d0:	ff 90       	pop	r15
    11d2:	ef 90       	pop	r14
    11d4:	df 90       	pop	r13
    11d6:	cf 90       	pop	r12
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	9f 90       	pop	r9
    11de:	8f 90       	pop	r8
    11e0:	08 95       	ret

000011e2 <LCD_print_largedouble_number>:
	inverted - (1) print number inverted (0) print number normal
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_largedouble_number(int number_to_print, int x, int y, uint8_t hours, uint8_t inverted)
{
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	d6 2e       	mov	r13, r22
    11f6:	c7 2e       	mov	r12, r23
    11f8:	14 2f       	mov	r17, r20
    11fa:	b5 2e       	mov	r11, r21
	int temp1;
	int temp2;
	
	temp1 = number_to_print / 10;
    11fc:	6a e0       	ldi	r22, 0x0A	; 10
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__divmodhi4>
    1204:	eb 01       	movw	r28, r22
    1206:	7c 01       	movw	r14, r24
	temp2 = number_to_print % 10;
	//print hours if less than 10
	if((temp1 == 0) && hours)
    1208:	20 97       	sbiw	r28, 0x00	; 0
    120a:	69 f5       	brne	.+90     	; 0x1266 <LCD_print_largedouble_number+0x84>
    120c:	22 23       	and	r18, r18
    120e:	59 f1       	breq	.+86     	; 0x1266 <LCD_print_largedouble_number+0x84>
	{
		LCD_goto(x,y);
    1210:	64 2f       	mov	r22, r20
    1212:	7b 2d       	mov	r23, r11
    1214:	8d 2d       	mov	r24, r13
    1216:	9c 2d       	mov	r25, r12
    1218:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
		//print space first if number is less than 10
		LCD_print_large_number(10, x, y, NOTINVERTED);
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	41 2f       	mov	r20, r17
    1220:	6d 2d       	mov	r22, r13
    1222:	8a e0       	ldi	r24, 0x0A	; 10
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
		if(inverted)
    122a:	00 23       	and	r16, r16
    122c:	71 f0       	breq	.+28     	; 0x124a <LCD_print_largedouble_number+0x68>
		{
			LCD_goto(x,y);
    122e:	61 2f       	mov	r22, r17
    1230:	7b 2d       	mov	r23, r11
    1232:	8d 2d       	mov	r24, r13
    1234:	9c 2d       	mov	r25, r12
    1236:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, INVERTED);
    123a:	6a e0       	ldi	r22, 0x0A	; 10
    123c:	6d 0d       	add	r22, r13
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	41 2f       	mov	r20, r17
    1242:	c7 01       	movw	r24, r14
    1244:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <LCD_print_largedouble_number+0xee>
		} 
		else
		{
			LCD_goto(x,y);
    124a:	61 2f       	mov	r22, r17
    124c:	7b 2d       	mov	r23, r11
    124e:	8d 2d       	mov	r24, r13
    1250:	9c 2d       	mov	r25, r12
    1252:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, NOTINVERTED);
    1256:	6a e0       	ldi	r22, 0x0A	; 10
    1258:	6d 0d       	add	r22, r13
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	41 2f       	mov	r20, r17
    125e:	c7 01       	movw	r24, r14
    1260:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
    1264:	35 c0       	rjmp	.+106    	; 0x12d0 <LCD_print_largedouble_number+0xee>
		}
	}
	//print two numbers (number > 9)
	else
	{
		if(inverted)
    1266:	00 23       	and	r16, r16
    1268:	d1 f0       	breq	.+52     	; 0x129e <LCD_print_largedouble_number+0xbc>
		{
			LCD_goto(x,y);
    126a:	61 2f       	mov	r22, r17
    126c:	7b 2d       	mov	r23, r11
    126e:	8d 2d       	mov	r24, r13
    1270:	9c 2d       	mov	r25, r12
    1272:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp1, x, y, INVERTED);
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	41 2f       	mov	r20, r17
    127a:	6d 2d       	mov	r22, r13
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
			LCD_goto(x,y);
    1282:	61 2f       	mov	r22, r17
    1284:	7b 2d       	mov	r23, r11
    1286:	8d 2d       	mov	r24, r13
    1288:	9c 2d       	mov	r25, r12
    128a:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, INVERTED);
    128e:	6a e0       	ldi	r22, 0x0A	; 10
    1290:	6d 0d       	add	r22, r13
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	41 2f       	mov	r20, r17
    1296:	c7 01       	movw	r24, r14
    1298:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
    129c:	19 c0       	rjmp	.+50     	; 0x12d0 <LCD_print_largedouble_number+0xee>
		}
		else
		{
			LCD_goto(x,y);
    129e:	61 2f       	mov	r22, r17
    12a0:	7b 2d       	mov	r23, r11
    12a2:	8d 2d       	mov	r24, r13
    12a4:	9c 2d       	mov	r25, r12
    12a6:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp1, x, y, NOTINVERTED);
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	41 2f       	mov	r20, r17
    12ae:	6d 2d       	mov	r22, r13
    12b0:	ce 01       	movw	r24, r28
    12b2:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
			LCD_goto(x,y);
    12b6:	61 2f       	mov	r22, r17
    12b8:	7b 2d       	mov	r23, r11
    12ba:	8d 2d       	mov	r24, r13
    12bc:	9c 2d       	mov	r25, r12
    12be:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			LCD_print_large_number(temp2, x+10,y, NOTINVERTED);
    12c2:	6a e0       	ldi	r22, 0x0A	; 10
    12c4:	6d 0d       	add	r22, r13
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	41 2f       	mov	r20, r17
    12ca:	c7 01       	movw	r24, r14
    12cc:	0e 94 20 08 	call	0x1040	; 0x1040 <LCD_print_large_number>
		}
		
	}
	
}
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	bf 90       	pop	r11
    12e2:	08 95       	ret

000012e4 <LCD_print_large_colon>:
	x - x-position of colon
	y - y-position of colon
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_large_colon(uint8_t x, uint8_t y){
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
    12f4:	e6 2e       	mov	r14, r22
    12f6:	f1 2c       	mov	r15, r1
    12f8:	c8 2e       	mov	r12, r24
    12fa:	d1 2c       	mov	r13, r1
    12fc:	b7 01       	movw	r22, r14
    12fe:	c6 01       	movw	r24, r12
    1300:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
    1304:	02 e7       	ldi	r16, 0x72	; 114
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	c8 e6       	ldi	r28, 0x68	; 104
    130a:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 10; j++)
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
    130c:	fe 01       	movw	r30, r28
    130e:	84 91       	lpm	r24, Z
    1310:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    1314:	21 96       	adiw	r28, 0x01	; 1
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    1316:	c0 17       	cp	r28, r16
    1318:	d1 07       	cpc	r29, r17
    131a:	c1 f7       	brne	.-16     	; 0x130c <LCD_print_large_colon+0x28>
	int i,j;
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
    131c:	b7 01       	movw	r22, r14
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	c6 01       	movw	r24, r12
    1324:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
		for(j = 0; j < 10; j++)
    1328:	c0 e0       	ldi	r28, 0x00	; 0
    132a:	d0 e0       	ldi	r29, 0x00	; 0
    132c:	08 e6       	ldi	r16, 0x68	; 104
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	0b 5f       	subi	r16, 0xFB	; 251
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	f8 01       	movw	r30, r16
    1336:	ec 0f       	add	r30, r28
    1338:	fd 1f       	adc	r31, r29
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
    133a:	84 91       	lpm	r24, Z
    133c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
	
	// Write 41 bytes then a space and increment y and repeat until repeated 6 times
	for(i = 0; i < 2; i++)
	{
		LCD_goto(x,y+i);
		for(j = 0; j < 10; j++)
    1340:	21 96       	adiw	r28, 0x01	; 1
    1342:	ca 30       	cpi	r28, 0x0A	; 10
    1344:	d1 05       	cpc	r29, r1
    1346:	b1 f7       	brne	.-20     	; 0x1334 <LCD_print_large_colon+0x50>
		{
			LCD_send_data(pgm_read_byte(&(large_colon[j + (i*5)])));
		}
	}
	LCD_set_y(y);
    1348:	c7 01       	movw	r24, r14
    134a:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_set_y>
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	08 95       	ret

00001360 <LCD_print_string>:
	inverted - (1) print inverted string (0) print normal string
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_string(const char *string, BYTE inverted)
{
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
	// Prints character of current index of string until string ends
	if(inverted){
    1366:	61 11       	cpse	r22, r1
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <LCD_print_string+0x12>
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
		}
	}
	else{
		while ( *string )
    136a:	88 81       	ld	r24, Y
    136c:	81 11       	cpse	r24, r1
    136e:	0b c0       	rjmp	.+22     	; 0x1386 <LCD_print_string+0x26>
    1370:	10 c0       	rjmp	.+32     	; 0x1392 <LCD_print_string+0x32>

void LCD_print_string(const char *string, BYTE inverted)
{
	// Prints character of current index of string until string ends
	if(inverted){
		while ( *string )
    1372:	88 81       	ld	r24, Y
    1374:	88 23       	and	r24, r24
    1376:	69 f0       	breq	.+26     	; 0x1392 <LCD_print_string+0x32>
    1378:	21 96       	adiw	r28, 0x01	; 1
		{
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
    137a:	0e 94 fd 07 	call	0xffa	; 0xffa <LCD_print_inverted_char>

void LCD_print_string(const char *string, BYTE inverted)
{
	// Prints character of current index of string until string ends
	if(inverted){
		while ( *string )
    137e:	89 91       	ld	r24, Y+
    1380:	81 11       	cpse	r24, r1
    1382:	fb cf       	rjmp	.-10     	; 0x137a <LCD_print_string+0x1a>
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <LCD_print_string+0x32>
    1386:	21 96       	adiw	r28, 0x01	; 1
	}
	else{
		while ( *string )
		{
			// Prints character of current index of string
			LCD_print_char( *string++ );
    1388:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
			// Prints character of current index of string
			LCD_print_inverted_char( *string++ );
		}
	}
	else{
		while ( *string )
    138c:	89 91       	ld	r24, Y+
    138e:	81 11       	cpse	r24, r1
    1390:	fb cf       	rjmp	.-10     	; 0x1388 <LCD_print_string+0x28>
			// Prints character of current index of string
			LCD_print_char( *string++ );
		}
	}
	
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <LCD_print_bottom_menu>:
	*button3 - pointer to button3 label
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_bottom_menu(const char *button1, const char *button2, const char *button3)
{
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	ec 01       	movw	r28, r24
    13aa:	6b 01       	movw	r12, r22
    13ac:	7a 01       	movw	r14, r20
	int tot_string_length, temp_calc, max_space, i;
	
	//Finding total number of characters
	tot_string_length = strlen(button1) + strlen(button2) + strlen(button3);
    13ae:	dc 01       	movw	r26, r24
    13b0:	0d 90       	ld	r0, X+
    13b2:	00 20       	and	r0, r0
    13b4:	e9 f7       	brne	.-6      	; 0x13b0 <LCD_print_bottom_menu+0x18>
    13b6:	11 97       	sbiw	r26, 0x01	; 1
    13b8:	cd 01       	movw	r24, r26
    13ba:	8c 1b       	sub	r24, r28
    13bc:	9d 0b       	sbc	r25, r29
    13be:	db 01       	movw	r26, r22
    13c0:	0d 90       	ld	r0, X+
    13c2:	00 20       	and	r0, r0
    13c4:	e9 f7       	brne	.-6      	; 0x13c0 <LCD_print_bottom_menu+0x28>
    13c6:	11 97       	sbiw	r26, 0x01	; 1
    13c8:	a6 1b       	sub	r26, r22
    13ca:	b7 0b       	sbc	r27, r23
    13cc:	fa 01       	movw	r30, r20
    13ce:	01 90       	ld	r0, Z+
    13d0:	00 20       	and	r0, r0
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <LCD_print_bottom_menu+0x36>
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	e4 1b       	sub	r30, r20
    13d8:	f5 0b       	sbc	r31, r21
    13da:	a8 0f       	add	r26, r24
    13dc:	b9 1f       	adc	r27, r25
    13de:	ea 0f       	add	r30, r26
    13e0:	fb 1f       	adc	r31, r27
	
	temp_calc = 16 - (tot_string_length);
    13e2:	80 e1       	ldi	r24, 0x10	; 16
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	8e 1b       	sub	r24, r30
    13e8:	9f 0b       	sbc	r25, r31
	
	max_space = temp_calc / 2;
    13ea:	8c 01       	movw	r16, r24
    13ec:	12 f4       	brpl	.+4      	; 0x13f2 <LCD_print_bottom_menu+0x5a>
    13ee:	0f 5f       	subi	r16, 0xFF	; 255
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	15 95       	asr	r17
    13f4:	07 95       	ror	r16
	
	// Set cursor to bottom left
	LCD_goto(0,5);
    13f6:	65 e0       	ldi	r22, 0x05	; 5
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	
	// print first button command heading
	LCD_print_string(button1,0);
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	ce 01       	movw	r24, r28
    1406:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	
	for(i = 0; i < max_space; i++)
    140a:	10 16       	cp	r1, r16
    140c:	11 06       	cpc	r1, r17
    140e:	ec f4       	brge	.+58     	; 0x144a <LCD_print_bottom_menu+0xb2>
    1410:	c0 e0       	ldi	r28, 0x00	; 0
    1412:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// print a space after the first command
		LCD_print_char(' ');
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	LCD_goto(0,5);
	
	// print first button command heading
	LCD_print_string(button1,0);
	
	for(i = 0; i < max_space; i++)
    141a:	21 96       	adiw	r28, 0x01	; 1
    141c:	c0 17       	cp	r28, r16
    141e:	d1 07       	cpc	r29, r17
    1420:	c9 f7       	brne	.-14     	; 0x1414 <LCD_print_bottom_menu+0x7c>
    1422:	0c c0       	rjmp	.+24     	; 0x143c <LCD_print_bottom_menu+0xa4>
	LCD_print_string(button2,0);
	
	for(i = 0; i < max_space; i++)
	{
		// print a space after the first command
		LCD_print_char(' ');
    1424:	80 e2       	ldi	r24, 0x20	; 32
    1426:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
	
	for(i = 0; i < max_space; i++)
    142a:	21 96       	adiw	r28, 0x01	; 1
    142c:	c0 17       	cp	r28, r16
    142e:	d1 07       	cpc	r29, r17
    1430:	c9 f7       	brne	.-14     	; 0x1424 <LCD_print_bottom_menu+0x8c>
	{
		// print a space after the first command
		LCD_print_char(' ');
	}
	// print third button command heading
	LCD_print_string(button3,0);
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	c7 01       	movw	r24, r14
    1436:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    143a:	0c c0       	rjmp	.+24     	; 0x1454 <LCD_print_bottom_menu+0xbc>
		// print a space after the first command
		LCD_print_char(' ');
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	c6 01       	movw	r24, r12
    1440:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	
	for(i = 0; i < max_space; i++)
    1444:	c0 e0       	ldi	r28, 0x00	; 0
    1446:	d0 e0       	ldi	r29, 0x00	; 0
    1448:	ed cf       	rjmp	.-38     	; 0x1424 <LCD_print_bottom_menu+0x8c>
		// print a space after the first command
		LCD_print_char(' ');
	}
	
	// print second button command heading
	LCD_print_string(button2,0);
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	c6 01       	movw	r24, r12
    144e:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    1452:	ef cf       	rjmp	.-34     	; 0x1432 <LCD_print_bottom_menu+0x9a>
		// print a space after the first command
		LCD_print_char(' ');
	}
	// print third button command heading
	LCD_print_string(button3,0);
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	08 95       	ret

00001466 <LCD_print_time_display>:
	*a2 - pointer to string for alarm2 on/off
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_time_display(time_t current_time, int current_temperature, char *button1, char *button2, char *a1, char *a2 )
{
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	28 97       	sbiw	r28, 0x08	; 8
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	29 83       	std	Y+1, r18	; 0x01
    1490:	3a 83       	std	Y+2, r19	; 0x02
    1492:	4b 83       	std	Y+3, r20	; 0x03
    1494:	6d 83       	std	Y+5, r22	; 0x05
    1496:	7e 83       	std	Y+6, r23	; 0x06
    1498:	8f 83       	std	Y+7, r24	; 0x07
    149a:	98 87       	std	Y+8, r25	; 0x08
	// Example of Time display
	// Printing time portion
	LCD_goto(0,0);
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_double_number(current_time.hour);
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_char(':');
    14b0:	8a e3       	ldi	r24, 0x3A	; 58
    14b2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	LCD_print_double_number(current_time.minute);
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_char(':');
    14be:	8a e3       	ldi	r24, 0x3A	; 58
    14c0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	LCD_print_double_number(current_time.second);
    14c4:	8f 81       	ldd	r24, Y+7	; 0x07
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_char(' ');
    14cc:	80 e2       	ldi	r24, 0x20	; 32
    14ce:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	if(current_time.AM_PM)
    14d2:	88 85       	ldd	r24, Y+8	; 0x08
    14d4:	88 23       	and	r24, r24
    14d6:	31 f0       	breq	.+12     	; 0x14e4 <LCD_print_time_display+0x7e>
	{
		LCD_print_string("PM",0);
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	83 e3       	ldi	r24, 0x33	; 51
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    14e2:	05 c0       	rjmp	.+10     	; 0x14ee <LCD_print_time_display+0x88>
	}
	else
	{
		LCD_print_string("AM",0);
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	86 e3       	ldi	r24, 0x36	; 54
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	}
	
	// Printing date portion
	LCD_goto(0,2);
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_double_number(current_time.month);
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_char('/');
    1502:	8f e2       	ldi	r24, 0x2F	; 47
    1504:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	LCD_print_double_number(current_time.day);
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_char('/');
    1510:	8f e2       	ldi	r24, 0x2F	; 47
    1512:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LCD_print_char>
	LCD_print_double_number(current_time.year);
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	
	// Printing Temperature portion
	LCD_goto(64,1);
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e4       	ldi	r24, 0x40	; 64
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_double_number(current_temperature);
    152a:	c8 01       	movw	r24, r16
    152c:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_print_double_number>
	LCD_print_string(" C",0);
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	89 e3       	ldi	r24, 0x39	; 57
    1534:	91 e0       	ldi	r25, 0x01	; 1
    1536:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	
	// Printing bottom menu
	LCD_goto(65,4);
    153a:	64 e0       	ldi	r22, 0x04	; 4
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	81 e4       	ldi	r24, 0x41	; 65
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(a1,0);
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	c5 01       	movw	r24, r10
    154a:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_print_bottom_menu(button1, button2, a2);
    154e:	a4 01       	movw	r20, r8
    1550:	b6 01       	movw	r22, r12
    1552:	c7 01       	movw	r24, r14
    1554:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_print_bottom_menu>
}
    1558:	28 96       	adiw	r28, 0x08	; 8
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	08 95       	ret

0000157e <LCD_print_alarm_display>:
	selection - parameter selected
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_alarm_display(alarm_t alarmtime, uint8_t selection)
{
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	28 97       	sbiw	r28, 0x08	; 8
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	6d 83       	std	Y+5, r22	; 0x05
    159c:	e2 2e       	mov	r14, r18
    159e:	13 2f       	mov	r17, r19
    15a0:	f4 2e       	mov	r15, r20
	int i;
	
	LCD_clear_screen();
    15a2:	0e 94 a1 07 	call	0xf42	; 0xf42 <LCD_clear_screen>
	LCD_goto(0,0);
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	if(alarmtime.alarm_number == 1)
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	91 30       	cpi	r25, 0x01	; 1
    15b6:	31 f4       	brne	.+12     	; 0x15c4 <LCD_print_alarm_display+0x46>
	{
		LCD_print_string("A1:",0);
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	8c e3       	ldi	r24, 0x3C	; 60
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <LCD_print_alarm_display+0x50>
	}
	else
	{
		LCD_print_string("A2:",0);
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	80 e4       	ldi	r24, 0x40	; 64
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	}
	
	switch (selection)
    15ce:	01 30       	cpi	r16, 0x01	; 1
    15d0:	a1 f1       	breq	.+104    	; 0x163a <LCD_print_alarm_display+0xbc>
    15d2:	20 f0       	brcs	.+8      	; 0x15dc <LCD_print_alarm_display+0x5e>
    15d4:	02 30       	cpi	r16, 0x02	; 2
    15d6:	09 f4       	brne	.+2      	; 0x15da <LCD_print_alarm_display+0x5c>
    15d8:	5f c0       	rjmp	.+190    	; 0x1698 <LCD_print_alarm_display+0x11a>
    15da:	a7 c0       	rjmp	.+334    	; 0x172a <LCD_print_alarm_display+0x1ac>
	{
		case (MINUTES):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
    15dc:	00 e0       	ldi	r16, 0x00	; 0
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	62 e1       	ldi	r22, 0x12	; 18
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	8e 2d       	mov	r24, r14
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	86 e2       	ldi	r24, 0x26	; 38
    15f4:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, INVERTED);
    15f8:	01 e0       	ldi	r16, 0x01	; 1
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	6b e2       	ldi	r22, 0x2B	; 43
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	81 2f       	mov	r24, r17
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	81 e3       	ldi	r24, 0x31	; 49
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
			LCD_set_y(2);
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_set_y>
			if(alarmtime.AM_PM){
    161e:	ff 20       	and	r15, r15
    1620:	31 f0       	breq	.+12     	; 0x162e <LCD_print_alarm_display+0xb0>
				LCD_print_string("PM",0);
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	83 e3       	ldi	r24, 0x33	; 51
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    162c:	7e c0       	rjmp	.+252    	; 0x172a <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_print_string("AM",0);
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	86 e3       	ldi	r24, 0x36	; 54
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    1638:	78 c0       	rjmp	.+240    	; 0x172a <LCD_print_alarm_display+0x1ac>
			}
			break;
		case (HOURS):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, INVERTED);
    163a:	01 e0       	ldi	r16, 0x01	; 1
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	62 e1       	ldi	r22, 0x12	; 18
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	8e 2d       	mov	r24, r14
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	86 e2       	ldi	r24, 0x26	; 38
    1652:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	6b e2       	ldi	r22, 0x2B	; 43
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	81 2f       	mov	r24, r17
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	81 e3       	ldi	r24, 0x31	; 49
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
			LCD_set_y(2);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_set_y>
			if(alarmtime.AM_PM){
    167c:	ff 20       	and	r15, r15
    167e:	31 f0       	breq	.+12     	; 0x168c <LCD_print_alarm_display+0x10e>
				LCD_print_string("PM",NOTINVERTED);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	83 e3       	ldi	r24, 0x33	; 51
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    168a:	4f c0       	rjmp	.+158    	; 0x172a <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_print_string("AM",NOTINVERTED);
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	86 e3       	ldi	r24, 0x36	; 54
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
    1696:	49 c0       	rjmp	.+146    	; 0x172a <LCD_print_alarm_display+0x1ac>
			}
			break;
		case (AMPM):
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
    1698:	00 e0       	ldi	r16, 0x00	; 0
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	62 e1       	ldi	r22, 0x12	; 18
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	8e 2d       	mov	r24, r14
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_large_colon(38,1);
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	86 e2       	ldi	r24, 0x26	; 38
    16b0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCD_print_large_colon>
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	6b e2       	ldi	r22, 0x2B	; 43
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	81 2f       	mov	r24, r17
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_print_largedouble_number>
			LCD_print_string(" ",0);
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	81 e3       	ldi	r24, 0x31	; 49
    16ca:	91 e0       	ldi	r25, 0x01	; 1
    16cc:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
			LCD_set_y(1);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_set_y>
    16d8:	0c e0       	ldi	r16, 0x0C	; 12
    16da:	10 e0       	ldi	r17, 0x00	; 0
			for(i=0;i<12;i++){
				LCD_send_data(0x80);
    16dc:	80 e8       	ldi	r24, 0x80	; 128
    16de:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    16e2:	01 50       	subi	r16, 0x01	; 1
    16e4:	11 09       	sbc	r17, r1
			LCD_print_largedouble_number(alarmtime.hour, 18,1,HOURS, NOTINVERTED);
			LCD_print_large_colon(38,1);
			LCD_print_largedouble_number(alarmtime.minute, 43, 1, MINUTES, NOTINVERTED);
			LCD_print_string(" ",0);
			LCD_set_y(1);
			for(i=0;i<12;i++){
    16e6:	01 15       	cp	r16, r1
    16e8:	11 05       	cpc	r17, r1
    16ea:	c1 f7       	brne	.-16     	; 0x16dc <LCD_print_alarm_display+0x15e>
				LCD_send_data(0x80);
			}
			LCD_goto(68,2);
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	84 e4       	ldi	r24, 0x44	; 68
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
			if(alarmtime.AM_PM){
    16f8:	ff 20       	and	r15, r15
    16fa:	61 f0       	breq	.+24     	; 0x1714 <LCD_print_alarm_display+0x196>
				LCD_send_data(0xFF);
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
				LCD_print_string("PM",INVERTED);
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	83 e3       	ldi	r24, 0x33	; 51
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
				LCD_send_data(0xFF);
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
    1712:	0b c0       	rjmp	.+22     	; 0x172a <LCD_print_alarm_display+0x1ac>
			}
			else{
				LCD_send_data(0xFF);
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
				LCD_print_string("AM",INVERTED);
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	86 e3       	ldi	r24, 0x36	; 54
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
				LCD_send_data(0xFF);
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_send_data>
			}
			break;
	}
	
	LCD_print_bottom_menu("Down", "Set", "Up");
    172a:	44 e4       	ldi	r20, 0x44	; 68
    172c:	51 e0       	ldi	r21, 0x01	; 1
    172e:	67 e4       	ldi	r22, 0x47	; 71
    1730:	71 e0       	ldi	r23, 0x01	; 1
    1732:	8b e4       	ldi	r24, 0x4B	; 75
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 cc 09 	call	0x1398	; 0x1398 <LCD_print_bottom_menu>
}
    173a:	28 96       	adiw	r28, 0x08	; 8
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	ff 90       	pop	r15
    1750:	ef 90       	pop	r14
    1752:	08 95       	ret

00001754 <LCD_print_menu>:
Argument(s) : selection - selected state 0-5
Return value : None.
--------------------------------------------------------------------------------------------------*/

void LCD_print_menu(uint8_t selection)
{
    1754:	cf 93       	push	r28
    1756:	c8 2f       	mov	r28, r24
	LCD_goto(31,0);
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	8f e1       	ldi	r24, 0x1F	; 31
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[0],selection == 0);
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	c1 11       	cpse	r28, r1
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	80 e5       	ldi	r24, 0x50	; 80
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_goto(23,1);
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	87 e1       	ldi	r24, 0x17	; 23
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[1],selection == 1);
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	c1 30       	cpi	r28, 0x01	; 1
    1782:	09 f0       	breq	.+2      	; 0x1786 <LCD_print_menu+0x32>
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	8c e5       	ldi	r24, 0x5C	; 92
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_goto(21,2);
    178e:	62 e0       	ldi	r22, 0x02	; 2
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	85 e1       	ldi	r24, 0x15	; 21
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[2],selection == 2);
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	c2 30       	cpi	r28, 0x02	; 2
    179e:	09 f0       	breq	.+2      	; 0x17a2 <LCD_print_menu+0x4e>
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	88 e6       	ldi	r24, 0x68	; 104
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_goto(13,3);
    17aa:	63 e0       	ldi	r22, 0x03	; 3
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	8d e0       	ldi	r24, 0x0D	; 13
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[3],selection == 3);
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	c3 30       	cpi	r28, 0x03	; 3
    17ba:	09 f0       	breq	.+2      	; 0x17be <LCD_print_menu+0x6a>
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	84 e7       	ldi	r24, 0x74	; 116
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_goto(13,4);
    17c6:	64 e0       	ldi	r22, 0x04	; 4
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	8d e0       	ldi	r24, 0x0D	; 13
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[4],selection == 4);
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	c4 30       	cpi	r28, 0x04	; 4
    17d6:	09 f0       	breq	.+2      	; 0x17da <LCD_print_menu+0x86>
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	80 e8       	ldi	r24, 0x80	; 128
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	LCD_goto(31,5);
    17e2:	65 e0       	ldi	r22, 0x05	; 5
    17e4:	70 e0       	ldi	r23, 0x00	; 0
    17e6:	8f e1       	ldi	r24, 0x1F	; 31
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 96 07 	call	0xf2c	; 0xf2c <LCD_goto>
	LCD_print_string(menu_text[5],selection == 5);
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	c5 30       	cpi	r28, 0x05	; 5
    17f2:	09 f0       	breq	.+2      	; 0x17f6 <LCD_print_menu+0xa2>
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	8c e8       	ldi	r24, 0x8C	; 140
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_print_string>
	
}
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <fromBCD>:
Argument(s) : data_in - Raw Data from RTC
Return value : Decoded integer
--------------------------------------------------------------------------------------------------*/

uint8_t fromBCD(uint8_t data_in){
	return ((data_in & 0x0F) + 10*((data_in>>4) & 0x07));
    1802:	98 2f       	mov	r25, r24
    1804:	96 95       	lsr	r25
    1806:	96 95       	lsr	r25
    1808:	96 95       	lsr	r25
    180a:	9e 70       	andi	r25, 0x0E	; 14
    180c:	29 2f       	mov	r18, r25
    180e:	22 0f       	add	r18, r18
    1810:	22 0f       	add	r18, r18
    1812:	92 0f       	add	r25, r18
    1814:	8f 70       	andi	r24, 0x0F	; 15
}
    1816:	89 0f       	add	r24, r25
    1818:	08 95       	ret

0000181a <RTC_Read>:
Argument(s) : Pointer to the time_t data structure used for the current time
Return value : None.
--------------------------------------------------------------------------------------------------*/

void RTC_Read(time_t *times)
{
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
	//point to first address
	uint8_t hour_temp;
	//uint8_t err; // dummy return variable
	i2c_start(RTC_WRITE);
    1822:	80 ed       	ldi	r24, 0xD0	; 208
    1824:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_start>
	i2c_write(SECONDS_R);
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <i2c_write>
	//initialize read mode
	i2c_rep_start(RTC_READ);
    182e:	81 ed       	ldi	r24, 0xD1	; 209
    1830:	0e 94 c6 0c 	call	0x198c	; 0x198c <i2c_rep_start>
	//read all the data
	times->second = fromBCD(i2c_readAck());
    1834:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    1838:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    183c:	8e 83       	std	Y+6, r24	; 0x06
	times->minute = fromBCD(i2c_readAck());
    183e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    1842:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    1846:	8d 83       	std	Y+5, r24	; 0x05
	hour_temp = i2c_readAck();
    1848:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    184c:	18 2f       	mov	r17, r24
	times->day_of_week = fromBCD(i2c_readAck());
    184e:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    1852:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    1856:	8b 83       	std	Y+3, r24	; 0x03
	times->day = fromBCD(i2c_readAck());
    1858:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    185c:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    1860:	8a 83       	std	Y+2, r24	; 0x02
	times->month = fromBCD(i2c_readAck());
    1862:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <i2c_readAck>
    1866:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    186a:	89 83       	std	Y+1, r24	; 0x01
	times->year = fromBCD(i2c_readNak());
    186c:	0e 94 ef 0c 	call	0x19de	; 0x19de <i2c_readNak>
    1870:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    1874:	88 83       	st	Y, r24
	//split apart hour and am/pm
	times->hour  = fromBCD(hour_temp & 0x1F);
    1876:	81 2f       	mov	r24, r17
    1878:	8f 71       	andi	r24, 0x1F	; 31
    187a:	0e 94 01 0c 	call	0x1802	; 0x1802 <fromBCD>
    187e:	8c 83       	std	Y+4, r24	; 0x04
	times->AM_PM = (hour_temp & _BV(5))>>5;
    1880:	15 fb       	bst	r17, 5
    1882:	11 27       	eor	r17, r17
    1884:	10 f9       	bld	r17, 0
    1886:	1f 83       	std	Y+7, r17	; 0x07
	i2c_stop();
    1888:	0e 94 c9 0c 	call	0x1992	; 0x1992 <i2c_stop>
	times->minute = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, MINUTES_R));
	times->second = fromBCD(I2C_RecieveMessage(RTC_ADDRESS, SECONDS_R));
	times->AM_PM = (I2C_RecieveMessage(RTC_ADDRESS, HOURS_R) & _BV(5))>>5;
	*/
	
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	08 95       	ret

00001894 <Timer0_Init>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void Timer0_Init(void){
	//Setup timer 0 w/ interrupt every ms and pre-scale of 64
	TCCR0A = _BV(WGM01);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
    1898:	93 e0       	ldi	r25, 0x03	; 3
    189a:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = _BV(OCIE0A);
    189c:	80 93 6e 00 	sts	0x006E, r24
	OCR0A = 250;
    18a0:	8a ef       	ldi	r24, 0xFA	; 250
    18a2:	87 bd       	out	0x27, r24	; 39
	TIFR0 |= _BV(OCF0A);
    18a4:	a9 9a       	sbi	0x15, 1	; 21
	TCNT0 = 0;
    18a6:	16 bc       	out	0x26, r1	; 38
    18a8:	08 95       	ret

000018aa <Timer2_Init>:
Return value : None.
--------------------------------------------------------------------------------------------------*/

void Timer2_Init(void){
	//Setup timer 1 to run in CTC mode 4 with 1024 prescalar
	TCCR2A = _BV(WGM21);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B |= _BV(CS22) | _BV(CS21) | _BV(CS20);
    18b0:	e1 eb       	ldi	r30, 0xB1	; 177
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	87 60       	ori	r24, 0x07	; 7
    18b8:	80 83       	st	Z, r24
    18ba:	08 95       	ret

000018bc <Timer1_Init>:
Argument(s) : None.
Return value : None.
--------------------------------------------------------------------------------------------------*/
void Timer1_Init(void)
{
	DDRB |= _BV(PB1);
    18bc:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = _BV(COM1A1);
    18be:	80 e8       	ldi	r24, 0x80	; 128
    18c0:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM13);
    18c4:	80 e1       	ldi	r24, 0x10	; 16
    18c6:	80 93 81 00 	sts	0x0081, r24
	ICR1 = 390;
    18ca:	86 e8       	ldi	r24, 0x86	; 134
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	90 93 87 00 	sts	0x0087, r25
    18d2:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 90;
    18d6:	8a e5       	ldi	r24, 0x5A	; 90
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 93 89 00 	sts	0x0089, r25
    18de:	80 93 88 00 	sts	0x0088, r24
    18e2:	08 95       	ret

000018e4 <hw_delay>:
--------------------------------------------------------------------------------------------------*/
void hw_delay(uint16_t delay_ms)
{
	int i;
	//put delay into output compare register
	OCR2A = 15;
    18e4:	2f e0       	ldi	r18, 0x0F	; 15
    18e6:	20 93 b3 00 	sts	0x00B3, r18
	//clear output compare flag
	TIFR2 |= _BV(OCF2A);
    18ea:	b9 9a       	sbi	0x17, 1	; 23
	//reset timer
	TCNT2 = 0;
    18ec:	10 92 b2 00 	sts	0x00B2, r1
	
	for(i = 0; i < delay_ms; i++)
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	51 f0       	breq	.+20     	; 0x1908 <hw_delay+0x24>
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
	{
		//wait for compare flag to be high
		while(!(TIFR2 & _BV(OCF2A)));
    18f8:	b9 9b       	sbis	0x17, 1	; 23
    18fa:	fe cf       	rjmp	.-4      	; 0x18f8 <hw_delay+0x14>
		//clear compare flag
		TIFR2 |= _BV(OCF2A);
    18fc:	b9 9a       	sbi	0x17, 1	; 23
	//clear output compare flag
	TIFR2 |= _BV(OCF2A);
	//reset timer
	TCNT2 = 0;
	
	for(i = 0; i < delay_ms; i++)
    18fe:	2f 5f       	subi	r18, 0xFF	; 255
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	c1 f7       	brne	.-16     	; 0x18f8 <hw_delay+0x14>
    1908:	08 95       	ret

0000190a <Timer1PWM_OnOff>:
Description : Function that enables and disables the Timer 1 PWM to turn on and off the bell alarm
Argument(s) : state - 1 turns PWM on and 0 turns PWM off
Return value : None.
--------------------------------------------------------------------------------------------------*/
void Timer1PWM_OnOff(uint8_t state){
	if (state){
    190a:	88 23       	and	r24, r24
    190c:	49 f0       	breq	.+18     	; 0x1920 <Timer1PWM_OnOff+0x16>
		TCCR1B |= _BV(CS12) | _BV(CS10);
    190e:	e1 e8       	ldi	r30, 0x81	; 129
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	85 60       	ori	r24, 0x05	; 5
    1916:	80 83       	st	Z, r24
		TCCR1A = _BV(COM1A1);
    1918:	80 e8       	ldi	r24, 0x80	; 128
    191a:	80 93 80 00 	sts	0x0080, r24
    191e:	08 95       	ret
		
	}
	else{
		TCCR1B &= ~_BV(CS12) & ~_BV(CS10);
    1920:	e1 e8       	ldi	r30, 0x81	; 129
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8a 7f       	andi	r24, 0xFA	; 250
    1928:	80 83       	st	Z, r24
		PORTB &= ~_BV(PB1);	
    192a:	29 98       	cbi	0x05, 1	; 5
		TCCR1A = 0;
    192c:	10 92 80 00 	sts	0x0080, r1
    1930:	08 95       	ret

00001932 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1932:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1936:	88 e4       	ldi	r24, 0x48	; 72
    1938:	80 93 b8 00 	sts	0x00B8, r24
    193c:	08 95       	ret

0000193e <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    193e:	94 ea       	ldi	r25, 0xA4	; 164
    1940:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1944:	ec eb       	ldi	r30, 0xBC	; 188
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	90 81       	ld	r25, Z
    194a:	99 23       	and	r25, r25
    194c:	ec f7       	brge	.-6      	; 0x1948 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    194e:	90 91 b9 00 	lds	r25, 0x00B9
    1952:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1954:	98 30       	cpi	r25, 0x08	; 8
    1956:	11 f0       	breq	.+4      	; 0x195c <i2c_start+0x1e>
    1958:	90 31       	cpi	r25, 0x10	; 16
    195a:	a1 f4       	brne	.+40     	; 0x1984 <i2c_start+0x46>

	// send device address
	TWDR = address;
    195c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1960:	84 e8       	ldi	r24, 0x84	; 132
    1962:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1966:	ec eb       	ldi	r30, 0xBC	; 188
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	88 23       	and	r24, r24
    196e:	ec f7       	brge	.-6      	; 0x196a <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1970:	90 91 b9 00 	lds	r25, 0x00B9
    1974:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1976:	98 31       	cpi	r25, 0x18	; 24
    1978:	39 f0       	breq	.+14     	; 0x1988 <i2c_start+0x4a>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 34       	cpi	r25, 0x40	; 64
    197e:	29 f4       	brne	.+10     	; 0x198a <i2c_start+0x4c>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1988:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    198a:	08 95       	ret

0000198c <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    198c:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_start>

}/* i2c_rep_start */
    1990:	08 95       	ret

00001992 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1992:	84 e9       	ldi	r24, 0x94	; 148
    1994:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1998:	ec eb       	ldi	r30, 0xBC	; 188
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	84 fd       	sbrc	r24, 4
    19a0:	fd cf       	rjmp	.-6      	; 0x199c <i2c_stop+0xa>

}/* i2c_stop */
    19a2:	08 95       	ret

000019a4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    19a4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    19a8:	84 e8       	ldi	r24, 0x84	; 132
    19aa:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    19ae:	ec eb       	ldi	r30, 0xBC	; 188
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 23       	and	r24, r24
    19b6:	ec f7       	brge	.-6      	; 0x19b2 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    19b8:	90 91 b9 00 	lds	r25, 0x00B9
    19bc:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	98 32       	cpi	r25, 0x28	; 40
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <i2c_write+0x22>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    19c6:	08 95       	ret

000019c8 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    19c8:	84 ec       	ldi	r24, 0xC4	; 196
    19ca:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    19ce:	ec eb       	ldi	r30, 0xBC	; 188
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 23       	and	r24, r24
    19d6:	ec f7       	brge	.-6      	; 0x19d2 <i2c_readAck+0xa>

    return TWDR;
    19d8:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    19dc:	08 95       	ret

000019de <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    19de:	84 e8       	ldi	r24, 0x84	; 132
    19e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    19e4:	ec eb       	ldi	r30, 0xBC	; 188
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	88 23       	and	r24, r24
    19ec:	ec f7       	brge	.-6      	; 0x19e8 <i2c_readNak+0xa>
	
    return TWDR;
    19ee:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    19f2:	08 95       	ret

000019f4 <__divmodhi4>:
    19f4:	97 fb       	bst	r25, 7
    19f6:	07 2e       	mov	r0, r23
    19f8:	16 f4       	brtc	.+4      	; 0x19fe <__divmodhi4+0xa>
    19fa:	00 94       	com	r0
    19fc:	07 d0       	rcall	.+14     	; 0x1a0c <__divmodhi4_neg1>
    19fe:	77 fd       	sbrc	r23, 7
    1a00:	09 d0       	rcall	.+18     	; 0x1a14 <__divmodhi4_neg2>
    1a02:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__udivmodhi4>
    1a06:	07 fc       	sbrc	r0, 7
    1a08:	05 d0       	rcall	.+10     	; 0x1a14 <__divmodhi4_neg2>
    1a0a:	3e f4       	brtc	.+14     	; 0x1a1a <__divmodhi4_exit>

00001a0c <__divmodhi4_neg1>:
    1a0c:	90 95       	com	r25
    1a0e:	81 95       	neg	r24
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	08 95       	ret

00001a14 <__divmodhi4_neg2>:
    1a14:	70 95       	com	r23
    1a16:	61 95       	neg	r22
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255

00001a1a <__divmodhi4_exit>:
    1a1a:	08 95       	ret

00001a1c <__udivmodhi4>:
    1a1c:	aa 1b       	sub	r26, r26
    1a1e:	bb 1b       	sub	r27, r27
    1a20:	51 e1       	ldi	r21, 0x11	; 17
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <__udivmodhi4_ep>

00001a24 <__udivmodhi4_loop>:
    1a24:	aa 1f       	adc	r26, r26
    1a26:	bb 1f       	adc	r27, r27
    1a28:	a6 17       	cp	r26, r22
    1a2a:	b7 07       	cpc	r27, r23
    1a2c:	10 f0       	brcs	.+4      	; 0x1a32 <__udivmodhi4_ep>
    1a2e:	a6 1b       	sub	r26, r22
    1a30:	b7 0b       	sbc	r27, r23

00001a32 <__udivmodhi4_ep>:
    1a32:	88 1f       	adc	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	5a 95       	dec	r21
    1a38:	a9 f7       	brne	.-22     	; 0x1a24 <__udivmodhi4_loop>
    1a3a:	80 95       	com	r24
    1a3c:	90 95       	com	r25
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	08 95       	ret

00001a44 <__eerd_byte_m328p>:
    1a44:	f9 99       	sbic	0x1f, 1	; 31
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <__eerd_byte_m328p>
    1a48:	92 bd       	out	0x22, r25	; 34
    1a4a:	81 bd       	out	0x21, r24	; 33
    1a4c:	f8 9a       	sbi	0x1f, 0	; 31
    1a4e:	99 27       	eor	r25, r25
    1a50:	80 b5       	in	r24, 0x20	; 32
    1a52:	08 95       	ret

00001a54 <__eeupd_byte_m328p>:
    1a54:	26 2f       	mov	r18, r22

00001a56 <__eeupd_r18_m328p>:
    1a56:	f9 99       	sbic	0x1f, 1	; 31
    1a58:	fe cf       	rjmp	.-4      	; 0x1a56 <__eeupd_r18_m328p>
    1a5a:	92 bd       	out	0x22, r25	; 34
    1a5c:	81 bd       	out	0x21, r24	; 33
    1a5e:	f8 9a       	sbi	0x1f, 0	; 31
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	00 b4       	in	r0, 0x20	; 32
    1a64:	02 16       	cp	r0, r18
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <__eeupd_r18_m328p+0x20>
    1a68:	1f ba       	out	0x1f, r1	; 31
    1a6a:	20 bd       	out	0x20, r18	; 32
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	fa 9a       	sbi	0x1f, 2	; 31
    1a72:	f9 9a       	sbi	0x1f, 1	; 31
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	08 95       	ret

00001a78 <_exit>:
    1a78:	f8 94       	cli

00001a7a <__stop_program>:
    1a7a:	ff cf       	rjmp	.-2      	; 0x1a7a <__stop_program>
